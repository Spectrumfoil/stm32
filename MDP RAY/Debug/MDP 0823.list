
MDP 0823.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c28  0800bbf8  0800bbf8  0001bbf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c820  0800c820  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c820  0800c820  0001c820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c828  0800c828  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c828  0800c828  0001c828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c82c  0800c82c  0001c82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00005fec  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006060  20006060  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e108  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d36  00000000  00000000  0003e1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f8  00000000  00000000  00041ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001898  00000000  00000000  000438e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005774  00000000  00000000  00045178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e295  00000000  00000000  0004a8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7c7b  00000000  00000000  00068b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001507fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000772c  00000000  00000000  0015084c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bbdc 	.word	0x0800bbdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800bbdc 	.word	0x0800bbdc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f001 fb38 	bl	8002554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f86e 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 fb64 	bl	80015b4 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000eec:	f000 fa8e 	bl	800140c <MX_TIM8_Init>
  MX_TIM2_Init();
 8000ef0:	f000 f9e4 	bl	80012bc <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ef4:	f000 f944 	bl	8001180 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000ef8:	f000 fb32 	bl	8001560 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000efc:	f000 fa32 	bl	8001364 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000f00:	f000 f910 	bl	8001124 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000f04:	f000 f8bc 	bl	8001080 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000f08:	f009 fa20 	bl	800a34c <OLED_Init>
  HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,4);
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	491b      	ldr	r1, [pc, #108]	; (8000f7c <main+0xa0>)
 8000f10:	481b      	ldr	r0, [pc, #108]	; (8000f80 <main+0xa4>)
 8000f12:	f005 f854 	bl	8005fbe <HAL_UART_Receive_IT>
  LPF_Init2(&hadc1,s);
 8000f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4819      	ldr	r0, [pc, #100]	; (8000f84 <main+0xa8>)
 8000f1e:	f008 ffed 	bl	8009efc <LPF_Init2>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f22:	f006 f819 	bl	8006f58 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f26:	4a18      	ldr	r2, [pc, #96]	; (8000f88 <main+0xac>)
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4818      	ldr	r0, [pc, #96]	; (8000f8c <main+0xb0>)
 8000f2c:	f006 f85e 	bl	8006fec <osThreadNew>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <main+0xb4>)
 8000f34:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(show, NULL, &myTask02_attributes);
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <main+0xb8>)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4817      	ldr	r0, [pc, #92]	; (8000f98 <main+0xbc>)
 8000f3c:	f006 f856 	bl	8006fec <osThreadNew>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a16      	ldr	r2, [pc, #88]	; (8000f9c <main+0xc0>)
 8000f44:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motors, NULL, &MotorTask_attributes);
 8000f46:	4a16      	ldr	r2, [pc, #88]	; (8000fa0 <main+0xc4>)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <main+0xc8>)
 8000f4c:	f006 f84e 	bl	8006fec <osThreadNew>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <main+0xcc>)
 8000f54:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 8000f56:	4a15      	ldr	r2, [pc, #84]	; (8000fac <main+0xd0>)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4815      	ldr	r0, [pc, #84]	; (8000fb0 <main+0xd4>)
 8000f5c:	f006 f846 	bl	8006fec <osThreadNew>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <main+0xd8>)
 8000f64:	6013      	str	r3, [r2, #0]

  /* creation of IRTask */
  IRTaskHandle = osThreadNew(IR, NULL, &IRTask_attributes);
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <main+0xdc>)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4814      	ldr	r0, [pc, #80]	; (8000fbc <main+0xe0>)
 8000f6c:	f006 f83e 	bl	8006fec <osThreadNew>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <main+0xe4>)
 8000f74:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f76:	f006 f813 	bl	8006fa0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <main+0x9e>
 8000f7c:	200002c0 	.word	0x200002c0
 8000f80:	2000024c 	.word	0x2000024c
 8000f84:	20000090 	.word	0x20000090
 8000f88:	0800bc8c 	.word	0x0800bc8c
 8000f8c:	080017ad 	.word	0x080017ad
 8000f90:	20000290 	.word	0x20000290
 8000f94:	0800bcb0 	.word	0x0800bcb0
 8000f98:	0800183d 	.word	0x0800183d
 8000f9c:	20000294 	.word	0x20000294
 8000fa0:	0800bcd4 	.word	0x0800bcd4
 8000fa4:	08001879 	.word	0x08001879
 8000fa8:	20000298 	.word	0x20000298
 8000fac:	0800bcf8 	.word	0x0800bcf8
 8000fb0:	08001d2d 	.word	0x08001d2d
 8000fb4:	2000029c 	.word	0x2000029c
 8000fb8:	0800bd1c 	.word	0x0800bd1c
 8000fbc:	08001f4d 	.word	0x08001f4d
 8000fc0:	200002a0 	.word	0x200002a0

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	2230      	movs	r2, #48	; 0x30
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f009 fa7e 	bl	800a4d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <SystemClock_Config+0xb4>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <SystemClock_Config+0xb4>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <SystemClock_Config+0xb4>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <SystemClock_Config+0xb8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a1b      	ldr	r2, [pc, #108]	; (800107c <SystemClock_Config+0xb8>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <SystemClock_Config+0xb8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001020:	2302      	movs	r3, #2
 8001022:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001028:	2310      	movs	r3, #16
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800102c:	2300      	movs	r3, #0
 800102e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4618      	mov	r0, r3
 8001036:	f003 fa7f 	bl	8004538 <HAL_RCC_OscConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001040:	f000 ffa4 	bl	8001f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001044:	230f      	movs	r3, #15
 8001046:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f003 fce2 	bl	8004a28 <HAL_RCC_ClockConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800106a:	f000 ff8f 	bl	8001f8c <Error_Handler>
  }
}
 800106e:	bf00      	nop
 8001070:	3750      	adds	r7, #80	; 0x50
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	40007000 	.word	0x40007000

08001080 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <MX_ADC1_Init+0x98>)
 8001094:	4a21      	ldr	r2, [pc, #132]	; (800111c <MX_ADC1_Init+0x9c>)
 8001096:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_ADC1_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <MX_ADC1_Init+0x98>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <MX_ADC1_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MX_ADC1_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <MX_ADC1_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <MX_ADC1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_ADC1_Init+0x98>)
 80010c0:	4a17      	ldr	r2, [pc, #92]	; (8001120 <MX_ADC1_Init+0xa0>)
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_ADC1_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_ADC1_Init+0x98>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_ADC1_Init+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_ADC1_Init+0x98>)
 80010da:	2201      	movs	r2, #1
 80010dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010de:	480e      	ldr	r0, [pc, #56]	; (8001118 <MX_ADC1_Init+0x98>)
 80010e0:	f001 face 	bl	8002680 <HAL_ADC_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010ea:	f000 ff4f 	bl	8001f8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010ee:	230a      	movs	r3, #10
 80010f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	; (8001118 <MX_ADC1_Init+0x98>)
 8001100:	f001 fca0 	bl	8002a44 <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800110a:	f000 ff3f 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000090 	.word	0x20000090
 800111c:	40012000 	.word	0x40012000
 8001120:	0f000001 	.word	0x0f000001

08001124 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_I2C1_Init+0x50>)
 800112a:	4a13      	ldr	r2, [pc, #76]	; (8001178 <MX_I2C1_Init+0x54>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_I2C1_Init+0x50>)
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_I2C1_Init+0x58>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_I2C1_Init+0x50>)
 8001142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001146:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_I2C1_Init+0x50>)
 8001162:	f002 fa01 	bl	8003568 <HAL_I2C_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800116c:	f000 ff0e 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200000d8 	.word	0x200000d8
 8001178:	40005400 	.word	0x40005400
 800117c:	000186a0 	.word	0x000186a0

08001180 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b096      	sub	sp, #88	; 0x58
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001186:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800119e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]
 80011ae:	615a      	str	r2, [r3, #20]
 80011b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2220      	movs	r2, #32
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f009 f98b 	bl	800a4d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011be:	4b3d      	ldr	r3, [pc, #244]	; (80012b4 <MX_TIM1_Init+0x134>)
 80011c0:	4a3d      	ldr	r2, [pc, #244]	; (80012b8 <MX_TIM1_Init+0x138>)
 80011c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80011c4:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <MX_TIM1_Init+0x134>)
 80011c6:	22a0      	movs	r2, #160	; 0xa0
 80011c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <MX_TIM1_Init+0x134>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80011d0:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <MX_TIM1_Init+0x134>)
 80011d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b36      	ldr	r3, [pc, #216]	; (80012b4 <MX_TIM1_Init+0x134>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011de:	4b35      	ldr	r3, [pc, #212]	; (80012b4 <MX_TIM1_Init+0x134>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011e4:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <MX_TIM1_Init+0x134>)
 80011e6:	2280      	movs	r2, #128	; 0x80
 80011e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ea:	4832      	ldr	r0, [pc, #200]	; (80012b4 <MX_TIM1_Init+0x134>)
 80011ec:	f003 fdfc 	bl	8004de8 <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011f6:	f000 fec9 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001200:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001204:	4619      	mov	r1, r3
 8001206:	482b      	ldr	r0, [pc, #172]	; (80012b4 <MX_TIM1_Init+0x134>)
 8001208:	f004 f954 	bl	80054b4 <HAL_TIM_ConfigClockSource>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001212:	f000 febb 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001216:	4827      	ldr	r0, [pc, #156]	; (80012b4 <MX_TIM1_Init+0x134>)
 8001218:	f003 fe35 	bl	8004e86 <HAL_TIM_PWM_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001222:	f000 feb3 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800122e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001232:	4619      	mov	r1, r3
 8001234:	481f      	ldr	r0, [pc, #124]	; (80012b4 <MX_TIM1_Init+0x134>)
 8001236:	f004 fd15 	bl	8005c64 <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001240:	f000 fea4 	bl	8001f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001244:	2360      	movs	r3, #96	; 0x60
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124c:	2300      	movs	r3, #0
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800125c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001260:	220c      	movs	r2, #12
 8001262:	4619      	mov	r1, r3
 8001264:	4813      	ldr	r0, [pc, #76]	; (80012b4 <MX_TIM1_Init+0x134>)
 8001266:	f004 f863 	bl	8005330 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001270:	f000 fe8c 	bl	8001f8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	4619      	mov	r1, r3
 8001296:	4807      	ldr	r0, [pc, #28]	; (80012b4 <MX_TIM1_Init+0x134>)
 8001298:	f004 fd60 	bl	8005d5c <HAL_TIMEx_ConfigBreakDeadTime>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80012a2:	f000 fe73 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <MX_TIM1_Init+0x134>)
 80012a8:	f001 f82a 	bl	8002300 <HAL_TIM_MspPostInit>

}
 80012ac:	bf00      	nop
 80012ae:	3758      	adds	r7, #88	; 0x58
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000012c 	.word	0x2000012c
 80012b8:	40010000 	.word	0x40010000

080012bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08c      	sub	sp, #48	; 0x30
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2224      	movs	r2, #36	; 0x24
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f009 f902 	bl	800a4d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <MX_TIM2_Init+0xa4>)
 80012da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <MX_TIM2_Init+0xa4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <MX_TIM2_Init+0xa4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012ec:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <MX_TIM2_Init+0xa4>)
 80012ee:	f04f 32ff 	mov.w	r2, #4294967295
 80012f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_TIM2_Init+0xa4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <MX_TIM2_Init+0xa4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001300:	2303      	movs	r3, #3
 8001302:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001308:	2301      	movs	r3, #1
 800130a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001310:	230a      	movs	r3, #10
 8001312:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001318:	2301      	movs	r3, #1
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	4619      	mov	r1, r3
 800132a:	480d      	ldr	r0, [pc, #52]	; (8001360 <MX_TIM2_Init+0xa4>)
 800132c:	f003 fecc 	bl	80050c8 <HAL_TIM_Encoder_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001336:	f000 fe29 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MX_TIM2_Init+0xa4>)
 8001348:	f004 fc8c 	bl	8005c64 <HAL_TIMEx_MasterConfigSynchronization>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001352:	f000 fe1b 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	3730      	adds	r7, #48	; 0x30
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000174 	.word	0x20000174

08001364 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	; 0x30
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2224      	movs	r2, #36	; 0x24
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f009 f8ae 	bl	800a4d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001380:	4b20      	ldr	r3, [pc, #128]	; (8001404 <MX_TIM3_Init+0xa0>)
 8001382:	4a21      	ldr	r2, [pc, #132]	; (8001408 <MX_TIM3_Init+0xa4>)
 8001384:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001386:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_TIM3_Init+0xa0>)
 8001388:	2200      	movs	r2, #0
 800138a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <MX_TIM3_Init+0xa0>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001392:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_TIM3_Init+0xa0>)
 8001394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001398:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_TIM3_Init+0xa0>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_TIM3_Init+0xa0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013a6:	2303      	movs	r3, #3
 80013a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ae:	2301      	movs	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013be:	2301      	movs	r3, #1
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	4619      	mov	r1, r3
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <MX_TIM3_Init+0xa0>)
 80013d2:	f003 fe79 	bl	80050c8 <HAL_TIM_Encoder_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80013dc:	f000 fdd6 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_TIM3_Init+0xa0>)
 80013ee:	f004 fc39 	bl	8005c64 <HAL_TIMEx_MasterConfigSynchronization>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013f8:	f000 fdc8 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3730      	adds	r7, #48	; 0x30
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200001bc 	.word	0x200001bc
 8001408:	40000400 	.word	0x40000400

0800140c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b096      	sub	sp, #88	; 0x58
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001412:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]
 800143a:	615a      	str	r2, [r3, #20]
 800143c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2220      	movs	r2, #32
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f009 f845 	bl	800a4d4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800144a:	4b43      	ldr	r3, [pc, #268]	; (8001558 <MX_TIM8_Init+0x14c>)
 800144c:	4a43      	ldr	r2, [pc, #268]	; (800155c <MX_TIM8_Init+0x150>)
 800144e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001450:	4b41      	ldr	r3, [pc, #260]	; (8001558 <MX_TIM8_Init+0x14c>)
 8001452:	2200      	movs	r2, #0
 8001454:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001456:	4b40      	ldr	r3, [pc, #256]	; (8001558 <MX_TIM8_Init+0x14c>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 800145c:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <MX_TIM8_Init+0x14c>)
 800145e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001462:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b3c      	ldr	r3, [pc, #240]	; (8001558 <MX_TIM8_Init+0x14c>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800146a:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <MX_TIM8_Init+0x14c>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b39      	ldr	r3, [pc, #228]	; (8001558 <MX_TIM8_Init+0x14c>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001476:	4838      	ldr	r0, [pc, #224]	; (8001558 <MX_TIM8_Init+0x14c>)
 8001478:	f003 fcb6 	bl	8004de8 <HAL_TIM_Base_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001482:	f000 fd83 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800148c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001490:	4619      	mov	r1, r3
 8001492:	4831      	ldr	r0, [pc, #196]	; (8001558 <MX_TIM8_Init+0x14c>)
 8001494:	f004 f80e 	bl	80054b4 <HAL_TIM_ConfigClockSource>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800149e:	f000 fd75 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014a2:	482d      	ldr	r0, [pc, #180]	; (8001558 <MX_TIM8_Init+0x14c>)
 80014a4:	f003 fcef 	bl	8004e86 <HAL_TIM_PWM_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80014ae:	f000 fd6d 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014be:	4619      	mov	r1, r3
 80014c0:	4825      	ldr	r0, [pc, #148]	; (8001558 <MX_TIM8_Init+0x14c>)
 80014c2:	f004 fbcf 	bl	8005c64 <HAL_TIMEx_MasterConfigSynchronization>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80014cc:	f000 fd5e 	bl	8001f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d0:	2360      	movs	r3, #96	; 0x60
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014dc:	2300      	movs	r3, #0
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f0:	2200      	movs	r2, #0
 80014f2:	4619      	mov	r1, r3
 80014f4:	4818      	ldr	r0, [pc, #96]	; (8001558 <MX_TIM8_Init+0x14c>)
 80014f6:	f003 ff1b 	bl	8005330 <HAL_TIM_PWM_ConfigChannel>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001500:	f000 fd44 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001508:	2204      	movs	r2, #4
 800150a:	4619      	mov	r1, r3
 800150c:	4812      	ldr	r0, [pc, #72]	; (8001558 <MX_TIM8_Init+0x14c>)
 800150e:	f003 ff0f 	bl	8005330 <HAL_TIM_PWM_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001518:	f000 fd38 	bl	8001f8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001534:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <MX_TIM8_Init+0x14c>)
 8001540:	f004 fc0c 	bl	8005d5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800154a:	f000 fd1f 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3758      	adds	r7, #88	; 0x58
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000204 	.word	0x20000204
 800155c:	40010400 	.word	0x40010400

08001560 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_USART3_UART_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART3_UART_Init+0x4c>)
 8001598:	f004 fc32 	bl	8005e00 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 fcf3 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000024c 	.word	0x2000024c
 80015b0:	40004800 	.word	0x40004800

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b31      	ldr	r3, [pc, #196]	; (8001694 <MX_GPIO_Init+0xe0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a30      	ldr	r2, [pc, #192]	; (8001694 <MX_GPIO_Init+0xe0>)
 80015d4:	f043 0310 	orr.w	r3, r3, #16
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <MX_GPIO_Init+0xe0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <MX_GPIO_Init+0xe0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a29      	ldr	r2, [pc, #164]	; (8001694 <MX_GPIO_Init+0xe0>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b27      	ldr	r3, [pc, #156]	; (8001694 <MX_GPIO_Init+0xe0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <MX_GPIO_Init+0xe0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a22      	ldr	r2, [pc, #136]	; (8001694 <MX_GPIO_Init+0xe0>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <MX_GPIO_Init+0xe0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <MX_GPIO_Init+0xe0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <MX_GPIO_Init+0xe0>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <MX_GPIO_Init+0xe0>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001640:	4815      	ldr	r0, [pc, #84]	; (8001698 <MX_GPIO_Init+0xe4>)
 8001642:	f001 ff5d 	bl	8003500 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	213c      	movs	r1, #60	; 0x3c
 800164a:	4814      	ldr	r0, [pc, #80]	; (800169c <MX_GPIO_Init+0xe8>)
 800164c:	f001 ff58 	bl	8003500 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001650:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001654:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <MX_GPIO_Init+0xe4>)
 800166a:	f001 fdad 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800166e:	233c      	movs	r3, #60	; 0x3c
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167a:	2302      	movs	r3, #2
 800167c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_GPIO_Init+0xe8>)
 8001686:	f001 fd9f 	bl	80031c8 <HAL_GPIO_Init>

}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40021000 	.word	0x40021000
 800169c:	40020000 	.word	0x40020000

080016a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	//prevent unused argument compilation warning
	UNUSED(huart);
	HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,10,0xFFFF);
 80016a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ac:	220a      	movs	r2, #10
 80016ae:	4907      	ldr	r1, [pc, #28]	; (80016cc <HAL_UART_RxCpltCallback+0x2c>)
 80016b0:	4807      	ldr	r0, [pc, #28]	; (80016d0 <HAL_UART_RxCpltCallback+0x30>)
 80016b2:	f004 fbf2 	bl	8005e9a <HAL_UART_Transmit>

	//chiam code below
	messageCompleteHandler();
 80016b6:	f000 f80f 	bl	80016d8 <messageCompleteHandler>
	HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer,4);
 80016ba:	2204      	movs	r2, #4
 80016bc:	4903      	ldr	r1, [pc, #12]	; (80016cc <HAL_UART_RxCpltCallback+0x2c>)
 80016be:	4804      	ldr	r0, [pc, #16]	; (80016d0 <HAL_UART_RxCpltCallback+0x30>)
 80016c0:	f004 fc7d 	bl	8005fbe <HAL_UART_Receive_IT>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200002c0 	.word	0x200002c0
 80016d0:	2000024c 	.word	0x2000024c
 80016d4:	00000000 	.word	0x00000000

080016d8 <messageCompleteHandler>:

void messageCompleteHandler(void){
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
	  choice=aRxBuffer[0];
 80016de:	4b28      	ldr	r3, [pc, #160]	; (8001780 <messageCompleteHandler+0xa8>)
 80016e0:	781a      	ldrb	r2, [r3, #0]
 80016e2:	4b28      	ldr	r3, [pc, #160]	; (8001784 <messageCompleteHandler+0xac>)
 80016e4:	701a      	strb	r2, [r3, #0]
	  value=0;
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <messageCompleteHandler+0xb0>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	801a      	strh	r2, [r3, #0]
	  int i;
	  for(i=3;i>0;i--){//process 3 digit value after command
 80016ec:	2303      	movs	r3, #3
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	e039      	b.n	8001766 <messageCompleteHandler+0x8e>
		  value+=(aRxBuffer[i]-48)*pow(10,3-i);
 80016f2:	4a23      	ldr	r2, [pc, #140]	; (8001780 <messageCompleteHandler+0xa8>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	3b30      	subs	r3, #48	; 0x30
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff09 	bl	8000514 <__aeabi_i2d>
 8001702:	4604      	mov	r4, r0
 8001704:	460d      	mov	r5, r1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f1c3 0303 	rsb	r3, r3, #3
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff01 	bl	8000514 <__aeabi_i2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	ec43 2b11 	vmov	d1, r2, r3
 800171a:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001778 <messageCompleteHandler+0xa0>
 800171e:	f009 fb41 	bl	800ada4 <pow>
 8001722:	ec53 2b10 	vmov	r2, r3, d0
 8001726:	4620      	mov	r0, r4
 8001728:	4629      	mov	r1, r5
 800172a:	f7fe ff5d 	bl	80005e8 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4614      	mov	r4, r2
 8001734:	461d      	mov	r5, r3
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <messageCompleteHandler+0xb0>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe feea 	bl	8000514 <__aeabi_i2d>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4620      	mov	r0, r4
 8001746:	4629      	mov	r1, r5
 8001748:	f7fe fd98 	bl	800027c <__adddf3>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	f7ff fa20 	bl	8000b98 <__aeabi_d2uiz>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <messageCompleteHandler+0xb0>)
 800175e:	801a      	strh	r2, [r3, #0]
	  for(i=3;i>0;i--){//process 3 digit value after command
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	dcc2      	bgt.n	80016f2 <messageCompleteHandler+0x1a>
	  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bdb0      	pop	{r4, r5, r7, pc}
 8001776:	bf00      	nop
 8001778:	00000000 	.word	0x00000000
 800177c:	40240000 	.word	0x40240000
 8001780:	200002c0 	.word	0x200002c0
 8001784:	200002d4 	.word	0x200002d4
 8001788:	200002d6 	.word	0x200002d6

0800178c <SensorRead_ISR>:

void SensorRead_ISR(void){
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	centerIR = LPF_Calc2(frontIR_ADC);
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <SensorRead_ISR+0x18>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f008 fbf9 	bl	8009f8c <LPF_Calc2>
 800179a:	4603      	mov	r3, r0
 800179c:	4a02      	ldr	r2, [pc, #8]	; (80017a8 <SensorRead_ISR+0x1c>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200002e4 	.word	0x200002e4
 80017a8:	200002e8 	.word	0x200002e8

080017ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	//uint8_t ch='A';
	uint16_t readings[3];
	uint8_t buffer[20];
	ICM_CumuVal = 0 ;
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <StartDefaultTask+0x80>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	801a      	strh	r2, [r3, #0]
	ICM20948_init(&hi2c1,0,GYRO_FULL_SCALE_2000DPS,ACCEL_FULL_SCALE_16G);
 80017ba:	2303      	movs	r3, #3
 80017bc:	2203      	movs	r2, #3
 80017be:	2100      	movs	r1, #0
 80017c0:	481b      	ldr	r0, [pc, #108]	; (8001830 <StartDefaultTask+0x84>)
 80017c2:	f008 f9bf 	bl	8009b44 <ICM20948_init>
	for (;;) {
		//HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFFFFFF);//normally FFFF test

		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); //optional led
 80017c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ca:	481a      	ldr	r0, [pc, #104]	; (8001834 <StartDefaultTask+0x88>)
 80017cc:	f001 feb1 	bl	8003532 <HAL_GPIO_TogglePin>
		//osDelay(2000);


		ICM20948_readGyroscope_allAxises(&hi2c1, 0, GYRO_FULL_SCALE_2000DPS,readings);
 80017d0:	f107 0320 	add.w	r3, r7, #32
 80017d4:	2203      	movs	r2, #3
 80017d6:	2100      	movs	r1, #0
 80017d8:	4815      	ldr	r0, [pc, #84]	; (8001830 <StartDefaultTask+0x84>)
 80017da:	f008 fa3d 	bl	8009c58 <ICM20948_readGyroscope_allAxises>
		if (readings[2] > 32768) {
 80017de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017e4:	d90a      	bls.n	80017fc <StartDefaultTask+0x50>
			ICM_CumuVal = readings[2] - 65536 + ICM_CumuVal;
 80017e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <StartDefaultTask+0x80>)
 80017ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	b21a      	sxth	r2, r3
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <StartDefaultTask+0x80>)
 80017f8:	801a      	strh	r2, [r3, #0]
 80017fa:	e009      	b.n	8001810 <StartDefaultTask+0x64>
		} else {
			ICM_CumuVal = readings[2] + ICM_CumuVal;
 80017fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <StartDefaultTask+0x80>)
 8001800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001804:	b29b      	uxth	r3, r3
 8001806:	4413      	add	r3, r2
 8001808:	b29b      	uxth	r3, r3
 800180a:	b21a      	sxth	r2, r3
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <StartDefaultTask+0x80>)
 800180e:	801a      	strh	r2, [r3, #0]
		}

		sprintf(buffer, "%5d %5d\r\n", ICM_CumuVal,readings[2]);
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <StartDefaultTask+0x80>)
 8001812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001816:	461a      	mov	r2, r3
 8001818:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800181a:	f107 000c 	add.w	r0, r7, #12
 800181e:	4906      	ldr	r1, [pc, #24]	; (8001838 <StartDefaultTask+0x8c>)
 8001820:	f008 fe60 	bl	800a4e4 <siprintf>
		//HAL_UART_Transmit(&huart3, (uint8_t *) buffer, 20, 0xFFFFFF);
		osDelay(100);
 8001824:	2064      	movs	r0, #100	; 0x64
 8001826:	f005 fc73 	bl	8007110 <osDelay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); //optional led
 800182a:	e7cc      	b.n	80017c6 <StartDefaultTask+0x1a>
 800182c:	200002a4 	.word	0x200002a4
 8001830:	200000d8 	.word	0x200000d8
 8001834:	40021000 	.word	0x40021000
 8001838:	0800bc30 	.word	0x0800bc30

0800183c <show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show */
void show(void *argument)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //sprintf(hello,"%s\0",choice);
	  //OLED_ShowString(10,10,hello);
	  sprintf(hello,"IR:%5d\0",centerIR);
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <show+0x34>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	4909      	ldr	r1, [pc, #36]	; (8001874 <show+0x38>)
 800184e:	4618      	mov	r0, r3
 8001850:	f008 fe48 	bl	800a4e4 <siprintf>
	  OLED_ShowString(10,20,hello);
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	461a      	mov	r2, r3
 800185a:	2114      	movs	r1, #20
 800185c:	200a      	movs	r0, #10
 800185e:	f008 fd43 	bl	800a2e8 <OLED_ShowString>
	  OLED_Refresh_Gram();
 8001862:	f008 fbcd 	bl	800a000 <OLED_Refresh_Gram>
	  osDelay(50);
 8001866:	2032      	movs	r0, #50	; 0x32
 8001868:	f005 fc52 	bl	8007110 <osDelay>
	  sprintf(hello,"IR:%5d\0",centerIR);
 800186c:	e7ea      	b.n	8001844 <show+0x8>
 800186e:	bf00      	nop
 8001870:	200002e8 	.word	0x200002e8
 8001874:	0800bc3c 	.word	0x0800bc3c

08001878 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void *argument)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motors */
	//uint16_t pwmValLeft=0;//A is left motor B is right
	//uint16_t pwmValRight=0;
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);//left
 8001880:	2100      	movs	r1, #0
 8001882:	4857      	ldr	r0, [pc, #348]	; (80019e0 <motors+0x168>)
 8001884:	f003 fb58 	bl	8004f38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);//right
 8001888:	2104      	movs	r1, #4
 800188a:	4855      	ldr	r0, [pc, #340]	; (80019e0 <motors+0x168>)
 800188c:	f003 fb54 	bl	8004f38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);//servo
 8001890:	210c      	movs	r1, #12
 8001892:	4854      	ldr	r0, [pc, #336]	; (80019e4 <motors+0x16c>)
 8001894:	f003 fb50 	bl	8004f38 <HAL_TIM_PWM_Start>
	int communicationbuffer[1];
	htim1.Instance->CCR4=150; //center steer
 8001898:	4b52      	ldr	r3, [pc, #328]	; (80019e4 <motors+0x16c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2296      	movs	r2, #150	; 0x96
 800189e:	641a      	str	r2, [r3, #64]	; 0x40
	char current;//stores current motion
  /* Infinite loop */
	for(;;)
	{
		if(choice=='T'){ //test toggle led if uart working
 80018a0:	4b51      	ldr	r3, [pc, #324]	; (80019e8 <motors+0x170>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b54      	cmp	r3, #84	; 0x54
 80018a6:	f000 80c6 	beq.w	8001a36 <motors+0x1be>
			if(value==123){//test
				//HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);//on led
			}
		}
		else if(choice=='W'){//forward straight line
 80018aa:	4b4f      	ldr	r3, [pc, #316]	; (80019e8 <motors+0x170>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b57      	cmp	r3, #87	; 0x57
 80018b0:	d126      	bne.n	8001900 <motors+0x88>
			current=choice;//store value
 80018b2:	4b4d      	ldr	r3, [pc, #308]	; (80019e8 <motors+0x170>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	75fb      	strb	r3, [r7, #23]
			ICM_CumuVal=0;
 80018b8:	4b4c      	ldr	r3, [pc, #304]	; (80019ec <motors+0x174>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	801a      	strh	r2, [r3, #0]
			htim1.Instance->CCR4=150; //straighten steer
 80018be:	4b49      	ldr	r3, [pc, #292]	; (80019e4 <motors+0x16c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2296      	movs	r2, #150	; 0x96
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40
			leftremaining=value*45;//ratio is 50:1cm, CALIBRATE TO 45
 80018c6:	4b4a      	ldr	r3, [pc, #296]	; (80019f0 <motors+0x178>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	011a      	lsls	r2, r3, #4
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	4a47      	ldr	r2, [pc, #284]	; (80019f4 <motors+0x17c>)
 80018d8:	6013      	str	r3, [r2, #0]
			rightremaining=value*45;
 80018da:	4b45      	ldr	r3, [pc, #276]	; (80019f0 <motors+0x178>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	011a      	lsls	r2, r3, #4
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	4a43      	ldr	r2, [pc, #268]	; (80019f8 <motors+0x180>)
 80018ec:	6013      	str	r3, [r2, #0]
			pwmValLeft=1000;//wheel speed
 80018ee:	4b43      	ldr	r3, [pc, #268]	; (80019fc <motors+0x184>)
 80018f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f4:	801a      	strh	r2, [r3, #0]
			pwmValRight=1000;
 80018f6:	4b42      	ldr	r3, [pc, #264]	; (8001a00 <motors+0x188>)
 80018f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018fc:	801a      	strh	r2, [r3, #0]
 80018fe:	e09a      	b.n	8001a36 <motors+0x1be>

		}
		else if(choice=='M'){//forward straight line for TASK 2
 8001900:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <motors+0x170>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b4d      	cmp	r3, #77	; 0x4d
 8001906:	d126      	bne.n	8001956 <motors+0xde>
			current=choice;//store value
 8001908:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <motors+0x170>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	75fb      	strb	r3, [r7, #23]
			ICM_CumuVal=0;
 800190e:	4b37      	ldr	r3, [pc, #220]	; (80019ec <motors+0x174>)
 8001910:	2200      	movs	r2, #0
 8001912:	801a      	strh	r2, [r3, #0]
			htim1.Instance->CCR4=150; //straighten steer
 8001914:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <motors+0x16c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2296      	movs	r2, #150	; 0x96
 800191a:	641a      	str	r2, [r3, #64]	; 0x40
			leftremaining=value*45;//ratio is 50:1cm, CALIBRATE TO 45
 800191c:	4b34      	ldr	r3, [pc, #208]	; (80019f0 <motors+0x178>)
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	011a      	lsls	r2, r3, #4
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	4a31      	ldr	r2, [pc, #196]	; (80019f4 <motors+0x17c>)
 800192e:	6013      	str	r3, [r2, #0]
			rightremaining=value*45;
 8001930:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <motors+0x178>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	011a      	lsls	r2, r3, #4
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	4a2d      	ldr	r2, [pc, #180]	; (80019f8 <motors+0x180>)
 8001942:	6013      	str	r3, [r2, #0]
			pwmValLeft=2000;//wheel speed
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <motors+0x184>)
 8001946:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800194a:	801a      	strh	r2, [r3, #0]
			pwmValRight=2000;
 800194c:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <motors+0x188>)
 800194e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001952:	801a      	strh	r2, [r3, #0]
 8001954:	e06f      	b.n	8001a36 <motors+0x1be>
		}

		else if(choice=='S'){//backward straight line
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <motors+0x170>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b53      	cmp	r3, #83	; 0x53
 800195c:	d126      	bne.n	80019ac <motors+0x134>
			current=choice;
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <motors+0x170>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	75fb      	strb	r3, [r7, #23]
			ICM_CumuVal=0;
 8001964:	4b21      	ldr	r3, [pc, #132]	; (80019ec <motors+0x174>)
 8001966:	2200      	movs	r2, #0
 8001968:	801a      	strh	r2, [r3, #0]
			htim1.Instance->CCR4=150; //straighten steer
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <motors+0x16c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2296      	movs	r2, #150	; 0x96
 8001970:	641a      	str	r2, [r3, #64]	; 0x40
			leftremaining=value*45;//ratio is 50:1cm, CALIBRATE TO 45
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <motors+0x178>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	011a      	lsls	r2, r3, #4
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <motors+0x17c>)
 8001984:	6013      	str	r3, [r2, #0]
			rightremaining=value*45;
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <motors+0x178>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	011a      	lsls	r2, r3, #4
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <motors+0x180>)
 8001998:	6013      	str	r3, [r2, #0]
			pwmValLeft=1000;//wheel speed
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <motors+0x184>)
 800199c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019a0:	801a      	strh	r2, [r3, #0]
			pwmValRight=1000;
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <motors+0x188>)
 80019a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019a8:	801a      	strh	r2, [r3, #0]
 80019aa:	e044      	b.n	8001a36 <motors+0x1be>
		}
		else if(choice=='E' || choice=='D'){//forward right or backward right steer
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <motors+0x170>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b45      	cmp	r3, #69	; 0x45
 80019b2:	d003      	beq.n	80019bc <motors+0x144>
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <motors+0x170>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b44      	cmp	r3, #68	; 0x44
 80019ba:	d123      	bne.n	8001a04 <motors+0x18c>
			current=choice;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <motors+0x170>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	75fb      	strb	r3, [r7, #23]
			ICM_CumuVal=0;
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <motors+0x174>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	801a      	strh	r2, [r3, #0]
			htim1.Instance->CCR4=210;//servo turn right
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <motors+0x16c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	22d2      	movs	r2, #210	; 0xd2
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40
			pwmValLeft=2000;//wheel speed, left wheel turn faster
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <motors+0x184>)
 80019d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019d6:	801a      	strh	r2, [r3, #0]
			pwmValRight=250;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <motors+0x188>)
 80019da:	22fa      	movs	r2, #250	; 0xfa
 80019dc:	801a      	strh	r2, [r3, #0]
 80019de:	e02a      	b.n	8001a36 <motors+0x1be>
 80019e0:	20000204 	.word	0x20000204
 80019e4:	2000012c 	.word	0x2000012c
 80019e8:	200002d4 	.word	0x200002d4
 80019ec:	200002a4 	.word	0x200002a4
 80019f0:	200002d6 	.word	0x200002d6
 80019f4:	200002dc 	.word	0x200002dc
 80019f8:	200002e0 	.word	0x200002e0
 80019fc:	200002d8 	.word	0x200002d8
 8001a00:	200002da 	.word	0x200002da
		}
		else if(choice=='Q' || choice=='A'){//forward left or backward left steer
 8001a04:	4b6b      	ldr	r3, [pc, #428]	; (8001bb4 <motors+0x33c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b51      	cmp	r3, #81	; 0x51
 8001a0a:	d003      	beq.n	8001a14 <motors+0x19c>
 8001a0c:	4b69      	ldr	r3, [pc, #420]	; (8001bb4 <motors+0x33c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b41      	cmp	r3, #65	; 0x41
 8001a12:	d110      	bne.n	8001a36 <motors+0x1be>
			current=choice;
 8001a14:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <motors+0x33c>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	75fb      	strb	r3, [r7, #23]
			ICM_CumuVal=0;
 8001a1a:	4b67      	ldr	r3, [pc, #412]	; (8001bb8 <motors+0x340>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	801a      	strh	r2, [r3, #0]
			htim1.Instance->CCR4=120;//servo turn left
 8001a20:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <motors+0x344>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2278      	movs	r2, #120	; 0x78
 8001a26:	641a      	str	r2, [r3, #64]	; 0x40
			pwmValLeft=250;//wheel speed, right wheel turn faster
 8001a28:	4b65      	ldr	r3, [pc, #404]	; (8001bc0 <motors+0x348>)
 8001a2a:	22fa      	movs	r2, #250	; 0xfa
 8001a2c:	801a      	strh	r2, [r3, #0]
			pwmValRight=1600;
 8001a2e:	4b65      	ldr	r3, [pc, #404]	; (8001bc4 <motors+0x34c>)
 8001a30:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001a34:	801a      	strh	r2, [r3, #0]
		}

		if(choice=='Q' || choice=='W' || choice=='E'|| choice=='M'){//forward
 8001a36:	4b5f      	ldr	r3, [pc, #380]	; (8001bb4 <motors+0x33c>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b51      	cmp	r3, #81	; 0x51
 8001a3c:	d00b      	beq.n	8001a56 <motors+0x1de>
 8001a3e:	4b5d      	ldr	r3, [pc, #372]	; (8001bb4 <motors+0x33c>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b57      	cmp	r3, #87	; 0x57
 8001a44:	d007      	beq.n	8001a56 <motors+0x1de>
 8001a46:	4b5b      	ldr	r3, [pc, #364]	; (8001bb4 <motors+0x33c>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b45      	cmp	r3, #69	; 0x45
 8001a4c:	d003      	beq.n	8001a56 <motors+0x1de>
 8001a4e:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <motors+0x33c>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b4d      	cmp	r3, #77	; 0x4d
 8001a54:	d113      	bne.n	8001a7e <motors+0x206>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);//left
 8001a56:	2200      	movs	r2, #0
 8001a58:	2104      	movs	r1, #4
 8001a5a:	485b      	ldr	r0, [pc, #364]	; (8001bc8 <motors+0x350>)
 8001a5c:	f001 fd50 	bl	8003500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	2108      	movs	r1, #8
 8001a64:	4858      	ldr	r0, [pc, #352]	; (8001bc8 <motors+0x350>)
 8001a66:	f001 fd4b 	bl	8003500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);//right
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2120      	movs	r1, #32
 8001a6e:	4856      	ldr	r0, [pc, #344]	; (8001bc8 <motors+0x350>)
 8001a70:	f001 fd46 	bl	8003500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8001a74:	2201      	movs	r2, #1
 8001a76:	2110      	movs	r1, #16
 8001a78:	4853      	ldr	r0, [pc, #332]	; (8001bc8 <motors+0x350>)
 8001a7a:	f001 fd41 	bl	8003500 <HAL_GPIO_WritePin>
		}
		if(choice=='A' || choice=='S' || choice=='D'){//backward
 8001a7e:	4b4d      	ldr	r3, [pc, #308]	; (8001bb4 <motors+0x33c>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b41      	cmp	r3, #65	; 0x41
 8001a84:	d007      	beq.n	8001a96 <motors+0x21e>
 8001a86:	4b4b      	ldr	r3, [pc, #300]	; (8001bb4 <motors+0x33c>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b53      	cmp	r3, #83	; 0x53
 8001a8c:	d003      	beq.n	8001a96 <motors+0x21e>
 8001a8e:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <motors+0x33c>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b44      	cmp	r3, #68	; 0x44
 8001a94:	d113      	bne.n	8001abe <motors+0x246>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);//left
 8001a96:	2201      	movs	r2, #1
 8001a98:	2104      	movs	r1, #4
 8001a9a:	484b      	ldr	r0, [pc, #300]	; (8001bc8 <motors+0x350>)
 8001a9c:	f001 fd30 	bl	8003500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2108      	movs	r1, #8
 8001aa4:	4848      	ldr	r0, [pc, #288]	; (8001bc8 <motors+0x350>)
 8001aa6:	f001 fd2b 	bl	8003500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);//right
 8001aaa:	2201      	movs	r2, #1
 8001aac:	2120      	movs	r1, #32
 8001aae:	4846      	ldr	r0, [pc, #280]	; (8001bc8 <motors+0x350>)
 8001ab0:	f001 fd26 	bl	8003500 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2110      	movs	r1, #16
 8001ab8:	4843      	ldr	r0, [pc, #268]	; (8001bc8 <motors+0x350>)
 8001aba:	f001 fd21 	bl	8003500 <HAL_GPIO_WritePin>
		}

		if (current=='W'||current=='S'){//stop at correct distance for straight movements only
 8001abe:	7dfb      	ldrb	r3, [r7, #23]
 8001ac0:	2b57      	cmp	r3, #87	; 0x57
 8001ac2:	d002      	beq.n	8001aca <motors+0x252>
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	2b53      	cmp	r3, #83	; 0x53
 8001ac8:	d11d      	bne.n	8001b06 <motors+0x28e>
			if (leftremaining<0 || rightremaining<0){//stop
 8001aca:	4b40      	ldr	r3, [pc, #256]	; (8001bcc <motors+0x354>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	db03      	blt.n	8001ada <motors+0x262>
 8001ad2:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <motors+0x358>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	da15      	bge.n	8001b06 <motors+0x28e>
				pwmValLeft=0;  // set left wheel speed =0
 8001ada:	4b39      	ldr	r3, [pc, #228]	; (8001bc0 <motors+0x348>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	801a      	strh	r2, [r3, #0]
				pwmValRight=0; // set right wheel speed =0
 8001ae0:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <motors+0x34c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	801a      	strh	r2, [r3, #0]
			  	htim1.Instance->CCR4=150; // set servo to be middle
 8001ae6:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <motors+0x344>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2296      	movs	r2, #150	; 0x96
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
				current="X"; // to reset the choice
 8001aee:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <motors+0x35c>)
 8001af0:	75fb      	strb	r3, [r7, #23]

				// transmit back 1 char
				uint8_t ch = 'P';
 8001af2:	2350      	movs	r3, #80	; 0x50
 8001af4:	73fb      	strb	r3, [r7, #15]
				HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 0xFFFF);
 8001af6:	f107 010f 	add.w	r1, r7, #15
 8001afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001afe:	2201      	movs	r2, #1
 8001b00:	4835      	ldr	r0, [pc, #212]	; (8001bd8 <motors+0x360>)
 8001b02:	f004 f9ca 	bl	8005e9a <HAL_UART_Transmit>

			}
		}

		if (current=='M'){//stop at correct distance for straight movements only ( task 2 )
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	2b4d      	cmp	r3, #77	; 0x4d
 8001b0a:	d11b      	bne.n	8001b44 <motors+0x2cc>
			if ( centerIR >1300 ){//stop
 8001b0c:	4b33      	ldr	r3, [pc, #204]	; (8001bdc <motors+0x364>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f240 5214 	movw	r2, #1300	; 0x514
 8001b14:	4293      	cmp	r3, r2
 8001b16:	dd15      	ble.n	8001b44 <motors+0x2cc>
				pwmValLeft=0;  // set left wheel speed =0
 8001b18:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <motors+0x348>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	801a      	strh	r2, [r3, #0]
				pwmValRight=0; // set right wheel speed =0
 8001b1e:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <motors+0x34c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	801a      	strh	r2, [r3, #0]
				htim1.Instance->CCR4=150; // set servo to be middle
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <motors+0x344>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2296      	movs	r2, #150	; 0x96
 8001b2a:	641a      	str	r2, [r3, #64]	; 0x40
				current="X"; // to reset the choice
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <motors+0x35c>)
 8001b2e:	75fb      	strb	r3, [r7, #23]

				// transmit back 1 char
				uint8_t ch = 'M';
 8001b30:	234d      	movs	r3, #77	; 0x4d
 8001b32:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 0xFFFF);
 8001b34:	f107 010e 	add.w	r1, r7, #14
 8001b38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4826      	ldr	r0, [pc, #152]	; (8001bd8 <motors+0x360>)
 8001b40:	f004 f9ab 	bl	8005e9a <HAL_UART_Transmit>
			}

		}

		if (current=='W' || current == 'M'){
 8001b44:	7dfb      	ldrb	r3, [r7, #23]
 8001b46:	2b57      	cmp	r3, #87	; 0x57
 8001b48:	d002      	beq.n	8001b50 <motors+0x2d8>
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	2b4d      	cmp	r3, #77	; 0x4d
 8001b4e:	d118      	bne.n	8001b82 <motors+0x30a>
			//moving forward straighten
			if (ICM_CumuVal>1){
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <motors+0x340>)
 8001b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	dd04      	ble.n	8001b64 <motors+0x2ec>
				htim1.Instance->CCR4=155;
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <motors+0x344>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	229b      	movs	r2, #155	; 0x9b
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
 8001b62:	e00e      	b.n	8001b82 <motors+0x30a>
				// original is 160
			}
			else if (ICM_CumuVal<-1){
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <motors+0x340>)
 8001b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6e:	da04      	bge.n	8001b7a <motors+0x302>
				htim1.Instance->CCR4=145;
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <motors+0x344>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2291      	movs	r2, #145	; 0x91
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
 8001b78:	e003      	b.n	8001b82 <motors+0x30a>
				// original is 140
			}
			else// if (ICM_CumuVal==0){
				htim1.Instance->CCR4=150;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <motors+0x344>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2296      	movs	r2, #150	; 0x96
 8001b80:	641a      	str	r2, [r3, #64]	; 0x40
			//}
		}
		if (current=='S'){
 8001b82:	7dfb      	ldrb	r3, [r7, #23]
 8001b84:	2b53      	cmp	r3, #83	; 0x53
 8001b86:	d12f      	bne.n	8001be8 <motors+0x370>
			//moving backward straighten
			if (ICM_CumuVal>1){
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <motors+0x340>)
 8001b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	dd04      	ble.n	8001b9c <motors+0x324>
				htim1.Instance->CCR4=145;
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <motors+0x344>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2291      	movs	r2, #145	; 0x91
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
 8001b9a:	e025      	b.n	8001be8 <motors+0x370>
			}
			else if (ICM_CumuVal<-1){
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <motors+0x340>)
 8001b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba6:	da1b      	bge.n	8001be0 <motors+0x368>
				htim1.Instance->CCR4=155;
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <motors+0x344>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	229b      	movs	r2, #155	; 0x9b
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
 8001bb0:	e01a      	b.n	8001be8 <motors+0x370>
 8001bb2:	bf00      	nop
 8001bb4:	200002d4 	.word	0x200002d4
 8001bb8:	200002a4 	.word	0x200002a4
 8001bbc:	2000012c 	.word	0x2000012c
 8001bc0:	200002d8 	.word	0x200002d8
 8001bc4:	200002da 	.word	0x200002da
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	200002dc 	.word	0x200002dc
 8001bd0:	200002e0 	.word	0x200002e0
 8001bd4:	0800bc44 	.word	0x0800bc44
 8001bd8:	2000024c 	.word	0x2000024c
 8001bdc:	200002e8 	.word	0x200002e8
			}
			else// if (ICM_CumuVal==0){
				htim1.Instance->CCR4=150;
 8001be0:	4b48      	ldr	r3, [pc, #288]	; (8001d04 <motors+0x48c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2296      	movs	r2, #150	; 0x96
 8001be6:	641a      	str	r2, [r3, #64]	; 0x40
			//}
		}
		if (current=='E'||current=='A'){//stop after rotating right
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	2b45      	cmp	r3, #69	; 0x45
 8001bec:	d002      	beq.n	8001bf4 <motors+0x37c>
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	2b41      	cmp	r3, #65	; 0x41
 8001bf2:	d12a      	bne.n	8001c4a <motors+0x3d2>
			if (ICM_CumuVal+(value*860/90)<0){//CUMUVAL will be negative
 8001bf4:	4b44      	ldr	r3, [pc, #272]	; (8001d08 <motors+0x490>)
 8001bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <motors+0x494>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	f44f 7357 	mov.w	r3, #860	; 0x35c
 8001c06:	fb02 f303 	mul.w	r3, r2, r3
 8001c0a:	4a41      	ldr	r2, [pc, #260]	; (8001d10 <motors+0x498>)
 8001c0c:	fb82 0203 	smull	r0, r2, r2, r3
 8001c10:	441a      	add	r2, r3
 8001c12:	1192      	asrs	r2, r2, #6
 8001c14:	17db      	asrs	r3, r3, #31
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	440b      	add	r3, r1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da15      	bge.n	8001c4a <motors+0x3d2>
				pwmValLeft=0;
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <motors+0x49c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	801a      	strh	r2, [r3, #0]
				pwmValRight=0;
 8001c24:	4b3c      	ldr	r3, [pc, #240]	; (8001d18 <motors+0x4a0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	801a      	strh	r2, [r3, #0]
				htim1.Instance->CCR4=150;
 8001c2a:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <motors+0x48c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2296      	movs	r2, #150	; 0x96
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
				current="X";
 8001c32:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <motors+0x4a4>)
 8001c34:	75fb      	strb	r3, [r7, #23]

				// transmit back 1 char
				uint8_t ch = 'P';
 8001c36:	2350      	movs	r3, #80	; 0x50
 8001c38:	737b      	strb	r3, [r7, #13]
				HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 0xFFFF);
 8001c3a:	f107 010d 	add.w	r1, r7, #13
 8001c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c42:	2201      	movs	r2, #1
 8001c44:	4836      	ldr	r0, [pc, #216]	; (8001d20 <motors+0x4a8>)
 8001c46:	f004 f928 	bl	8005e9a <HAL_UART_Transmit>

			}
		}
		if (current=='Q'||current=='D'){//stop after rotating LEFT
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	2b51      	cmp	r3, #81	; 0x51
 8001c4e:	d002      	beq.n	8001c56 <motors+0x3de>
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b44      	cmp	r3, #68	; 0x44
 8001c54:	d12a      	bne.n	8001cac <motors+0x434>
			if (ICM_CumuVal-(value*860/90)>0){//CUMUVAL will be positive
 8001c56:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <motors+0x490>)
 8001c58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <motors+0x494>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	f44f 7357 	mov.w	r3, #860	; 0x35c
 8001c68:	fb02 f303 	mul.w	r3, r2, r3
 8001c6c:	4a28      	ldr	r2, [pc, #160]	; (8001d10 <motors+0x498>)
 8001c6e:	fb82 0203 	smull	r0, r2, r2, r3
 8001c72:	441a      	add	r2, r3
 8001c74:	1192      	asrs	r2, r2, #6
 8001c76:	17db      	asrs	r3, r3, #31
 8001c78:	1a9b      	subs	r3, r3, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	dd15      	ble.n	8001cac <motors+0x434>
				pwmValLeft=0;
 8001c80:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <motors+0x49c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	801a      	strh	r2, [r3, #0]
				pwmValRight=0;
 8001c86:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <motors+0x4a0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	801a      	strh	r2, [r3, #0]
				htim1.Instance->CCR4=150;
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <motors+0x48c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2296      	movs	r2, #150	; 0x96
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
				current="X";
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <motors+0x4a4>)
 8001c96:	75fb      	strb	r3, [r7, #23]
				// transmit back 1 char
				uint8_t ch = 'P';
 8001c98:	2350      	movs	r3, #80	; 0x50
 8001c9a:	733b      	strb	r3, [r7, #12]
				HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 0xFFFF);
 8001c9c:	f107 010c 	add.w	r1, r7, #12
 8001ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	481e      	ldr	r0, [pc, #120]	; (8001d20 <motors+0x4a8>)
 8001ca8:	f004 f8f7 	bl	8005e9a <HAL_UART_Transmit>

			}
		}
		if (choice=='P'){//stop immediately
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <motors+0x4ac>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b50      	cmp	r3, #80	; 0x50
 8001cb2:	d115      	bne.n	8001ce0 <motors+0x468>
			pwmValLeft=0;
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <motors+0x49c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	801a      	strh	r2, [r3, #0]
			pwmValRight=0;
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <motors+0x4a0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	801a      	strh	r2, [r3, #0]
			htim1.Instance->CCR4=150;
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <motors+0x48c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2296      	movs	r2, #150	; 0x96
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40
			current="X";
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <motors+0x4a4>)
 8001cca:	75fb      	strb	r3, [r7, #23]
			// transmit back 1 char
			uint8_t ch = 'P';
 8001ccc:	2350      	movs	r3, #80	; 0x50
 8001cce:	72fb      	strb	r3, [r7, #11]
			HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 0xFFFF);
 8001cd0:	f107 010b 	add.w	r1, r7, #11
 8001cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4811      	ldr	r0, [pc, #68]	; (8001d20 <motors+0x4a8>)
 8001cdc:	f004 f8dd 	bl	8005e9a <HAL_UART_Transmit>

		}
		choice='X';//clear choice
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <motors+0x4ac>)
 8001ce2:	2258      	movs	r2, #88	; 0x58
 8001ce4:	701a      	strb	r2, [r3, #0]

		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmValLeft);//modify comparison value for duty cycle
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <motors+0x49c>)
 8001ce8:	881a      	ldrh	r2, [r3, #0]
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <motors+0x4b0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmValRight);
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <motors+0x4a0>)
 8001cf2:	881a      	ldrh	r2, [r3, #0]
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <motors+0x4b0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	639a      	str	r2, [r3, #56]	; 0x38
    osDelay(1);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f005 fa08 	bl	8007110 <osDelay>
		if(choice=='T'){ //test toggle led if uart working
 8001d00:	e5ce      	b.n	80018a0 <motors+0x28>
 8001d02:	bf00      	nop
 8001d04:	2000012c 	.word	0x2000012c
 8001d08:	200002a4 	.word	0x200002a4
 8001d0c:	200002d6 	.word	0x200002d6
 8001d10:	b60b60b7 	.word	0xb60b60b7
 8001d14:	200002d8 	.word	0x200002d8
 8001d18:	200002da 	.word	0x200002da
 8001d1c:	0800bc44 	.word	0x0800bc44
 8001d20:	2000024c 	.word	0x2000024c
 8001d24:	200002d4 	.word	0x200002d4
 8001d28:	20000204 	.word	0x20000204

08001d2c <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b092      	sub	sp, #72	; 0x48
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_task */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001d34:	213c      	movs	r1, #60	; 0x3c
 8001d36:	4876      	ldr	r0, [pc, #472]	; (8001f10 <encoder_task+0x1e4>)
 8001d38:	f003 fa6c 	bl	8005214 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //newcode
 8001d3c:	213c      	movs	r1, #60	; 0x3c
 8001d3e:	4875      	ldr	r0, [pc, #468]	; (8001f14 <encoder_task+0x1e8>)
 8001d40:	f003 fa68 	bl	8005214 <HAL_TIM_Encoder_Start>

	// left wheel

	uint32_t tick;
	cnt1=__HAL_TIM_GET_COUNTER(&htim2);
 8001d44:	4b72      	ldr	r3, [pc, #456]	; (8001f10 <encoder_task+0x1e4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b72      	ldr	r3, [pc, #456]	; (8001f18 <encoder_task+0x1ec>)
 8001d4e:	601a      	str	r2, [r3, #0]
	tick=HAL_GetTick();
 8001d50:	f000 fc66 	bl	8002620 <HAL_GetTick>
 8001d54:	6478      	str	r0, [r7, #68]	; 0x44
	uint8_t hello[40];
	uint16_t dir;

	//for right wheel
	uint32_t tickr;
	cntr1=__HAL_TIM_GET_COUNTER(&htim3);
 8001d56:	4b6f      	ldr	r3, [pc, #444]	; (8001f14 <encoder_task+0x1e8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b6f      	ldr	r3, [pc, #444]	; (8001f1c <encoder_task+0x1f0>)
 8001d60:	601a      	str	r2, [r3, #0]
	uint8_t bye[20];
	uint16_t dirr;

  for(;;)
  {
	  if(HAL_GetTick()-tick > 100L){//every 1000 ticks, L means long int
 8001d62:	f000 fc5d 	bl	8002620 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b64      	cmp	r3, #100	; 0x64
 8001d6e:	d9f8      	bls.n	8001d62 <encoder_task+0x36>
		  cnt2=__HAL_TIM_GET_COUNTER(&htim2);
 8001d70:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <encoder_task+0x1e4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b69      	ldr	r3, [pc, #420]	; (8001f20 <encoder_task+0x1f4>)
 8001d7a:	601a      	str	r2, [r3, #0]
		  cntr2=__HAL_TIM_GET_COUNTER(&htim3);//right wheel
 8001d7c:	4b65      	ldr	r3, [pc, #404]	; (8001f14 <encoder_task+0x1e8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b67      	ldr	r3, [pc, #412]	; (8001f24 <encoder_task+0x1f8>)
 8001d86:	601a      	str	r2, [r3, #0]
		  sprintf(hello,"%5d %5d\0",leftremaining,rightremaining);
 8001d88:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <encoder_task+0x1fc>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b67      	ldr	r3, [pc, #412]	; (8001f2c <encoder_task+0x200>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f107 001c 	add.w	r0, r7, #28
 8001d94:	4966      	ldr	r1, [pc, #408]	; (8001f30 <encoder_task+0x204>)
 8001d96:	f008 fba5 	bl	800a4e4 <siprintf>
		  OLED_ShowString(10,40,hello);
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	461a      	mov	r2, r3
 8001da0:	2128      	movs	r1, #40	; 0x28
 8001da2:	200a      	movs	r0, #10
 8001da4:	f008 faa0 	bl	800a2e8 <OLED_ShowString>
		  if (cnt1==cnt2){ //left wheel not moving
 8001da8:	4b5b      	ldr	r3, [pc, #364]	; (8001f18 <encoder_task+0x1ec>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b5c      	ldr	r3, [pc, #368]	; (8001f20 <encoder_task+0x1f4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d106      	bne.n	8001dc2 <encoder_task+0x96>
			  diff=0;
 8001db4:	4b5f      	ldr	r3, [pc, #380]	; (8001f34 <encoder_task+0x208>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
			  diffr=0;
 8001dba:	4b5f      	ldr	r3, [pc, #380]	; (8001f38 <encoder_task+0x20c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e067      	b.n	8001e92 <encoder_task+0x166>
		  }
		  else if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){ //overflow and underflow by dr loke
 8001dc2:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <encoder_task+0x1e4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	d130      	bne.n	8001e32 <encoder_task+0x106>
			  if(cnt2<cnt1)
 8001dd0:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <encoder_task+0x1f4>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b50      	ldr	r3, [pc, #320]	; (8001f18 <encoder_task+0x1ec>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	da07      	bge.n	8001dec <encoder_task+0xc0>
				  diff=cnt1-cnt2;
 8001ddc:	4b4e      	ldr	r3, [pc, #312]	; (8001f18 <encoder_task+0x1ec>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b4f      	ldr	r3, [pc, #316]	; (8001f20 <encoder_task+0x1f4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	4a53      	ldr	r2, [pc, #332]	; (8001f34 <encoder_task+0x208>)
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	e009      	b.n	8001e00 <encoder_task+0xd4>
			  else
				  diff=(65535-cnt2)+cnt1;
 8001dec:	4b4c      	ldr	r3, [pc, #304]	; (8001f20 <encoder_task+0x1f4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001df4:	33ff      	adds	r3, #255	; 0xff
 8001df6:	4a48      	ldr	r2, [pc, #288]	; (8001f18 <encoder_task+0x1ec>)
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a4d      	ldr	r2, [pc, #308]	; (8001f34 <encoder_task+0x208>)
 8001dfe:	6013      	str	r3, [r2, #0]
			  if(cntr2>cntr1)
 8001e00:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <encoder_task+0x1f8>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b45      	ldr	r3, [pc, #276]	; (8001f1c <encoder_task+0x1f0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dd07      	ble.n	8001e1c <encoder_task+0xf0>
				  diffr=cntr2-cntr1;
 8001e0c:	4b45      	ldr	r3, [pc, #276]	; (8001f24 <encoder_task+0x1f8>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b42      	ldr	r3, [pc, #264]	; (8001f1c <encoder_task+0x1f0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	4a48      	ldr	r2, [pc, #288]	; (8001f38 <encoder_task+0x20c>)
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e03a      	b.n	8001e92 <encoder_task+0x166>
			  else
				  diffr=(65535-cntr1)+cntr2;
 8001e1c:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <encoder_task+0x1f0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001e24:	33ff      	adds	r3, #255	; 0xff
 8001e26:	4a3f      	ldr	r2, [pc, #252]	; (8001f24 <encoder_task+0x1f8>)
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a42      	ldr	r2, [pc, #264]	; (8001f38 <encoder_task+0x20c>)
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e02f      	b.n	8001e92 <encoder_task+0x166>
		  }
		  else{
			  if(cnt2>cnt1)
 8001e32:	4b3b      	ldr	r3, [pc, #236]	; (8001f20 <encoder_task+0x1f4>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <encoder_task+0x1ec>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	dd07      	ble.n	8001e4e <encoder_task+0x122>
				  diff=cnt2-cnt1;
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <encoder_task+0x1f4>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <encoder_task+0x1ec>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	4a3a      	ldr	r2, [pc, #232]	; (8001f34 <encoder_task+0x208>)
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e009      	b.n	8001e62 <encoder_task+0x136>
			  else
				  diff=(65535-cnt1)+cnt2;
 8001e4e:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <encoder_task+0x1ec>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001e56:	33ff      	adds	r3, #255	; 0xff
 8001e58:	4a31      	ldr	r2, [pc, #196]	; (8001f20 <encoder_task+0x1f4>)
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4a35      	ldr	r2, [pc, #212]	; (8001f34 <encoder_task+0x208>)
 8001e60:	6013      	str	r3, [r2, #0]

			  if(cntr2<cntr1)
 8001e62:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <encoder_task+0x1f8>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <encoder_task+0x1f0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	da07      	bge.n	8001e7e <encoder_task+0x152>
				  diffr=cntr1-cntr2;
 8001e6e:	4b2b      	ldr	r3, [pc, #172]	; (8001f1c <encoder_task+0x1f0>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <encoder_task+0x1f8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	4a2f      	ldr	r2, [pc, #188]	; (8001f38 <encoder_task+0x20c>)
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	e009      	b.n	8001e92 <encoder_task+0x166>
			  else
				  diffr=(65535-cntr2)+cntr1;
 8001e7e:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <encoder_task+0x1f8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001e86:	33ff      	adds	r3, #255	; 0xff
 8001e88:	4a24      	ldr	r2, [pc, #144]	; (8001f1c <encoder_task+0x1f0>)
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a2a      	ldr	r2, [pc, #168]	; (8001f38 <encoder_task+0x20c>)
 8001e90:	6013      	str	r3, [r2, #0]
		  }

		  //sprintf(hello,"LeftSpd:%5d\0",diff);
		  //OLED_ShowString(10,20,hello);
		  sprintf(bye,"RightSpd:%5d\0",diffr);
 8001e92:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <encoder_task+0x20c>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	f107 0308 	add.w	r3, r7, #8
 8001e9a:	4928      	ldr	r1, [pc, #160]	; (8001f3c <encoder_task+0x210>)
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f008 fb21 	bl	800a4e4 <siprintf>
		  OLED_ShowString(10,30,bye);
 8001ea2:	f107 0308 	add.w	r3, r7, #8
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	211e      	movs	r1, #30
 8001eaa:	200a      	movs	r0, #10
 8001eac:	f008 fa1c 	bl	800a2e8 <OLED_ShowString>
		  sprintf(hello,"uart:%c %3d\0",choice,value);
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <encoder_task+0x214>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <encoder_task+0x218>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	f107 001c 	add.w	r0, r7, #28
 8001ebe:	4922      	ldr	r1, [pc, #136]	; (8001f48 <encoder_task+0x21c>)
 8001ec0:	f008 fb10 	bl	800a4e4 <siprintf>
		  OLED_ShowString(10,10,hello);
 8001ec4:	f107 031c 	add.w	r3, r7, #28
 8001ec8:	461a      	mov	r2, r3
 8001eca:	210a      	movs	r1, #10
 8001ecc:	200a      	movs	r0, #10
 8001ece:	f008 fa0b 	bl	800a2e8 <OLED_ShowString>

		  cnt1=__HAL_TIM_GET_COUNTER(&htim2);
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <encoder_task+0x1e4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <encoder_task+0x1ec>)
 8001edc:	601a      	str	r2, [r3, #0]
		  cntr1=__HAL_TIM_GET_COUNTER(&htim3);
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <encoder_task+0x1e8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <encoder_task+0x1f0>)
 8001ee8:	601a      	str	r2, [r3, #0]
		  tick=HAL_GetTick();
 8001eea:	f000 fb99 	bl	8002620 <HAL_GetTick>
 8001eee:	6478      	str	r0, [r7, #68]	; 0x44

		  //decrease remaining wheel turns
		  leftremaining=leftremaining-diff;
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <encoder_task+0x1fc>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <encoder_task+0x208>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <encoder_task+0x1fc>)
 8001efc:	6013      	str	r3, [r2, #0]
		  rightremaining=rightremaining-diffr;
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <encoder_task+0x200>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <encoder_task+0x20c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	4a08      	ldr	r2, [pc, #32]	; (8001f2c <encoder_task+0x200>)
 8001f0a:	6013      	str	r3, [r2, #0]
	  if(HAL_GetTick()-tick > 100L){//every 1000 ticks, L means long int
 8001f0c:	e729      	b.n	8001d62 <encoder_task+0x36>
 8001f0e:	bf00      	nop
 8001f10:	20000174 	.word	0x20000174
 8001f14:	200001bc 	.word	0x200001bc
 8001f18:	200002b4 	.word	0x200002b4
 8001f1c:	200002a8 	.word	0x200002a8
 8001f20:	200002b8 	.word	0x200002b8
 8001f24:	200002ac 	.word	0x200002ac
 8001f28:	200002dc 	.word	0x200002dc
 8001f2c:	200002e0 	.word	0x200002e0
 8001f30:	0800bc48 	.word	0x0800bc48
 8001f34:	200002bc 	.word	0x200002bc
 8001f38:	200002b0 	.word	0x200002b0
 8001f3c:	0800bc54 	.word	0x0800bc54
 8001f40:	200002d4 	.word	0x200002d4
 8001f44:	200002d6 	.word	0x200002d6
 8001f48:	0800bc64 	.word	0x0800bc64

08001f4c <IR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IR */
void IR(void *argument)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IR */
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc1);
 8001f54:	480b      	ldr	r0, [pc, #44]	; (8001f84 <IR+0x38>)
 8001f56:	f000 fbd7 	bl	8002708 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8001f5a:	210a      	movs	r1, #10
 8001f5c:	4809      	ldr	r0, [pc, #36]	; (8001f84 <IR+0x38>)
 8001f5e:	f000 fcd8 	bl	8002912 <HAL_ADC_PollForConversion>
	frontIR_ADC = HAL_ADC_GetValue(&hadc1);
 8001f62:	4808      	ldr	r0, [pc, #32]	; (8001f84 <IR+0x38>)
 8001f64:	f000 fd60 	bl	8002a28 <HAL_ADC_GetValue>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <IR+0x3c>)
 8001f6e:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <IR+0x38>)
 8001f72:	f000 fc9b 	bl	80028ac <HAL_ADC_Stop>

	SensorRead_ISR();
 8001f76:	f7ff fc09 	bl	800178c <SensorRead_ISR>

    osDelay(1);
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f005 f8c8 	bl	8007110 <osDelay>
	HAL_ADC_Start(&hadc1);
 8001f80:	e7e8      	b.n	8001f54 <IR+0x8>
 8001f82:	bf00      	nop
 8001f84:	20000090 	.word	0x20000090
 8001f88:	200002e4 	.word	0x200002e4

08001f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  /* USER CODE END Error_Handler_Debug */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_MspInit+0x54>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	4a11      	ldr	r2, [pc, #68]	; (8001ff4 <HAL_MspInit+0x54>)
 8001fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_MspInit+0x54>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_MspInit+0x54>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <HAL_MspInit+0x54>)
 8001fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <HAL_MspInit+0x54>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	210f      	movs	r1, #15
 8001fe2:	f06f 0001 	mvn.w	r0, #1
 8001fe6:	f001 f826 	bl	8003036 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800

08001ff8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a17      	ldr	r2, [pc, #92]	; (8002074 <HAL_ADC_MspInit+0x7c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d127      	bne.n	800206a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	4b16      	ldr	r3, [pc, #88]	; (8002078 <HAL_ADC_MspInit+0x80>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a15      	ldr	r2, [pc, #84]	; (8002078 <HAL_ADC_MspInit+0x80>)
 8002024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_ADC_MspInit+0x80>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_ADC_MspInit+0x80>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <HAL_ADC_MspInit+0x80>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_ADC_MspInit+0x80>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_Pin;
 8002052:	2301      	movs	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002056:	2303      	movs	r3, #3
 8002058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	; (800207c <HAL_ADC_MspInit+0x84>)
 8002066:	f001 f8af 	bl	80031c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40012000 	.word	0x40012000
 8002078:	40023800 	.word	0x40023800
 800207c:	40020800 	.word	0x40020800

08002080 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a19      	ldr	r2, [pc, #100]	; (8002104 <HAL_I2C_MspInit+0x84>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d12c      	bne.n	80020fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_I2C_MspInit+0x88>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_I2C_MspInit+0x88>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_I2C_MspInit+0x88>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c4:	2312      	movs	r3, #18
 80020c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020d0:	2304      	movs	r3, #4
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4619      	mov	r1, r3
 80020da:	480c      	ldr	r0, [pc, #48]	; (800210c <HAL_I2C_MspInit+0x8c>)
 80020dc:	f001 f874 	bl	80031c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_I2C_MspInit+0x88>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	4a07      	ldr	r2, [pc, #28]	; (8002108 <HAL_I2C_MspInit+0x88>)
 80020ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ee:	6413      	str	r3, [r2, #64]	; 0x40
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_I2C_MspInit+0x88>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020fc:	bf00      	nop
 80020fe:	3728      	adds	r7, #40	; 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40005400 	.word	0x40005400
 8002108:	40023800 	.word	0x40023800
 800210c:	40020400 	.word	0x40020400

08002110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a23      	ldr	r2, [pc, #140]	; (80021bc <HAL_TIM_Base_MspInit+0xac>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d10e      	bne.n	8002150 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_TIM_Base_MspInit+0xb0>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a21      	ldr	r2, [pc, #132]	; (80021c0 <HAL_TIM_Base_MspInit+0xb0>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <HAL_TIM_Base_MspInit+0xb0>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800214e:	e030      	b.n	80021b2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1b      	ldr	r2, [pc, #108]	; (80021c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d12b      	bne.n	80021b2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_TIM_Base_MspInit+0xb0>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <HAL_TIM_Base_MspInit+0xb0>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	6453      	str	r3, [r2, #68]	; 0x44
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_TIM_Base_MspInit+0xb0>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_TIM_Base_MspInit+0xb0>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <HAL_TIM_Base_MspInit+0xb0>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_TIM_Base_MspInit+0xb0>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002192:	23c0      	movs	r3, #192	; 0xc0
 8002194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021a2:	2303      	movs	r3, #3
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	4806      	ldr	r0, [pc, #24]	; (80021c8 <HAL_TIM_Base_MspInit+0xb8>)
 80021ae:	f001 f80b 	bl	80031c8 <HAL_GPIO_Init>
}
 80021b2:	bf00      	nop
 80021b4:	3728      	adds	r7, #40	; 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40010000 	.word	0x40010000
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40010400 	.word	0x40010400
 80021c8:	40020800 	.word	0x40020800

080021cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08c      	sub	sp, #48	; 0x30
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 031c 	add.w	r3, r7, #28
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ec:	d14b      	bne.n	8002286 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x124>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a3e      	ldr	r2, [pc, #248]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x124>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b3c      	ldr	r3, [pc, #240]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	4b38      	ldr	r3, [pc, #224]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a37      	ldr	r2, [pc, #220]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x124>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	4b31      	ldr	r3, [pc, #196]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x124>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a30      	ldr	r2, [pc, #192]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002254:	2301      	movs	r3, #1
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 031c 	add.w	r3, r7, #28
 800225c:	4619      	mov	r1, r3
 800225e:	4825      	ldr	r0, [pc, #148]	; (80022f4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002260:	f000 ffb2 	bl	80031c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002264:	2308      	movs	r3, #8
 8002266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002274:	2301      	movs	r3, #1
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	4619      	mov	r1, r3
 800227e:	481e      	ldr	r0, [pc, #120]	; (80022f8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002280:	f000 ffa2 	bl	80031c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002284:	e030      	b.n	80022e8 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1c      	ldr	r2, [pc, #112]	; (80022fc <HAL_TIM_Encoder_MspInit+0x130>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d12b      	bne.n	80022e8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x124>)
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	6413      	str	r3, [r2, #64]	; 0x40
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x124>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x124>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x124>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6313      	str	r3, [r2, #48]	; 0x30
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x124>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022c8:	23c0      	movs	r3, #192	; 0xc0
 80022ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022d8:	2302      	movs	r3, #2
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	4619      	mov	r1, r3
 80022e2:	4804      	ldr	r0, [pc, #16]	; (80022f4 <HAL_TIM_Encoder_MspInit+0x128>)
 80022e4:	f000 ff70 	bl	80031c8 <HAL_GPIO_Init>
}
 80022e8:	bf00      	nop
 80022ea:	3730      	adds	r7, #48	; 0x30
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020000 	.word	0x40020000
 80022f8:	40020400 	.word	0x40020400
 80022fc:	40000400 	.word	0x40000400

08002300 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a12      	ldr	r2, [pc, #72]	; (8002368 <HAL_TIM_MspPostInit+0x68>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d11e      	bne.n	8002360 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_TIM_MspPostInit+0x6c>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a10      	ldr	r2, [pc, #64]	; (800236c <HAL_TIM_MspPostInit+0x6c>)
 800232c:	f043 0310 	orr.w	r3, r3, #16
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <HAL_TIM_MspPostInit+0x6c>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 800233e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002342:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002350:	2301      	movs	r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	4619      	mov	r1, r3
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <HAL_TIM_MspPostInit+0x70>)
 800235c:	f000 ff34 	bl	80031c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002360:	bf00      	nop
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40010000 	.word	0x40010000
 800236c:	40023800 	.word	0x40023800
 8002370:	40021000 	.word	0x40021000

08002374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <HAL_UART_MspInit+0x94>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d134      	bne.n	8002400 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_UART_MspInit+0x98>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a1b      	ldr	r2, [pc, #108]	; (800240c <HAL_UART_MspInit+0x98>)
 80023a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_UART_MspInit+0x98>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_UART_MspInit+0x98>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a14      	ldr	r2, [pc, #80]	; (800240c <HAL_UART_MspInit+0x98>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_UART_MspInit+0x98>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d4:	2302      	movs	r3, #2
 80023d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023dc:	2303      	movs	r3, #3
 80023de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023e0:	2307      	movs	r3, #7
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	4809      	ldr	r0, [pc, #36]	; (8002410 <HAL_UART_MspInit+0x9c>)
 80023ec:	f000 feec 	bl	80031c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80023f0:	2200      	movs	r2, #0
 80023f2:	2105      	movs	r1, #5
 80023f4:	2027      	movs	r0, #39	; 0x27
 80023f6:	f000 fe1e 	bl	8003036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023fa:	2027      	movs	r0, #39	; 0x27
 80023fc:	f000 fe37 	bl	800306e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002400:	bf00      	nop
 8002402:	3728      	adds	r7, #40	; 0x28
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40004800 	.word	0x40004800
 800240c:	40023800 	.word	0x40023800
 8002410:	40020800 	.word	0x40020800

08002414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002418:	e7fe      	b.n	8002418 <NMI_Handler+0x4>

0800241a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800241e:	e7fe      	b.n	800241e <HardFault_Handler+0x4>

08002420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <MemManage_Handler+0x4>

08002426 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800242a:	e7fe      	b.n	800242a <BusFault_Handler+0x4>

0800242c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <UsageFault_Handler+0x4>

08002432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002444:	f000 f8d8 	bl	80025f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002448:	f006 fa70 	bl	800892c <xTaskGetSchedulerState>
 800244c:	4603      	mov	r3, r0
 800244e:	2b01      	cmp	r3, #1
 8002450:	d001      	beq.n	8002456 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002452:	f007 f859 	bl	8009508 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <USART3_IRQHandler+0x10>)
 8002462:	f003 fddd 	bl	8006020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000024c 	.word	0x2000024c

08002470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002478:	4a14      	ldr	r2, [pc, #80]	; (80024cc <_sbrk+0x5c>)
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <_sbrk+0x60>)
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002484:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <_sbrk+0x64>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <_sbrk+0x64>)
 800248e:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <_sbrk+0x68>)
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002492:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <_sbrk+0x64>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	429a      	cmp	r2, r3
 800249e:	d207      	bcs.n	80024b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024a0:	f007 ffe0 	bl	800a464 <__errno>
 80024a4:	4603      	mov	r3, r0
 80024a6:	220c      	movs	r2, #12
 80024a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295
 80024ae:	e009      	b.n	80024c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <_sbrk+0x64>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024b6:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <_sbrk+0x64>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <_sbrk+0x64>)
 80024c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024c2:	68fb      	ldr	r3, [r7, #12]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20020000 	.word	0x20020000
 80024d0:	00000400 	.word	0x00000400
 80024d4:	200002ec 	.word	0x200002ec
 80024d8:	20006060 	.word	0x20006060

080024dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <SystemInit+0x20>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <SystemInit+0x20>)
 80024e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <Reset_Handler>:
 8002500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002538 <LoopFillZerobss+0x12>
 8002504:	480d      	ldr	r0, [pc, #52]	; (800253c <LoopFillZerobss+0x16>)
 8002506:	490e      	ldr	r1, [pc, #56]	; (8002540 <LoopFillZerobss+0x1a>)
 8002508:	4a0e      	ldr	r2, [pc, #56]	; (8002544 <LoopFillZerobss+0x1e>)
 800250a:	2300      	movs	r3, #0
 800250c:	e002      	b.n	8002514 <LoopCopyDataInit>

0800250e <CopyDataInit>:
 800250e:	58d4      	ldr	r4, [r2, r3]
 8002510:	50c4      	str	r4, [r0, r3]
 8002512:	3304      	adds	r3, #4

08002514 <LoopCopyDataInit>:
 8002514:	18c4      	adds	r4, r0, r3
 8002516:	428c      	cmp	r4, r1
 8002518:	d3f9      	bcc.n	800250e <CopyDataInit>
 800251a:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <LoopFillZerobss+0x22>)
 800251c:	4c0b      	ldr	r4, [pc, #44]	; (800254c <LoopFillZerobss+0x26>)
 800251e:	2300      	movs	r3, #0
 8002520:	e001      	b.n	8002526 <LoopFillZerobss>

08002522 <FillZerobss>:
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	3204      	adds	r2, #4

08002526 <LoopFillZerobss>:
 8002526:	42a2      	cmp	r2, r4
 8002528:	d3fb      	bcc.n	8002522 <FillZerobss>
 800252a:	f7ff ffd7 	bl	80024dc <SystemInit>
 800252e:	f007 ff9f 	bl	800a470 <__libc_init_array>
 8002532:	f7fe fcd3 	bl	8000edc <main>
 8002536:	4770      	bx	lr
 8002538:	20020000 	.word	0x20020000
 800253c:	20000000 	.word	0x20000000
 8002540:	20000074 	.word	0x20000074
 8002544:	0800c830 	.word	0x0800c830
 8002548:	20000074 	.word	0x20000074
 800254c:	20006060 	.word	0x20006060

08002550 <ADC_IRQHandler>:
 8002550:	e7fe      	b.n	8002550 <ADC_IRQHandler>
	...

08002554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <HAL_Init+0x40>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <HAL_Init+0x40>)
 800255e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_Init+0x40>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <HAL_Init+0x40>)
 800256a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800256e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_Init+0x40>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a07      	ldr	r2, [pc, #28]	; (8002594 <HAL_Init+0x40>)
 8002576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800257c:	2003      	movs	r0, #3
 800257e:	f000 fd4f 	bl	8003020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002582:	200f      	movs	r0, #15
 8002584:	f000 f808 	bl	8002598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002588:	f7ff fd0a 	bl	8001fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00

08002598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_InitTick+0x54>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_InitTick+0x58>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fd67 	bl	800308a <HAL_SYSTICK_Config>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00e      	b.n	80025e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b0f      	cmp	r3, #15
 80025ca:	d80a      	bhi.n	80025e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025cc:	2200      	movs	r2, #0
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f000 fd2f 	bl	8003036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d8:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <HAL_InitTick+0x5c>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e000      	b.n	80025e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000000 	.word	0x20000000
 80025f0:	20000008 	.word	0x20000008
 80025f4:	20000004 	.word	0x20000004

080025f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_IncTick+0x20>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_IncTick+0x24>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	; (800261c <HAL_IncTick+0x24>)
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000008 	.word	0x20000008
 800261c:	200002f0 	.word	0x200002f0

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_GetTick+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	200002f0 	.word	0x200002f0

08002638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002640:	f7ff ffee 	bl	8002620 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d005      	beq.n	800265e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_Delay+0x44>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800265e:	bf00      	nop
 8002660:	f7ff ffde 	bl	8002620 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	429a      	cmp	r2, r3
 800266e:	d8f7      	bhi.n	8002660 <HAL_Delay+0x28>
  {
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000008 	.word	0x20000008

08002680 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e033      	b.n	80026fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fcaa 	bl	8001ff8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026c6:	f023 0302 	bic.w	r3, r3, #2
 80026ca:	f043 0202 	orr.w	r2, r3, #2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fad8 	bl	8002c88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
 80026ee:	e001      	b.n	80026f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_ADC_Start+0x1a>
 800271e:	2302      	movs	r3, #2
 8002720:	e0b2      	b.n	8002888 <HAL_ADC_Start+0x180>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d018      	beq.n	800276a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002748:	4b52      	ldr	r3, [pc, #328]	; (8002894 <HAL_ADC_Start+0x18c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a52      	ldr	r2, [pc, #328]	; (8002898 <HAL_ADC_Start+0x190>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0c9a      	lsrs	r2, r3, #18
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800275c:	e002      	b.n	8002764 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	3b01      	subs	r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f9      	bne.n	800275e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d17a      	bne.n	800286e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b6:	d106      	bne.n	80027c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f023 0206 	bic.w	r2, r3, #6
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	645a      	str	r2, [r3, #68]	; 0x44
 80027c4:	e002      	b.n	80027cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027d4:	4b31      	ldr	r3, [pc, #196]	; (800289c <HAL_ADC_Start+0x194>)
 80027d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027e0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d12a      	bne.n	8002844 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a2b      	ldr	r2, [pc, #172]	; (80028a0 <HAL_ADC_Start+0x198>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d015      	beq.n	8002824 <HAL_ADC_Start+0x11c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a29      	ldr	r2, [pc, #164]	; (80028a4 <HAL_ADC_Start+0x19c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d105      	bne.n	800280e <HAL_ADC_Start+0x106>
 8002802:	4b26      	ldr	r3, [pc, #152]	; (800289c <HAL_ADC_Start+0x194>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a25      	ldr	r2, [pc, #148]	; (80028a8 <HAL_ADC_Start+0x1a0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d136      	bne.n	8002886 <HAL_ADC_Start+0x17e>
 8002818:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_ADC_Start+0x194>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	d130      	bne.n	8002886 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d129      	bne.n	8002886 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	e020      	b.n	8002886 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a15      	ldr	r2, [pc, #84]	; (80028a0 <HAL_ADC_Start+0x198>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d11b      	bne.n	8002886 <HAL_ADC_Start+0x17e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d114      	bne.n	8002886 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	e00b      	b.n	8002886 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f043 0210 	orr.w	r2, r3, #16
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f043 0201 	orr.w	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	20000000 	.word	0x20000000
 8002898:	431bde83 	.word	0x431bde83
 800289c:	40012300 	.word	0x40012300
 80028a0:	40012000 	.word	0x40012000
 80028a4:	40012100 	.word	0x40012100
 80028a8:	40012200 	.word	0x40012200

080028ac <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_Stop+0x16>
 80028be:	2302      	movs	r3, #2
 80028c0:	e021      	b.n	8002906 <HAL_ADC_Stop+0x5a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292e:	d113      	bne.n	8002958 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800293a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800293e:	d10b      	bne.n	8002958 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f043 0220 	orr.w	r2, r3, #32
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e063      	b.n	8002a20 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002958:	f7ff fe62 	bl	8002620 <HAL_GetTick>
 800295c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800295e:	e021      	b.n	80029a4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	d01d      	beq.n	80029a4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_ADC_PollForConversion+0x6c>
 800296e:	f7ff fe57 	bl	8002620 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d212      	bcs.n	80029a4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b02      	cmp	r3, #2
 800298a:	d00b      	beq.n	80029a4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f043 0204 	orr.w	r2, r3, #4
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e03d      	b.n	8002a20 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d1d6      	bne.n	8002960 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f06f 0212 	mvn.w	r2, #18
 80029ba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d123      	bne.n	8002a1e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d11f      	bne.n	8002a1e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d111      	bne.n	8002a1e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d105      	bne.n	8002a1e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x1c>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e105      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x228>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b09      	cmp	r3, #9
 8002a6e:	d925      	bls.n	8002abc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68d9      	ldr	r1, [r3, #12]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	3b1e      	subs	r3, #30
 8002a86:	2207      	movs	r2, #7
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	400a      	ands	r2, r1
 8002a94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68d9      	ldr	r1, [r3, #12]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4403      	add	r3, r0
 8002aae:	3b1e      	subs	r3, #30
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	e022      	b.n	8002b02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6919      	ldr	r1, [r3, #16]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	400a      	ands	r2, r1
 8002ade:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6919      	ldr	r1, [r3, #16]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	4618      	mov	r0, r3
 8002af2:	4603      	mov	r3, r0
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4403      	add	r3, r0
 8002af8:	409a      	lsls	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b06      	cmp	r3, #6
 8002b08:	d824      	bhi.n	8002b54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	3b05      	subs	r3, #5
 8002b1c:	221f      	movs	r2, #31
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43da      	mvns	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	400a      	ands	r2, r1
 8002b2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	4618      	mov	r0, r3
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	3b05      	subs	r3, #5
 8002b46:	fa00 f203 	lsl.w	r2, r0, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	635a      	str	r2, [r3, #52]	; 0x34
 8002b52:	e04c      	b.n	8002bee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b0c      	cmp	r3, #12
 8002b5a:	d824      	bhi.n	8002ba6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3b23      	subs	r3, #35	; 0x23
 8002b6e:	221f      	movs	r2, #31
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43da      	mvns	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	3b23      	subs	r3, #35	; 0x23
 8002b98:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ba4:	e023      	b.n	8002bee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3b41      	subs	r3, #65	; 0x41
 8002bb8:	221f      	movs	r2, #31
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	3b41      	subs	r3, #65	; 0x41
 8002be2:	fa00 f203 	lsl.w	r2, r0, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bee:	4b22      	ldr	r3, [pc, #136]	; (8002c78 <HAL_ADC_ConfigChannel+0x234>)
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a21      	ldr	r2, [pc, #132]	; (8002c7c <HAL_ADC_ConfigChannel+0x238>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d109      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x1cc>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b12      	cmp	r3, #18
 8002c02:	d105      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a19      	ldr	r2, [pc, #100]	; (8002c7c <HAL_ADC_ConfigChannel+0x238>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d123      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x21e>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d003      	beq.n	8002c2a <HAL_ADC_ConfigChannel+0x1e6>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b11      	cmp	r3, #17
 8002c28:	d11b      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b10      	cmp	r3, #16
 8002c3c:	d111      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <HAL_ADC_ConfigChannel+0x23c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a10      	ldr	r2, [pc, #64]	; (8002c84 <HAL_ADC_ConfigChannel+0x240>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	0c9a      	lsrs	r2, r3, #18
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c54:	e002      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f9      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	40012300 	.word	0x40012300
 8002c7c:	40012000 	.word	0x40012000
 8002c80:	20000000 	.word	0x20000000
 8002c84:	431bde83 	.word	0x431bde83

08002c88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c90:	4b79      	ldr	r3, [pc, #484]	; (8002e78 <ADC_Init+0x1f0>)
 8002c92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6859      	ldr	r1, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	021a      	lsls	r2, r3, #8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ce0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6899      	ldr	r1, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	4a58      	ldr	r2, [pc, #352]	; (8002e7c <ADC_Init+0x1f4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d022      	beq.n	8002d66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6899      	ldr	r1, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6899      	ldr	r1, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	e00f      	b.n	8002d86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0202 	bic.w	r2, r2, #2
 8002d94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6899      	ldr	r1, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7e1b      	ldrb	r3, [r3, #24]
 8002da0:	005a      	lsls	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01b      	beq.n	8002dec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	3b01      	subs	r3, #1
 8002de0:	035a      	lsls	r2, r3, #13
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	e007      	b.n	8002dfc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	051a      	lsls	r2, r3, #20
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6899      	ldr	r1, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e3e:	025a      	lsls	r2, r3, #9
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6899      	ldr	r1, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	029a      	lsls	r2, r3, #10
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	609a      	str	r2, [r3, #8]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	40012300 	.word	0x40012300
 8002e7c:	0f000001 	.word	0x0f000001

08002e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb2:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	60d3      	str	r3, [r2, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	f003 0307 	and.w	r3, r3, #7
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	db0b      	blt.n	8002f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	4907      	ldr	r1, [pc, #28]	; (8002f1c <__NVIC_EnableIRQ+0x38>)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2001      	movs	r0, #1
 8002f06:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	e000e100 	.word	0xe000e100

08002f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	6039      	str	r1, [r7, #0]
 8002f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	db0a      	blt.n	8002f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	490c      	ldr	r1, [pc, #48]	; (8002f6c <__NVIC_SetPriority+0x4c>)
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	0112      	lsls	r2, r2, #4
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	440b      	add	r3, r1
 8002f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f48:	e00a      	b.n	8002f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	4908      	ldr	r1, [pc, #32]	; (8002f70 <__NVIC_SetPriority+0x50>)
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	3b04      	subs	r3, #4
 8002f58:	0112      	lsls	r2, r2, #4
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	761a      	strb	r2, [r3, #24]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000e100 	.word	0xe000e100
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f1c3 0307 	rsb	r3, r3, #7
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	bf28      	it	cs
 8002f92:	2304      	movcs	r3, #4
 8002f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d902      	bls.n	8002fa4 <NVIC_EncodePriority+0x30>
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3b03      	subs	r3, #3
 8002fa2:	e000      	b.n	8002fa6 <NVIC_EncodePriority+0x32>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc6:	43d9      	mvns	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	4313      	orrs	r3, r2
         );
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3724      	adds	r7, #36	; 0x24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fec:	d301      	bcc.n	8002ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e00f      	b.n	8003012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	; (800301c <SysTick_Config+0x40>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ffa:	210f      	movs	r1, #15
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8003000:	f7ff ff8e 	bl	8002f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <SysTick_Config+0x40>)
 8003006:	2200      	movs	r2, #0
 8003008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800300a:	4b04      	ldr	r3, [pc, #16]	; (800301c <SysTick_Config+0x40>)
 800300c:	2207      	movs	r2, #7
 800300e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	e000e010 	.word	0xe000e010

08003020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff29 	bl	8002e80 <__NVIC_SetPriorityGrouping>
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	4603      	mov	r3, r0
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003048:	f7ff ff3e 	bl	8002ec8 <__NVIC_GetPriorityGrouping>
 800304c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	6978      	ldr	r0, [r7, #20]
 8003054:	f7ff ff8e 	bl	8002f74 <NVIC_EncodePriority>
 8003058:	4602      	mov	r2, r0
 800305a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff ff5d 	bl	8002f20 <__NVIC_SetPriority>
}
 8003066:	bf00      	nop
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	4603      	mov	r3, r0
 8003076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff31 	bl	8002ee4 <__NVIC_EnableIRQ>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff ffa2 	bl	8002fdc <SysTick_Config>
 8003098:	4603      	mov	r3, r0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030b0:	f7ff fab6 	bl	8002620 <HAL_GetTick>
 80030b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d008      	beq.n	80030d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2280      	movs	r2, #128	; 0x80
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e052      	b.n	800317a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0216 	bic.w	r2, r2, #22
 80030e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d103      	bne.n	8003104 <HAL_DMA_Abort+0x62>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003100:	2b00      	cmp	r3, #0
 8003102:	d007      	beq.n	8003114 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0208 	bic.w	r2, r2, #8
 8003112:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003124:	e013      	b.n	800314e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003126:	f7ff fa7b 	bl	8002620 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b05      	cmp	r3, #5
 8003132:	d90c      	bls.n	800314e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2203      	movs	r2, #3
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e015      	b.n	800317a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e4      	bne.n	8003126 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003160:	223f      	movs	r2, #63	; 0x3f
 8003162:	409a      	lsls	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d004      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2280      	movs	r2, #128	; 0x80
 800319a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e00c      	b.n	80031ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2205      	movs	r2, #5
 80031a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0201 	bic.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b089      	sub	sp, #36	; 0x24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	e16b      	b.n	80034bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031e4:	2201      	movs	r2, #1
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	f040 815a 	bne.w	80034b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d005      	beq.n	800321a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003216:	2b02      	cmp	r3, #2
 8003218:	d130      	bne.n	800327c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	2203      	movs	r2, #3
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003250:	2201      	movs	r2, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	f003 0201 	and.w	r2, r3, #1
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b03      	cmp	r3, #3
 8003286:	d017      	beq.n	80032b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	2203      	movs	r2, #3
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d123      	bne.n	800330c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	08da      	lsrs	r2, r3, #3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3208      	adds	r2, #8
 80032cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	220f      	movs	r2, #15
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	08da      	lsrs	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3208      	adds	r2, #8
 8003306:	69b9      	ldr	r1, [r7, #24]
 8003308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	2203      	movs	r2, #3
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4013      	ands	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0203 	and.w	r2, r3, #3
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80b4 	beq.w	80034b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	4b60      	ldr	r3, [pc, #384]	; (80034d4 <HAL_GPIO_Init+0x30c>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	4a5f      	ldr	r2, [pc, #380]	; (80034d4 <HAL_GPIO_Init+0x30c>)
 8003358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800335c:	6453      	str	r3, [r2, #68]	; 0x44
 800335e:	4b5d      	ldr	r3, [pc, #372]	; (80034d4 <HAL_GPIO_Init+0x30c>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800336a:	4a5b      	ldr	r2, [pc, #364]	; (80034d8 <HAL_GPIO_Init+0x310>)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	3302      	adds	r3, #2
 8003372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	220f      	movs	r2, #15
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4013      	ands	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a52      	ldr	r2, [pc, #328]	; (80034dc <HAL_GPIO_Init+0x314>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d02b      	beq.n	80033ee <HAL_GPIO_Init+0x226>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a51      	ldr	r2, [pc, #324]	; (80034e0 <HAL_GPIO_Init+0x318>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d025      	beq.n	80033ea <HAL_GPIO_Init+0x222>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a50      	ldr	r2, [pc, #320]	; (80034e4 <HAL_GPIO_Init+0x31c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01f      	beq.n	80033e6 <HAL_GPIO_Init+0x21e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a4f      	ldr	r2, [pc, #316]	; (80034e8 <HAL_GPIO_Init+0x320>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d019      	beq.n	80033e2 <HAL_GPIO_Init+0x21a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a4e      	ldr	r2, [pc, #312]	; (80034ec <HAL_GPIO_Init+0x324>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <HAL_GPIO_Init+0x216>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a4d      	ldr	r2, [pc, #308]	; (80034f0 <HAL_GPIO_Init+0x328>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00d      	beq.n	80033da <HAL_GPIO_Init+0x212>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a4c      	ldr	r2, [pc, #304]	; (80034f4 <HAL_GPIO_Init+0x32c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d007      	beq.n	80033d6 <HAL_GPIO_Init+0x20e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a4b      	ldr	r2, [pc, #300]	; (80034f8 <HAL_GPIO_Init+0x330>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d101      	bne.n	80033d2 <HAL_GPIO_Init+0x20a>
 80033ce:	2307      	movs	r3, #7
 80033d0:	e00e      	b.n	80033f0 <HAL_GPIO_Init+0x228>
 80033d2:	2308      	movs	r3, #8
 80033d4:	e00c      	b.n	80033f0 <HAL_GPIO_Init+0x228>
 80033d6:	2306      	movs	r3, #6
 80033d8:	e00a      	b.n	80033f0 <HAL_GPIO_Init+0x228>
 80033da:	2305      	movs	r3, #5
 80033dc:	e008      	b.n	80033f0 <HAL_GPIO_Init+0x228>
 80033de:	2304      	movs	r3, #4
 80033e0:	e006      	b.n	80033f0 <HAL_GPIO_Init+0x228>
 80033e2:	2303      	movs	r3, #3
 80033e4:	e004      	b.n	80033f0 <HAL_GPIO_Init+0x228>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e002      	b.n	80033f0 <HAL_GPIO_Init+0x228>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <HAL_GPIO_Init+0x228>
 80033ee:	2300      	movs	r3, #0
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	f002 0203 	and.w	r2, r2, #3
 80033f6:	0092      	lsls	r2, r2, #2
 80033f8:	4093      	lsls	r3, r2
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003400:	4935      	ldr	r1, [pc, #212]	; (80034d8 <HAL_GPIO_Init+0x310>)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	089b      	lsrs	r3, r3, #2
 8003406:	3302      	adds	r3, #2
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_GPIO_Init+0x334>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003432:	4a32      	ldr	r2, [pc, #200]	; (80034fc <HAL_GPIO_Init+0x334>)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003438:	4b30      	ldr	r3, [pc, #192]	; (80034fc <HAL_GPIO_Init+0x334>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800345c:	4a27      	ldr	r2, [pc, #156]	; (80034fc <HAL_GPIO_Init+0x334>)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003462:	4b26      	ldr	r3, [pc, #152]	; (80034fc <HAL_GPIO_Init+0x334>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003486:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <HAL_GPIO_Init+0x334>)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800348c:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <HAL_GPIO_Init+0x334>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034b0:	4a12      	ldr	r2, [pc, #72]	; (80034fc <HAL_GPIO_Init+0x334>)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3301      	adds	r3, #1
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2b0f      	cmp	r3, #15
 80034c0:	f67f ae90 	bls.w	80031e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034c4:	bf00      	nop
 80034c6:	bf00      	nop
 80034c8:	3724      	adds	r7, #36	; 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40013800 	.word	0x40013800
 80034dc:	40020000 	.word	0x40020000
 80034e0:	40020400 	.word	0x40020400
 80034e4:	40020800 	.word	0x40020800
 80034e8:	40020c00 	.word	0x40020c00
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40021400 	.word	0x40021400
 80034f4:	40021800 	.word	0x40021800
 80034f8:	40021c00 	.word	0x40021c00
 80034fc:	40013c00 	.word	0x40013c00

08003500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	807b      	strh	r3, [r7, #2]
 800350c:	4613      	mov	r3, r2
 800350e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003510:	787b      	ldrb	r3, [r7, #1]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003516:	887a      	ldrh	r2, [r7, #2]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800351c:	e003      	b.n	8003526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800351e:	887b      	ldrh	r3, [r7, #2]
 8003520:	041a      	lsls	r2, r3, #16
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	619a      	str	r2, [r3, #24]
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003544:	887a      	ldrh	r2, [r7, #2]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4013      	ands	r3, r2
 800354a:	041a      	lsls	r2, r3, #16
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	43d9      	mvns	r1, r3
 8003550:	887b      	ldrh	r3, [r7, #2]
 8003552:	400b      	ands	r3, r1
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	619a      	str	r2, [r3, #24]
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
	...

08003568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e12b      	b.n	80037d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fe fd76 	bl	8002080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2224      	movs	r2, #36	; 0x24
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035cc:	f001 fbe4 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 80035d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4a81      	ldr	r2, [pc, #516]	; (80037dc <HAL_I2C_Init+0x274>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d807      	bhi.n	80035ec <HAL_I2C_Init+0x84>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a80      	ldr	r2, [pc, #512]	; (80037e0 <HAL_I2C_Init+0x278>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	bf94      	ite	ls
 80035e4:	2301      	movls	r3, #1
 80035e6:	2300      	movhi	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	e006      	b.n	80035fa <HAL_I2C_Init+0x92>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a7d      	ldr	r2, [pc, #500]	; (80037e4 <HAL_I2C_Init+0x27c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	bf94      	ite	ls
 80035f4:	2301      	movls	r3, #1
 80035f6:	2300      	movhi	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e0e7      	b.n	80037d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a78      	ldr	r2, [pc, #480]	; (80037e8 <HAL_I2C_Init+0x280>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0c9b      	lsrs	r3, r3, #18
 800360c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a6a      	ldr	r2, [pc, #424]	; (80037dc <HAL_I2C_Init+0x274>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d802      	bhi.n	800363c <HAL_I2C_Init+0xd4>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3301      	adds	r3, #1
 800363a:	e009      	b.n	8003650 <HAL_I2C_Init+0xe8>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	4a69      	ldr	r2, [pc, #420]	; (80037ec <HAL_I2C_Init+0x284>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	099b      	lsrs	r3, r3, #6
 800364e:	3301      	adds	r3, #1
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	430b      	orrs	r3, r1
 8003656:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003662:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	495c      	ldr	r1, [pc, #368]	; (80037dc <HAL_I2C_Init+0x274>)
 800366c:	428b      	cmp	r3, r1
 800366e:	d819      	bhi.n	80036a4 <HAL_I2C_Init+0x13c>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1e59      	subs	r1, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	fbb1 f3f3 	udiv	r3, r1, r3
 800367e:	1c59      	adds	r1, r3, #1
 8003680:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003684:	400b      	ands	r3, r1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_I2C_Init+0x138>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1e59      	subs	r1, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	fbb1 f3f3 	udiv	r3, r1, r3
 8003698:	3301      	adds	r3, #1
 800369a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369e:	e051      	b.n	8003744 <HAL_I2C_Init+0x1dc>
 80036a0:	2304      	movs	r3, #4
 80036a2:	e04f      	b.n	8003744 <HAL_I2C_Init+0x1dc>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d111      	bne.n	80036d0 <HAL_I2C_Init+0x168>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1e58      	subs	r0, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	440b      	add	r3, r1
 80036ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e012      	b.n	80036f6 <HAL_I2C_Init+0x18e>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1e58      	subs	r0, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	0099      	lsls	r1, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e6:	3301      	adds	r3, #1
 80036e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_I2C_Init+0x196>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e022      	b.n	8003744 <HAL_I2C_Init+0x1dc>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10e      	bne.n	8003724 <HAL_I2C_Init+0x1bc>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1e58      	subs	r0, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	460b      	mov	r3, r1
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	440b      	add	r3, r1
 8003714:	fbb0 f3f3 	udiv	r3, r0, r3
 8003718:	3301      	adds	r3, #1
 800371a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003722:	e00f      	b.n	8003744 <HAL_I2C_Init+0x1dc>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1e58      	subs	r0, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	0099      	lsls	r1, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	fbb0 f3f3 	udiv	r3, r0, r3
 800373a:	3301      	adds	r3, #1
 800373c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	6809      	ldr	r1, [r1, #0]
 8003748:	4313      	orrs	r3, r2
 800374a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69da      	ldr	r2, [r3, #28]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003772:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6911      	ldr	r1, [r2, #16]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68d2      	ldr	r2, [r2, #12]
 800377e:	4311      	orrs	r1, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	430b      	orrs	r3, r1
 8003786:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	000186a0 	.word	0x000186a0
 80037e0:	001e847f 	.word	0x001e847f
 80037e4:	003d08ff 	.word	0x003d08ff
 80037e8:	431bde83 	.word	0x431bde83
 80037ec:	10624dd3 	.word	0x10624dd3

080037f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	4608      	mov	r0, r1
 80037fa:	4611      	mov	r1, r2
 80037fc:	461a      	mov	r2, r3
 80037fe:	4603      	mov	r3, r0
 8003800:	817b      	strh	r3, [r7, #10]
 8003802:	460b      	mov	r3, r1
 8003804:	813b      	strh	r3, [r7, #8]
 8003806:	4613      	mov	r3, r2
 8003808:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800380a:	f7fe ff09 	bl	8002620 <HAL_GetTick>
 800380e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b20      	cmp	r3, #32
 800381a:	f040 80d9 	bne.w	80039d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2319      	movs	r3, #25
 8003824:	2201      	movs	r2, #1
 8003826:	496d      	ldr	r1, [pc, #436]	; (80039dc <HAL_I2C_Mem_Write+0x1ec>)
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fc7f 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003834:	2302      	movs	r3, #2
 8003836:	e0cc      	b.n	80039d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_I2C_Mem_Write+0x56>
 8003842:	2302      	movs	r3, #2
 8003844:	e0c5      	b.n	80039d2 <HAL_I2C_Mem_Write+0x1e2>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b01      	cmp	r3, #1
 800385a:	d007      	beq.n	800386c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800387a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2221      	movs	r2, #33	; 0x21
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2240      	movs	r2, #64	; 0x40
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a3a      	ldr	r2, [r7, #32]
 8003896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800389c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a4d      	ldr	r2, [pc, #308]	; (80039e0 <HAL_I2C_Mem_Write+0x1f0>)
 80038ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038ae:	88f8      	ldrh	r0, [r7, #6]
 80038b0:	893a      	ldrh	r2, [r7, #8]
 80038b2:	8979      	ldrh	r1, [r7, #10]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	4603      	mov	r3, r0
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 fab6 	bl	8003e30 <I2C_RequestMemoryWrite>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d052      	beq.n	8003970 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e081      	b.n	80039d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fd00 	bl	80042d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00d      	beq.n	80038fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d107      	bne.n	80038f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e06b      	b.n	80039d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	781a      	ldrb	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b04      	cmp	r3, #4
 8003936:	d11b      	bne.n	8003970 <HAL_I2C_Mem_Write+0x180>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	2b00      	cmp	r3, #0
 800393e:	d017      	beq.n	8003970 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	781a      	ldrb	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1aa      	bne.n	80038ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fcec 	bl	800435a <I2C_WaitOnBTFFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00d      	beq.n	80039a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	2b04      	cmp	r3, #4
 800398e:	d107      	bne.n	80039a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e016      	b.n	80039d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	e000      	b.n	80039d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039d0:	2302      	movs	r3, #2
  }
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	00100002 	.word	0x00100002
 80039e0:	ffff0000 	.word	0xffff0000

080039e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08c      	sub	sp, #48	; 0x30
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	4608      	mov	r0, r1
 80039ee:	4611      	mov	r1, r2
 80039f0:	461a      	mov	r2, r3
 80039f2:	4603      	mov	r3, r0
 80039f4:	817b      	strh	r3, [r7, #10]
 80039f6:	460b      	mov	r3, r1
 80039f8:	813b      	strh	r3, [r7, #8]
 80039fa:	4613      	mov	r3, r2
 80039fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039fe:	f7fe fe0f 	bl	8002620 <HAL_GetTick>
 8003a02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	f040 8208 	bne.w	8003e22 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	2319      	movs	r3, #25
 8003a18:	2201      	movs	r2, #1
 8003a1a:	497b      	ldr	r1, [pc, #492]	; (8003c08 <HAL_I2C_Mem_Read+0x224>)
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fb85 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e1fb      	b.n	8003e24 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_I2C_Mem_Read+0x56>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e1f4      	b.n	8003e24 <HAL_I2C_Mem_Read+0x440>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d007      	beq.n	8003a60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2222      	movs	r2, #34	; 0x22
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2240      	movs	r2, #64	; 0x40
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a5b      	ldr	r2, [pc, #364]	; (8003c0c <HAL_I2C_Mem_Read+0x228>)
 8003aa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aa2:	88f8      	ldrh	r0, [r7, #6]
 8003aa4:	893a      	ldrh	r2, [r7, #8]
 8003aa6:	8979      	ldrh	r1, [r7, #10]
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	9301      	str	r3, [sp, #4]
 8003aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fa52 	bl	8003f5c <I2C_RequestMemoryRead>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e1b0      	b.n	8003e24 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d113      	bne.n	8003af2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aca:	2300      	movs	r3, #0
 8003acc:	623b      	str	r3, [r7, #32]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	623b      	str	r3, [r7, #32]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	623b      	str	r3, [r7, #32]
 8003ade:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e184      	b.n	8003dfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d11b      	bne.n	8003b32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	e164      	b.n	8003dfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d11b      	bne.n	8003b72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	e144      	b.n	8003dfc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b88:	e138      	b.n	8003dfc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	f200 80f1 	bhi.w	8003d76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d123      	bne.n	8003be4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 fc1b 	bl	80043dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e139      	b.n	8003e24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003be2:	e10b      	b.n	8003dfc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d14e      	bne.n	8003c8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	4906      	ldr	r1, [pc, #24]	; (8003c10 <HAL_I2C_Mem_Read+0x22c>)
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fa98 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d008      	beq.n	8003c14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e10e      	b.n	8003e24 <HAL_I2C_Mem_Read+0x440>
 8003c06:	bf00      	nop
 8003c08:	00100002 	.word	0x00100002
 8003c0c:	ffff0000 	.word	0xffff0000
 8003c10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c88:	e0b8      	b.n	8003dfc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c90:	2200      	movs	r2, #0
 8003c92:	4966      	ldr	r1, [pc, #408]	; (8003e2c <HAL_I2C_Mem_Read+0x448>)
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fa49 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0bf      	b.n	8003e24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cec:	2200      	movs	r2, #0
 8003cee:	494f      	ldr	r1, [pc, #316]	; (8003e2c <HAL_I2C_Mem_Read+0x448>)
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fa1b 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e091      	b.n	8003e24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d74:	e042      	b.n	8003dfc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fb2e 	bl	80043dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e04c      	b.n	8003e24 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d118      	bne.n	8003dfc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f47f aec2 	bne.w	8003b8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e000      	b.n	8003e24 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
  }
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3728      	adds	r7, #40	; 0x28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	00010004 	.word	0x00010004

08003e30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	4608      	mov	r0, r1
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	817b      	strh	r3, [r7, #10]
 8003e42:	460b      	mov	r3, r1
 8003e44:	813b      	strh	r3, [r7, #8]
 8003e46:	4613      	mov	r3, r2
 8003e48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f960 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e80:	d103      	bne.n	8003e8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e05f      	b.n	8003f4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e8e:	897b      	ldrh	r3, [r7, #10]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	6a3a      	ldr	r2, [r7, #32]
 8003ea2:	492d      	ldr	r1, [pc, #180]	; (8003f58 <I2C_RequestMemoryWrite+0x128>)
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f998 	bl	80041da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e04c      	b.n	8003f4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ecc:	6a39      	ldr	r1, [r7, #32]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fa02 	bl	80042d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d107      	bne.n	8003ef2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e02b      	b.n	8003f4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d105      	bne.n	8003f08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003efc:	893b      	ldrh	r3, [r7, #8]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	611a      	str	r2, [r3, #16]
 8003f06:	e021      	b.n	8003f4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f08:	893b      	ldrh	r3, [r7, #8]
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	6a39      	ldr	r1, [r7, #32]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f9dc 	bl	80042d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d107      	bne.n	8003f3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e005      	b.n	8003f4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f42:	893b      	ldrh	r3, [r7, #8]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	00010002 	.word	0x00010002

08003f5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	4608      	mov	r0, r1
 8003f66:	4611      	mov	r1, r2
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	817b      	strh	r3, [r7, #10]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	813b      	strh	r3, [r7, #8]
 8003f72:	4613      	mov	r3, r2
 8003f74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f8c2 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00d      	beq.n	8003fca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fbc:	d103      	bne.n	8003fc6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e0aa      	b.n	8004120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fca:	897b      	ldrh	r3, [r7, #10]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	6a3a      	ldr	r2, [r7, #32]
 8003fde:	4952      	ldr	r1, [pc, #328]	; (8004128 <I2C_RequestMemoryRead+0x1cc>)
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f8fa 	bl	80041da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e097      	b.n	8004120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004008:	6a39      	ldr	r1, [r7, #32]
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f964 	bl	80042d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00d      	beq.n	8004032 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	2b04      	cmp	r3, #4
 800401c:	d107      	bne.n	800402e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e076      	b.n	8004120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d105      	bne.n	8004044 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004038:	893b      	ldrh	r3, [r7, #8]
 800403a:	b2da      	uxtb	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	611a      	str	r2, [r3, #16]
 8004042:	e021      	b.n	8004088 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004044:	893b      	ldrh	r3, [r7, #8]
 8004046:	0a1b      	lsrs	r3, r3, #8
 8004048:	b29b      	uxth	r3, r3
 800404a:	b2da      	uxtb	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004054:	6a39      	ldr	r1, [r7, #32]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f93e 	bl	80042d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00d      	beq.n	800407e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	2b04      	cmp	r3, #4
 8004068:	d107      	bne.n	800407a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004078:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e050      	b.n	8004120 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800407e:	893b      	ldrh	r3, [r7, #8]
 8004080:	b2da      	uxtb	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408a:	6a39      	ldr	r1, [r7, #32]
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f923 	bl	80042d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	2b04      	cmp	r3, #4
 800409e:	d107      	bne.n	80040b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e035      	b.n	8004120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f82b 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00d      	beq.n	80040f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ea:	d103      	bne.n	80040f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e013      	b.n	8004120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040f8:	897b      	ldrh	r3, [r7, #10]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	b2da      	uxtb	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	6a3a      	ldr	r2, [r7, #32]
 800410c:	4906      	ldr	r1, [pc, #24]	; (8004128 <I2C_RequestMemoryRead+0x1cc>)
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f863 	bl	80041da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	00010002 	.word	0x00010002

0800412c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800413c:	e025      	b.n	800418a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d021      	beq.n	800418a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004146:	f7fe fa6b 	bl	8002620 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d302      	bcc.n	800415c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d116      	bne.n	800418a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f043 0220 	orr.w	r2, r3, #32
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e023      	b.n	80041d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	d10d      	bne.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	43da      	mvns	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4013      	ands	r3, r2
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bf0c      	ite	eq
 80041a6:	2301      	moveq	r3, #1
 80041a8:	2300      	movne	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	e00c      	b.n	80041ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	43da      	mvns	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4013      	ands	r3, r2
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bf0c      	ite	eq
 80041c2:	2301      	moveq	r3, #1
 80041c4:	2300      	movne	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d0b6      	beq.n	800413e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041e8:	e051      	b.n	800428e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f8:	d123      	bne.n	8004242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004208:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004212:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f043 0204 	orr.w	r2, r3, #4
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e046      	b.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d021      	beq.n	800428e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424a:	f7fe f9e9 	bl	8002620 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	429a      	cmp	r2, r3
 8004258:	d302      	bcc.n	8004260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d116      	bne.n	800428e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f043 0220 	orr.w	r2, r3, #32
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e020      	b.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	d10c      	bne.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	43da      	mvns	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bf14      	ite	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	2300      	moveq	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	e00b      	b.n	80042ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	43da      	mvns	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4013      	ands	r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf14      	ite	ne
 80042c4:	2301      	movne	r3, #1
 80042c6:	2300      	moveq	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d18d      	bne.n	80041ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042e4:	e02d      	b.n	8004342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f8ce 	bl	8004488 <I2C_IsAcknowledgeFailed>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e02d      	b.n	8004352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d021      	beq.n	8004342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7fe f98f 	bl	8002620 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d116      	bne.n	8004342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f043 0220 	orr.w	r2, r3, #32
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e007      	b.n	8004352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434c:	2b80      	cmp	r3, #128	; 0x80
 800434e:	d1ca      	bne.n	80042e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004366:	e02d      	b.n	80043c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f88d 	bl	8004488 <I2C_IsAcknowledgeFailed>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e02d      	b.n	80043d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437e:	d021      	beq.n	80043c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004380:	f7fe f94e 	bl	8002620 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	429a      	cmp	r2, r3
 800438e:	d302      	bcc.n	8004396 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d116      	bne.n	80043c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	f043 0220 	orr.w	r2, r3, #32
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e007      	b.n	80043d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d1ca      	bne.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043e8:	e042      	b.n	8004470 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d119      	bne.n	800442c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0210 	mvn.w	r2, #16
 8004400:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e029      	b.n	8004480 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442c:	f7fe f8f8 	bl	8002620 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	429a      	cmp	r2, r3
 800443a:	d302      	bcc.n	8004442 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d116      	bne.n	8004470 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	f043 0220 	orr.w	r2, r3, #32
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e007      	b.n	8004480 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447a:	2b40      	cmp	r3, #64	; 0x40
 800447c:	d1b5      	bne.n	80043ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449e:	d11b      	bne.n	80044d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	f043 0204 	orr.w	r2, r3, #4
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_PWR_EnableBkUpAccess+0x20>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <HAL_PWR_EnableBkUpAccess+0x24>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80044fa:	687b      	ldr	r3, [r7, #4]
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	420e0020 	.word	0x420e0020
 800450c:	40007000 	.word	0x40007000

08004510 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_PWR_DisableBkUpAccess+0x20>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_PWR_DisableBkUpAccess+0x24>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004522:	687b      	ldr	r3, [r7, #4]
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	420e0020 	.word	0x420e0020
 8004534:	40007000 	.word	0x40007000

08004538 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e267      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d075      	beq.n	8004642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004556:	4b88      	ldr	r3, [pc, #544]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b04      	cmp	r3, #4
 8004560:	d00c      	beq.n	800457c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004562:	4b85      	ldr	r3, [pc, #532]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800456a:	2b08      	cmp	r3, #8
 800456c:	d112      	bne.n	8004594 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800456e:	4b82      	ldr	r3, [pc, #520]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800457a:	d10b      	bne.n	8004594 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457c:	4b7e      	ldr	r3, [pc, #504]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d05b      	beq.n	8004640 <HAL_RCC_OscConfig+0x108>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d157      	bne.n	8004640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e242      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459c:	d106      	bne.n	80045ac <HAL_RCC_OscConfig+0x74>
 800459e:	4b76      	ldr	r3, [pc, #472]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a75      	ldr	r2, [pc, #468]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e01d      	b.n	80045e8 <HAL_RCC_OscConfig+0xb0>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCC_OscConfig+0x98>
 80045b6:	4b70      	ldr	r3, [pc, #448]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a6f      	ldr	r2, [pc, #444]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	4b6d      	ldr	r3, [pc, #436]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a6c      	ldr	r2, [pc, #432]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	e00b      	b.n	80045e8 <HAL_RCC_OscConfig+0xb0>
 80045d0:	4b69      	ldr	r3, [pc, #420]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a68      	ldr	r2, [pc, #416]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	4b66      	ldr	r3, [pc, #408]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a65      	ldr	r2, [pc, #404]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d013      	beq.n	8004618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f0:	f7fe f816 	bl	8002620 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045f8:	f7fe f812 	bl	8002620 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b64      	cmp	r3, #100	; 0x64
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e207      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460a:	4b5b      	ldr	r3, [pc, #364]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0xc0>
 8004616:	e014      	b.n	8004642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fe f802 	bl	8002620 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004620:	f7fd fffe 	bl	8002620 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b64      	cmp	r3, #100	; 0x64
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e1f3      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004632:	4b51      	ldr	r3, [pc, #324]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0xe8>
 800463e:	e000      	b.n	8004642 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d063      	beq.n	8004716 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800464e:	4b4a      	ldr	r3, [pc, #296]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 030c 	and.w	r3, r3, #12
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00b      	beq.n	8004672 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800465a:	4b47      	ldr	r3, [pc, #284]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004662:	2b08      	cmp	r3, #8
 8004664:	d11c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004666:	4b44      	ldr	r3, [pc, #272]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d116      	bne.n	80046a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004672:	4b41      	ldr	r3, [pc, #260]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_RCC_OscConfig+0x152>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d001      	beq.n	800468a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e1c7      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468a:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4937      	ldr	r1, [pc, #220]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 800469a:	4313      	orrs	r3, r2
 800469c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469e:	e03a      	b.n	8004716 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d020      	beq.n	80046ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a8:	4b34      	ldr	r3, [pc, #208]	; (800477c <HAL_RCC_OscConfig+0x244>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ae:	f7fd ffb7 	bl	8002620 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b6:	f7fd ffb3 	bl	8002620 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e1a8      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c8:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d4:	4b28      	ldr	r3, [pc, #160]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4925      	ldr	r1, [pc, #148]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	600b      	str	r3, [r1, #0]
 80046e8:	e015      	b.n	8004716 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ea:	4b24      	ldr	r3, [pc, #144]	; (800477c <HAL_RCC_OscConfig+0x244>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f0:	f7fd ff96 	bl	8002620 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046f8:	f7fd ff92 	bl	8002620 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e187      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800470a:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d036      	beq.n	8004790 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d016      	beq.n	8004758 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800472a:	4b15      	ldr	r3, [pc, #84]	; (8004780 <HAL_RCC_OscConfig+0x248>)
 800472c:	2201      	movs	r2, #1
 800472e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004730:	f7fd ff76 	bl	8002620 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004738:	f7fd ff72 	bl	8002620 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e167      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474a:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 800474c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0x200>
 8004756:	e01b      	b.n	8004790 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <HAL_RCC_OscConfig+0x248>)
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475e:	f7fd ff5f 	bl	8002620 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004764:	e00e      	b.n	8004784 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004766:	f7fd ff5b 	bl	8002620 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d907      	bls.n	8004784 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e150      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
 8004778:	40023800 	.word	0x40023800
 800477c:	42470000 	.word	0x42470000
 8004780:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004784:	4b88      	ldr	r3, [pc, #544]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1ea      	bne.n	8004766 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8097 	beq.w	80048cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479e:	2300      	movs	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a2:	4b81      	ldr	r3, [pc, #516]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10f      	bne.n	80047ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	4b7d      	ldr	r3, [pc, #500]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	4a7c      	ldr	r2, [pc, #496]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80047b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047bc:	6413      	str	r3, [r2, #64]	; 0x40
 80047be:	4b7a      	ldr	r3, [pc, #488]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ca:	2301      	movs	r3, #1
 80047cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ce:	4b77      	ldr	r3, [pc, #476]	; (80049ac <HAL_RCC_OscConfig+0x474>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d118      	bne.n	800480c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047da:	4b74      	ldr	r3, [pc, #464]	; (80049ac <HAL_RCC_OscConfig+0x474>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a73      	ldr	r2, [pc, #460]	; (80049ac <HAL_RCC_OscConfig+0x474>)
 80047e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e6:	f7fd ff1b 	bl	8002620 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ee:	f7fd ff17 	bl	8002620 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e10c      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004800:	4b6a      	ldr	r3, [pc, #424]	; (80049ac <HAL_RCC_OscConfig+0x474>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d106      	bne.n	8004822 <HAL_RCC_OscConfig+0x2ea>
 8004814:	4b64      	ldr	r3, [pc, #400]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004818:	4a63      	ldr	r2, [pc, #396]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	6713      	str	r3, [r2, #112]	; 0x70
 8004820:	e01c      	b.n	800485c <HAL_RCC_OscConfig+0x324>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b05      	cmp	r3, #5
 8004828:	d10c      	bne.n	8004844 <HAL_RCC_OscConfig+0x30c>
 800482a:	4b5f      	ldr	r3, [pc, #380]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	4a5e      	ldr	r2, [pc, #376]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004830:	f043 0304 	orr.w	r3, r3, #4
 8004834:	6713      	str	r3, [r2, #112]	; 0x70
 8004836:	4b5c      	ldr	r3, [pc, #368]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	4a5b      	ldr	r2, [pc, #364]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	6713      	str	r3, [r2, #112]	; 0x70
 8004842:	e00b      	b.n	800485c <HAL_RCC_OscConfig+0x324>
 8004844:	4b58      	ldr	r3, [pc, #352]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	4a57      	ldr	r2, [pc, #348]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 800484a:	f023 0301 	bic.w	r3, r3, #1
 800484e:	6713      	str	r3, [r2, #112]	; 0x70
 8004850:	4b55      	ldr	r3, [pc, #340]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	4a54      	ldr	r2, [pc, #336]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004856:	f023 0304 	bic.w	r3, r3, #4
 800485a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d015      	beq.n	8004890 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fd fedc 	bl	8002620 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486a:	e00a      	b.n	8004882 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7fd fed8 	bl	8002620 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	; 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e0cb      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004882:	4b49      	ldr	r3, [pc, #292]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0ee      	beq.n	800486c <HAL_RCC_OscConfig+0x334>
 800488e:	e014      	b.n	80048ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004890:	f7fd fec6 	bl	8002620 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004896:	e00a      	b.n	80048ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004898:	f7fd fec2 	bl	8002620 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e0b5      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ae:	4b3e      	ldr	r3, [pc, #248]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1ee      	bne.n	8004898 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d105      	bne.n	80048cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c0:	4b39      	ldr	r3, [pc, #228]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	4a38      	ldr	r2, [pc, #224]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80048c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80a1 	beq.w	8004a18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048d6:	4b34      	ldr	r3, [pc, #208]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 030c 	and.w	r3, r3, #12
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d05c      	beq.n	800499c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d141      	bne.n	800496e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ea:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <HAL_RCC_OscConfig+0x478>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f0:	f7fd fe96 	bl	8002620 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f8:	f7fd fe92 	bl	8002620 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e087      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	4b27      	ldr	r3, [pc, #156]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69da      	ldr	r2, [r3, #28]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	019b      	lsls	r3, r3, #6
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	085b      	lsrs	r3, r3, #1
 800492e:	3b01      	subs	r3, #1
 8004930:	041b      	lsls	r3, r3, #16
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	061b      	lsls	r3, r3, #24
 800493a:	491b      	ldr	r1, [pc, #108]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004940:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <HAL_RCC_OscConfig+0x478>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004946:	f7fd fe6b 	bl	8002620 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800494e:	f7fd fe67 	bl	8002620 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e05c      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x416>
 800496c:	e054      	b.n	8004a18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_RCC_OscConfig+0x478>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004974:	f7fd fe54 	bl	8002620 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800497c:	f7fd fe50 	bl	8002620 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e045      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x444>
 800499a:	e03d      	b.n	8004a18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d107      	bne.n	80049b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e038      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
 80049a8:	40023800 	.word	0x40023800
 80049ac:	40007000 	.word	0x40007000
 80049b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049b4:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <HAL_RCC_OscConfig+0x4ec>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d028      	beq.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d121      	bne.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d11a      	bne.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049e4:	4013      	ands	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d111      	bne.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	3b01      	subs	r3, #1
 80049fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d107      	bne.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d001      	beq.n	8004a18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800

08004a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0cc      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a3c:	4b68      	ldr	r3, [pc, #416]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d90c      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4a:	4b65      	ldr	r3, [pc, #404]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b63      	ldr	r3, [pc, #396]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0b8      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d020      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a7c:	4b59      	ldr	r3, [pc, #356]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	4a58      	ldr	r2, [pc, #352]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a94:	4b53      	ldr	r3, [pc, #332]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4a52      	ldr	r2, [pc, #328]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa0:	4b50      	ldr	r3, [pc, #320]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	494d      	ldr	r1, [pc, #308]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d044      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac6:	4b47      	ldr	r3, [pc, #284]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d119      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e07f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae6:	4b3f      	ldr	r3, [pc, #252]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e06f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af6:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e067      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b06:	4b37      	ldr	r3, [pc, #220]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f023 0203 	bic.w	r2, r3, #3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4934      	ldr	r1, [pc, #208]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b18:	f7fd fd82 	bl	8002620 <HAL_GetTick>
 8004b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b20:	f7fd fd7e 	bl	8002620 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e04f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b36:	4b2b      	ldr	r3, [pc, #172]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 020c 	and.w	r2, r3, #12
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d1eb      	bne.n	8004b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b48:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d20c      	bcs.n	8004b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b22      	ldr	r3, [pc, #136]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e032      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b7c:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	4916      	ldr	r1, [pc, #88]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b9a:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	490e      	ldr	r1, [pc, #56]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bae:	f000 f821 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	490a      	ldr	r1, [pc, #40]	; (8004be8 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc0:	5ccb      	ldrb	r3, [r1, r3]
 8004bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc6:	4a09      	ldr	r2, [pc, #36]	; (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bca:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fd fce2 	bl	8002598 <HAL_InitTick>

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40023c00 	.word	0x40023c00
 8004be4:	40023800 	.word	0x40023800
 8004be8:	0800bd40 	.word	0x0800bd40
 8004bec:	20000000 	.word	0x20000000
 8004bf0:	20000004 	.word	0x20000004

08004bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf8:	b090      	sub	sp, #64	; 0x40
 8004bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8004c00:	2300      	movs	r3, #0
 8004c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c04:	2300      	movs	r3, #0
 8004c06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c0c:	4b59      	ldr	r3, [pc, #356]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 030c 	and.w	r3, r3, #12
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d00d      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x40>
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	f200 80a1 	bhi.w	8004d60 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0x34>
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d003      	beq.n	8004c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c26:	e09b      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c28:	4b53      	ldr	r3, [pc, #332]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c2a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004c2c:	e09b      	b.n	8004d66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c2e:	4b53      	ldr	r3, [pc, #332]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c32:	e098      	b.n	8004d66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c34:	4b4f      	ldr	r3, [pc, #316]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c3e:	4b4d      	ldr	r3, [pc, #308]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d028      	beq.n	8004c9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c4a:	4b4a      	ldr	r3, [pc, #296]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	099b      	lsrs	r3, r3, #6
 8004c50:	2200      	movs	r2, #0
 8004c52:	623b      	str	r3, [r7, #32]
 8004c54:	627a      	str	r2, [r7, #36]	; 0x24
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4b47      	ldr	r3, [pc, #284]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c60:	fb03 f201 	mul.w	r2, r3, r1
 8004c64:	2300      	movs	r3, #0
 8004c66:	fb00 f303 	mul.w	r3, r0, r3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	4a43      	ldr	r2, [pc, #268]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c6e:	fba0 1202 	umull	r1, r2, r0, r2
 8004c72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c74:	460a      	mov	r2, r1
 8004c76:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c7a:	4413      	add	r3, r2
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c80:	2200      	movs	r2, #0
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	61fa      	str	r2, [r7, #28]
 8004c86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c8e:	f7fb ffa3 	bl	8000bd8 <__aeabi_uldivmod>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4613      	mov	r3, r2
 8004c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c9a:	e053      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c9c:	4b35      	ldr	r3, [pc, #212]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	099b      	lsrs	r3, r3, #6
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	617a      	str	r2, [r7, #20]
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cae:	f04f 0b00 	mov.w	fp, #0
 8004cb2:	4652      	mov	r2, sl
 8004cb4:	465b      	mov	r3, fp
 8004cb6:	f04f 0000 	mov.w	r0, #0
 8004cba:	f04f 0100 	mov.w	r1, #0
 8004cbe:	0159      	lsls	r1, r3, #5
 8004cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cc4:	0150      	lsls	r0, r2, #5
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	ebb2 080a 	subs.w	r8, r2, sl
 8004cce:	eb63 090b 	sbc.w	r9, r3, fp
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ce2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ce6:	ebb2 0408 	subs.w	r4, r2, r8
 8004cea:	eb63 0509 	sbc.w	r5, r3, r9
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	00eb      	lsls	r3, r5, #3
 8004cf8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cfc:	00e2      	lsls	r2, r4, #3
 8004cfe:	4614      	mov	r4, r2
 8004d00:	461d      	mov	r5, r3
 8004d02:	eb14 030a 	adds.w	r3, r4, sl
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	eb45 030b 	adc.w	r3, r5, fp
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	028b      	lsls	r3, r1, #10
 8004d1e:	4621      	mov	r1, r4
 8004d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d24:	4621      	mov	r1, r4
 8004d26:	028a      	lsls	r2, r1, #10
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2e:	2200      	movs	r2, #0
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	60fa      	str	r2, [r7, #12]
 8004d34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d38:	f7fb ff4e 	bl	8000bd8 <__aeabi_uldivmod>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4613      	mov	r3, r2
 8004d42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d44:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	0c1b      	lsrs	r3, r3, #16
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	3301      	adds	r3, #1
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d5e:	e002      	b.n	8004d66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3740      	adds	r7, #64	; 0x40
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800
 8004d78:	00f42400 	.word	0x00f42400
 8004d7c:	017d7840 	.word	0x017d7840

08004d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d84:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d86:	681b      	ldr	r3, [r3, #0]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000000 	.word	0x20000000

08004d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d9c:	f7ff fff0 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	0a9b      	lsrs	r3, r3, #10
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4903      	ldr	r1, [pc, #12]	; (8004dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dae:	5ccb      	ldrb	r3, [r1, r3]
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	0800bd50 	.word	0x0800bd50

08004dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dc4:	f7ff ffdc 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	0b5b      	lsrs	r3, r3, #13
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	4903      	ldr	r1, [pc, #12]	; (8004de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dd6:	5ccb      	ldrb	r3, [r1, r3]
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40023800 	.word	0x40023800
 8004de4:	0800bd50 	.word	0x0800bd50

08004de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e041      	b.n	8004e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fd f97e 	bl	8002110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f000 fc0c 	bl	8005644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e041      	b.n	8004f1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d106      	bne.n	8004eb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f839 	bl	8004f24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f000 fbbd 	bl	8005644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d109      	bne.n	8004f5c <HAL_TIM_PWM_Start+0x24>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	bf14      	ite	ne
 8004f54:	2301      	movne	r3, #1
 8004f56:	2300      	moveq	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	e022      	b.n	8004fa2 <HAL_TIM_PWM_Start+0x6a>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d109      	bne.n	8004f76 <HAL_TIM_PWM_Start+0x3e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	bf14      	ite	ne
 8004f6e:	2301      	movne	r3, #1
 8004f70:	2300      	moveq	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	e015      	b.n	8004fa2 <HAL_TIM_PWM_Start+0x6a>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d109      	bne.n	8004f90 <HAL_TIM_PWM_Start+0x58>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	bf14      	ite	ne
 8004f88:	2301      	movne	r3, #1
 8004f8a:	2300      	moveq	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	e008      	b.n	8004fa2 <HAL_TIM_PWM_Start+0x6a>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	bf14      	ite	ne
 8004f9c:	2301      	movne	r3, #1
 8004f9e:	2300      	moveq	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e07c      	b.n	80050a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_PWM_Start+0x82>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fb8:	e013      	b.n	8004fe2 <HAL_TIM_PWM_Start+0xaa>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d104      	bne.n	8004fca <HAL_TIM_PWM_Start+0x92>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc8:	e00b      	b.n	8004fe2 <HAL_TIM_PWM_Start+0xaa>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_PWM_Start+0xa2>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fd8:	e003      	b.n	8004fe2 <HAL_TIM_PWM_Start+0xaa>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	6839      	ldr	r1, [r7, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fe14 	bl	8005c18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a2d      	ldr	r2, [pc, #180]	; (80050ac <HAL_TIM_PWM_Start+0x174>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <HAL_TIM_PWM_Start+0xcc>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a2c      	ldr	r2, [pc, #176]	; (80050b0 <HAL_TIM_PWM_Start+0x178>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d101      	bne.n	8005008 <HAL_TIM_PWM_Start+0xd0>
 8005004:	2301      	movs	r3, #1
 8005006:	e000      	b.n	800500a <HAL_TIM_PWM_Start+0xd2>
 8005008:	2300      	movs	r3, #0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d007      	beq.n	800501e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800501c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a22      	ldr	r2, [pc, #136]	; (80050ac <HAL_TIM_PWM_Start+0x174>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d022      	beq.n	800506e <HAL_TIM_PWM_Start+0x136>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005030:	d01d      	beq.n	800506e <HAL_TIM_PWM_Start+0x136>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1f      	ldr	r2, [pc, #124]	; (80050b4 <HAL_TIM_PWM_Start+0x17c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d018      	beq.n	800506e <HAL_TIM_PWM_Start+0x136>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1d      	ldr	r2, [pc, #116]	; (80050b8 <HAL_TIM_PWM_Start+0x180>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d013      	beq.n	800506e <HAL_TIM_PWM_Start+0x136>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1c      	ldr	r2, [pc, #112]	; (80050bc <HAL_TIM_PWM_Start+0x184>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00e      	beq.n	800506e <HAL_TIM_PWM_Start+0x136>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a16      	ldr	r2, [pc, #88]	; (80050b0 <HAL_TIM_PWM_Start+0x178>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d009      	beq.n	800506e <HAL_TIM_PWM_Start+0x136>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a18      	ldr	r2, [pc, #96]	; (80050c0 <HAL_TIM_PWM_Start+0x188>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d004      	beq.n	800506e <HAL_TIM_PWM_Start+0x136>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a16      	ldr	r2, [pc, #88]	; (80050c4 <HAL_TIM_PWM_Start+0x18c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d111      	bne.n	8005092 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b06      	cmp	r3, #6
 800507e:	d010      	beq.n	80050a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005090:	e007      	b.n	80050a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40010000 	.word	0x40010000
 80050b0:	40010400 	.word	0x40010400
 80050b4:	40000400 	.word	0x40000400
 80050b8:	40000800 	.word	0x40000800
 80050bc:	40000c00 	.word	0x40000c00
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40001800 	.word	0x40001800

080050c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e097      	b.n	800520c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d106      	bne.n	80050f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7fd f86b 	bl	80021cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2202      	movs	r2, #2
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800510c:	f023 0307 	bic.w	r3, r3, #7
 8005110:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3304      	adds	r3, #4
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f000 fa91 	bl	8005644 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514a:	f023 0303 	bic.w	r3, r3, #3
 800514e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	4313      	orrs	r3, r2
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005168:	f023 030c 	bic.w	r3, r3, #12
 800516c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005174:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005178:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	4313      	orrs	r3, r2
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	011a      	lsls	r2, r3, #4
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	031b      	lsls	r3, r3, #12
 8005198:	4313      	orrs	r3, r2
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80051a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80051ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	011b      	lsls	r3, r3, #4
 80051ba:	4313      	orrs	r3, r2
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005224:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800522c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005234:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800523c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d110      	bne.n	8005266 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d102      	bne.n	8005250 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800524a:	7b7b      	ldrb	r3, [r7, #13]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d001      	beq.n	8005254 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e069      	b.n	8005328 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005264:	e031      	b.n	80052ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b04      	cmp	r3, #4
 800526a:	d110      	bne.n	800528e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800526c:	7bbb      	ldrb	r3, [r7, #14]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d102      	bne.n	8005278 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005272:	7b3b      	ldrb	r3, [r7, #12]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d001      	beq.n	800527c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e055      	b.n	8005328 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800528c:	e01d      	b.n	80052ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d108      	bne.n	80052a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005294:	7bbb      	ldrb	r3, [r7, #14]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d105      	bne.n	80052a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800529a:	7b7b      	ldrb	r3, [r7, #13]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d102      	bne.n	80052a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052a0:	7b3b      	ldrb	r3, [r7, #12]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d001      	beq.n	80052aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e03e      	b.n	8005328 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2202      	movs	r2, #2
 80052ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2202      	movs	r2, #2
 80052b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <HAL_TIM_Encoder_Start+0xc4>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d008      	beq.n	80052e8 <HAL_TIM_Encoder_Start+0xd4>
 80052d6:	e00f      	b.n	80052f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2201      	movs	r2, #1
 80052de:	2100      	movs	r1, #0
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fc99 	bl	8005c18 <TIM_CCxChannelCmd>
      break;
 80052e6:	e016      	b.n	8005316 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2201      	movs	r2, #1
 80052ee:	2104      	movs	r1, #4
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fc91 	bl	8005c18 <TIM_CCxChannelCmd>
      break;
 80052f6:	e00e      	b.n	8005316 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2201      	movs	r2, #1
 80052fe:	2100      	movs	r1, #0
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fc89 	bl	8005c18 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2201      	movs	r2, #1
 800530c:	2104      	movs	r1, #4
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fc82 	bl	8005c18 <TIM_CCxChannelCmd>
      break;
 8005314:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0201 	orr.w	r2, r2, #1
 8005324:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800534a:	2302      	movs	r3, #2
 800534c:	e0ae      	b.n	80054ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b0c      	cmp	r3, #12
 800535a:	f200 809f 	bhi.w	800549c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800535e:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	08005399 	.word	0x08005399
 8005368:	0800549d 	.word	0x0800549d
 800536c:	0800549d 	.word	0x0800549d
 8005370:	0800549d 	.word	0x0800549d
 8005374:	080053d9 	.word	0x080053d9
 8005378:	0800549d 	.word	0x0800549d
 800537c:	0800549d 	.word	0x0800549d
 8005380:	0800549d 	.word	0x0800549d
 8005384:	0800541b 	.word	0x0800541b
 8005388:	0800549d 	.word	0x0800549d
 800538c:	0800549d 	.word	0x0800549d
 8005390:	0800549d 	.word	0x0800549d
 8005394:	0800545b 	.word	0x0800545b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 f9f0 	bl	8005784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0208 	orr.w	r2, r2, #8
 80053b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0204 	bic.w	r2, r2, #4
 80053c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6999      	ldr	r1, [r3, #24]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	691a      	ldr	r2, [r3, #16]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	619a      	str	r2, [r3, #24]
      break;
 80053d6:	e064      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fa40 	bl	8005864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699a      	ldr	r2, [r3, #24]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6999      	ldr	r1, [r3, #24]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	021a      	lsls	r2, r3, #8
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	619a      	str	r2, [r3, #24]
      break;
 8005418:	e043      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fa95 	bl	8005950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0208 	orr.w	r2, r2, #8
 8005434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69da      	ldr	r2, [r3, #28]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0204 	bic.w	r2, r2, #4
 8005444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69d9      	ldr	r1, [r3, #28]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	61da      	str	r2, [r3, #28]
      break;
 8005458:	e023      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	4618      	mov	r0, r3
 8005462:	f000 fae9 	bl	8005a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69da      	ldr	r2, [r3, #28]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69d9      	ldr	r1, [r3, #28]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	021a      	lsls	r2, r3, #8
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	61da      	str	r2, [r3, #28]
      break;
 800549a:	e002      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	75fb      	strb	r3, [r7, #23]
      break;
 80054a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_TIM_ConfigClockSource+0x1c>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e0b4      	b.n	800563a <HAL_TIM_ConfigClockSource+0x186>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005508:	d03e      	beq.n	8005588 <HAL_TIM_ConfigClockSource+0xd4>
 800550a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550e:	f200 8087 	bhi.w	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005516:	f000 8086 	beq.w	8005626 <HAL_TIM_ConfigClockSource+0x172>
 800551a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551e:	d87f      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005520:	2b70      	cmp	r3, #112	; 0x70
 8005522:	d01a      	beq.n	800555a <HAL_TIM_ConfigClockSource+0xa6>
 8005524:	2b70      	cmp	r3, #112	; 0x70
 8005526:	d87b      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005528:	2b60      	cmp	r3, #96	; 0x60
 800552a:	d050      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x11a>
 800552c:	2b60      	cmp	r3, #96	; 0x60
 800552e:	d877      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005530:	2b50      	cmp	r3, #80	; 0x50
 8005532:	d03c      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0xfa>
 8005534:	2b50      	cmp	r3, #80	; 0x50
 8005536:	d873      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005538:	2b40      	cmp	r3, #64	; 0x40
 800553a:	d058      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x13a>
 800553c:	2b40      	cmp	r3, #64	; 0x40
 800553e:	d86f      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005540:	2b30      	cmp	r3, #48	; 0x30
 8005542:	d064      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 8005544:	2b30      	cmp	r3, #48	; 0x30
 8005546:	d86b      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005548:	2b20      	cmp	r3, #32
 800554a:	d060      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 800554c:	2b20      	cmp	r3, #32
 800554e:	d867      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005550:	2b00      	cmp	r3, #0
 8005552:	d05c      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 8005554:	2b10      	cmp	r3, #16
 8005556:	d05a      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 8005558:	e062      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6899      	ldr	r1, [r3, #8]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f000 fb35 	bl	8005bd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800557c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	609a      	str	r2, [r3, #8]
      break;
 8005586:	e04f      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	6899      	ldr	r1, [r3, #8]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f000 fb1e 	bl	8005bd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055aa:	609a      	str	r2, [r3, #8]
      break;
 80055ac:	e03c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f000 fa92 	bl	8005ae4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2150      	movs	r1, #80	; 0x50
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 faeb 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 80055cc:	e02c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	461a      	mov	r2, r3
 80055dc:	f000 fab1 	bl	8005b42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2160      	movs	r1, #96	; 0x60
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fadb 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 80055ec:	e01c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6859      	ldr	r1, [r3, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f000 fa72 	bl	8005ae4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2140      	movs	r1, #64	; 0x40
 8005606:	4618      	mov	r0, r3
 8005608:	f000 facb 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 800560c:	e00c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f000 fac2 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 800561e:	e003      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	73fb      	strb	r3, [r7, #15]
      break;
 8005624:	e000      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a40      	ldr	r2, [pc, #256]	; (8005758 <TIM_Base_SetConfig+0x114>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d013      	beq.n	8005684 <TIM_Base_SetConfig+0x40>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005662:	d00f      	beq.n	8005684 <TIM_Base_SetConfig+0x40>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a3d      	ldr	r2, [pc, #244]	; (800575c <TIM_Base_SetConfig+0x118>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00b      	beq.n	8005684 <TIM_Base_SetConfig+0x40>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a3c      	ldr	r2, [pc, #240]	; (8005760 <TIM_Base_SetConfig+0x11c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d007      	beq.n	8005684 <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a3b      	ldr	r2, [pc, #236]	; (8005764 <TIM_Base_SetConfig+0x120>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a3a      	ldr	r2, [pc, #232]	; (8005768 <TIM_Base_SetConfig+0x124>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d108      	bne.n	8005696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2f      	ldr	r2, [pc, #188]	; (8005758 <TIM_Base_SetConfig+0x114>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d02b      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a4:	d027      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2c      	ldr	r2, [pc, #176]	; (800575c <TIM_Base_SetConfig+0x118>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d023      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2b      	ldr	r2, [pc, #172]	; (8005760 <TIM_Base_SetConfig+0x11c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d01f      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2a      	ldr	r2, [pc, #168]	; (8005764 <TIM_Base_SetConfig+0x120>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d01b      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a29      	ldr	r2, [pc, #164]	; (8005768 <TIM_Base_SetConfig+0x124>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d017      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a28      	ldr	r2, [pc, #160]	; (800576c <TIM_Base_SetConfig+0x128>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a27      	ldr	r2, [pc, #156]	; (8005770 <TIM_Base_SetConfig+0x12c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00f      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a26      	ldr	r2, [pc, #152]	; (8005774 <TIM_Base_SetConfig+0x130>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00b      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a25      	ldr	r2, [pc, #148]	; (8005778 <TIM_Base_SetConfig+0x134>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d007      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a24      	ldr	r2, [pc, #144]	; (800577c <TIM_Base_SetConfig+0x138>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d003      	beq.n	80056f6 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a23      	ldr	r2, [pc, #140]	; (8005780 <TIM_Base_SetConfig+0x13c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d108      	bne.n	8005708 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a0a      	ldr	r2, [pc, #40]	; (8005758 <TIM_Base_SetConfig+0x114>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d003      	beq.n	800573c <TIM_Base_SetConfig+0xf8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a0c      	ldr	r2, [pc, #48]	; (8005768 <TIM_Base_SetConfig+0x124>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d103      	bne.n	8005744 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	615a      	str	r2, [r3, #20]
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40010000 	.word	0x40010000
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40010400 	.word	0x40010400
 800576c:	40014000 	.word	0x40014000
 8005770:	40014400 	.word	0x40014400
 8005774:	40014800 	.word	0x40014800
 8005778:	40001800 	.word	0x40001800
 800577c:	40001c00 	.word	0x40001c00
 8005780:	40002000 	.word	0x40002000

08005784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f023 0201 	bic.w	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0303 	bic.w	r3, r3, #3
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f023 0302 	bic.w	r3, r3, #2
 80057cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a20      	ldr	r2, [pc, #128]	; (800585c <TIM_OC1_SetConfig+0xd8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_OC1_SetConfig+0x64>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a1f      	ldr	r2, [pc, #124]	; (8005860 <TIM_OC1_SetConfig+0xdc>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d10c      	bne.n	8005802 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 0308 	bic.w	r3, r3, #8
 80057ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f023 0304 	bic.w	r3, r3, #4
 8005800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a15      	ldr	r2, [pc, #84]	; (800585c <TIM_OC1_SetConfig+0xd8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_OC1_SetConfig+0x8e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a14      	ldr	r2, [pc, #80]	; (8005860 <TIM_OC1_SetConfig+0xdc>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d111      	bne.n	8005836 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	621a      	str	r2, [r3, #32]
}
 8005850:	bf00      	nop
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	40010000 	.word	0x40010000
 8005860:	40010400 	.word	0x40010400

08005864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	f023 0210 	bic.w	r2, r3, #16
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800589a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f023 0320 	bic.w	r3, r3, #32
 80058ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a22      	ldr	r2, [pc, #136]	; (8005948 <TIM_OC2_SetConfig+0xe4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_OC2_SetConfig+0x68>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a21      	ldr	r2, [pc, #132]	; (800594c <TIM_OC2_SetConfig+0xe8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d10d      	bne.n	80058e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	011b      	lsls	r3, r3, #4
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a17      	ldr	r2, [pc, #92]	; (8005948 <TIM_OC2_SetConfig+0xe4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_OC2_SetConfig+0x94>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a16      	ldr	r2, [pc, #88]	; (800594c <TIM_OC2_SetConfig+0xe8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d113      	bne.n	8005920 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40010000 	.word	0x40010000
 800594c:	40010400 	.word	0x40010400

08005950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0303 	bic.w	r3, r3, #3
 8005986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a21      	ldr	r2, [pc, #132]	; (8005a30 <TIM_OC3_SetConfig+0xe0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d003      	beq.n	80059b6 <TIM_OC3_SetConfig+0x66>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a20      	ldr	r2, [pc, #128]	; (8005a34 <TIM_OC3_SetConfig+0xe4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d10d      	bne.n	80059d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a16      	ldr	r2, [pc, #88]	; (8005a30 <TIM_OC3_SetConfig+0xe0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_OC3_SetConfig+0x92>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a15      	ldr	r2, [pc, #84]	; (8005a34 <TIM_OC3_SetConfig+0xe4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d113      	bne.n	8005a0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	621a      	str	r2, [r3, #32]
}
 8005a24:	bf00      	nop
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	40010000 	.word	0x40010000
 8005a34:	40010400 	.word	0x40010400

08005a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	031b      	lsls	r3, r3, #12
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a12      	ldr	r2, [pc, #72]	; (8005adc <TIM_OC4_SetConfig+0xa4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_OC4_SetConfig+0x68>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a11      	ldr	r2, [pc, #68]	; (8005ae0 <TIM_OC4_SetConfig+0xa8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d109      	bne.n	8005ab4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	019b      	lsls	r3, r3, #6
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40010400 	.word	0x40010400

08005ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f023 0201 	bic.w	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f023 030a 	bic.w	r3, r3, #10
 8005b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b087      	sub	sp, #28
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f023 0210 	bic.w	r2, r3, #16
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	031b      	lsls	r3, r3, #12
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	621a      	str	r2, [r3, #32]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	f043 0307 	orr.w	r3, r3, #7
 8005bc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	609a      	str	r2, [r3, #8]
}
 8005bcc:	bf00      	nop
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	021a      	lsls	r2, r3, #8
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	609a      	str	r2, [r3, #8]
}
 8005c0c:	bf00      	nop
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a1a      	ldr	r2, [r3, #32]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	401a      	ands	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a1a      	ldr	r2, [r3, #32]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f003 031f 	and.w	r3, r3, #31
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c50:	431a      	orrs	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	621a      	str	r2, [r3, #32]
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e05a      	b.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a21      	ldr	r2, [pc, #132]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d022      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc8:	d01d      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1d      	ldr	r2, [pc, #116]	; (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d018      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a1a      	ldr	r2, [pc, #104]	; (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00e      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a18      	ldr	r2, [pc, #96]	; (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a17      	ldr	r2, [pc, #92]	; (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a15      	ldr	r2, [pc, #84]	; (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d10c      	bne.n	8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40010000 	.word	0x40010000
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	40000c00 	.word	0x40000c00
 8005d50:	40010400 	.word	0x40010400
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40001800 	.word	0x40001800

08005d5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e03d      	b.n	8005df4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e03f      	b.n	8005e92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fc faa4 	bl	8002374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2224      	movs	r2, #36	; 0x24
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fddf 	bl	8006a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b08a      	sub	sp, #40	; 0x28
 8005e9e:	af02      	add	r7, sp, #8
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	603b      	str	r3, [r7, #0]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	d17c      	bne.n	8005fb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_UART_Transmit+0x2c>
 8005ec0:	88fb      	ldrh	r3, [r7, #6]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e075      	b.n	8005fb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_UART_Transmit+0x3e>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e06e      	b.n	8005fb6 <HAL_UART_Transmit+0x11c>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2221      	movs	r2, #33	; 0x21
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eee:	f7fc fb97 	bl	8002620 <HAL_GetTick>
 8005ef2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	88fa      	ldrh	r2, [r7, #6]
 8005ef8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	88fa      	ldrh	r2, [r7, #6]
 8005efe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f08:	d108      	bne.n	8005f1c <HAL_UART_Transmit+0x82>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d104      	bne.n	8005f1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	e003      	b.n	8005f24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f2c:	e02a      	b.n	8005f84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2200      	movs	r2, #0
 8005f36:	2180      	movs	r1, #128	; 0x80
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 fb1f 	bl	800657c <UART_WaitOnFlagUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e036      	b.n	8005fb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10b      	bne.n	8005f66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	3302      	adds	r3, #2
 8005f62:	61bb      	str	r3, [r7, #24]
 8005f64:	e007      	b.n	8005f76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	781a      	ldrb	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	3301      	adds	r3, #1
 8005f74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1cf      	bne.n	8005f2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2200      	movs	r2, #0
 8005f96:	2140      	movs	r1, #64	; 0x40
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 faef 	bl	800657c <UART_WaitOnFlagUntilTimeout>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e006      	b.n	8005fb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e000      	b.n	8005fb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005fb4:	2302      	movs	r3, #2
  }
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3720      	adds	r7, #32
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	60b9      	str	r1, [r7, #8]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d11d      	bne.n	8006014 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_UART_Receive_IT+0x26>
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e016      	b.n	8006016 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_UART_Receive_IT+0x38>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e00f      	b.n	8006016 <HAL_UART_Receive_IT+0x58>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	461a      	mov	r2, r3
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 fb24 	bl	8006658 <UART_Start_Receive_IT>
 8006010:	4603      	mov	r3, r0
 8006012:	e000      	b.n	8006016 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006014:	2302      	movs	r3, #2
  }
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b0ba      	sub	sp, #232	; 0xe8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006046:	2300      	movs	r3, #0
 8006048:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800604c:	2300      	movs	r3, #0
 800604e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800605e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10f      	bne.n	8006086 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <HAL_UART_IRQHandler+0x66>
 8006072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006076:	f003 0320 	and.w	r3, r3, #32
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fc07 	bl	8006892 <UART_Receive_IT>
      return;
 8006084:	e256      	b.n	8006534 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 80de 	beq.w	800624c <HAL_UART_IRQHandler+0x22c>
 8006090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800609c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80d1 	beq.w	800624c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00b      	beq.n	80060ce <HAL_UART_IRQHandler+0xae>
 80060b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	f043 0201 	orr.w	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00b      	beq.n	80060f2 <HAL_UART_IRQHandler+0xd2>
 80060da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f043 0202 	orr.w	r2, r3, #2
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00b      	beq.n	8006116 <HAL_UART_IRQHandler+0xf6>
 80060fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	f043 0204 	orr.w	r2, r3, #4
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d011      	beq.n	8006146 <HAL_UART_IRQHandler+0x126>
 8006122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b00      	cmp	r3, #0
 800612c:	d105      	bne.n	800613a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800612e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	f043 0208 	orr.w	r2, r3, #8
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 81ed 	beq.w	800652a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006154:	f003 0320 	and.w	r3, r3, #32
 8006158:	2b00      	cmp	r3, #0
 800615a:	d008      	beq.n	800616e <HAL_UART_IRQHandler+0x14e>
 800615c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fb92 	bl	8006892 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006178:	2b40      	cmp	r3, #64	; 0x40
 800617a:	bf0c      	ite	eq
 800617c:	2301      	moveq	r3, #1
 800617e:	2300      	movne	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <HAL_UART_IRQHandler+0x17a>
 8006192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006196:	2b00      	cmp	r3, #0
 8006198:	d04f      	beq.n	800623a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fa9a 	bl	80066d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061aa:	2b40      	cmp	r3, #64	; 0x40
 80061ac:	d141      	bne.n	8006232 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3314      	adds	r3, #20
 80061b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3314      	adds	r3, #20
 80061d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1d9      	bne.n	80061ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d013      	beq.n	800622a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006206:	4a7d      	ldr	r2, [pc, #500]	; (80063fc <HAL_UART_IRQHandler+0x3dc>)
 8006208:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	4618      	mov	r0, r3
 8006210:	f7fc ffb7 	bl	8003182 <HAL_DMA_Abort_IT>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d016      	beq.n	8006248 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006224:	4610      	mov	r0, r2
 8006226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006228:	e00e      	b.n	8006248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f990 	bl	8006550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006230:	e00a      	b.n	8006248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f98c 	bl	8006550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006238:	e006      	b.n	8006248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f988 	bl	8006550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006246:	e170      	b.n	800652a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006248:	bf00      	nop
    return;
 800624a:	e16e      	b.n	800652a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006250:	2b01      	cmp	r3, #1
 8006252:	f040 814a 	bne.w	80064ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 8143 	beq.w	80064ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 813c 	beq.w	80064ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006272:	2300      	movs	r3, #0
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	60bb      	str	r3, [r7, #8]
 8006286:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006292:	2b40      	cmp	r3, #64	; 0x40
 8006294:	f040 80b4 	bne.w	8006400 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8140 	beq.w	800652e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062b6:	429a      	cmp	r2, r3
 80062b8:	f080 8139 	bcs.w	800652e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ce:	f000 8088 	beq.w	80063e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	330c      	adds	r3, #12
 80062d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	330c      	adds	r3, #12
 80062fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80062fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800630a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1d9      	bne.n	80062d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3314      	adds	r3, #20
 8006324:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800632e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3314      	adds	r3, #20
 800633e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006342:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006346:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800634a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e1      	bne.n	800631e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3314      	adds	r3, #20
 8006360:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800636a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800636c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3314      	adds	r3, #20
 800637a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800637e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006380:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006384:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800638c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e3      	bne.n	800635a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b2:	f023 0310 	bic.w	r3, r3, #16
 80063b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	330c      	adds	r3, #12
 80063c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80063c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80063c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e3      	bne.n	80063a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fc fe60 	bl	80030a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f8b6 	bl	8006564 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063f8:	e099      	b.n	800652e <HAL_UART_IRQHandler+0x50e>
 80063fa:	bf00      	nop
 80063fc:	0800679b 	.word	0x0800679b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006408:	b29b      	uxth	r3, r3
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	f000 808b 	beq.w	8006532 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800641c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8086 	beq.w	8006532 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800643c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	330c      	adds	r3, #12
 8006446:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800644a:	647a      	str	r2, [r7, #68]	; 0x44
 800644c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e3      	bne.n	8006426 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3314      	adds	r3, #20
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	623b      	str	r3, [r7, #32]
   return(result);
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3314      	adds	r3, #20
 800647e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006482:	633a      	str	r2, [r7, #48]	; 0x30
 8006484:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e3      	bne.n	800645e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	330c      	adds	r3, #12
 80064aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0310 	bic.w	r3, r3, #16
 80064ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	330c      	adds	r3, #12
 80064c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80064c8:	61fa      	str	r2, [r7, #28]
 80064ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	69b9      	ldr	r1, [r7, #24]
 80064ce:	69fa      	ldr	r2, [r7, #28]
 80064d0:	e841 2300 	strex	r3, r2, [r1]
 80064d4:	617b      	str	r3, [r7, #20]
   return(result);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e3      	bne.n	80064a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f83e 	bl	8006564 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064e8:	e023      	b.n	8006532 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d009      	beq.n	800650a <HAL_UART_IRQHandler+0x4ea>
 80064f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f95d 	bl	80067c2 <UART_Transmit_IT>
    return;
 8006508:	e014      	b.n	8006534 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800650a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800650e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00e      	beq.n	8006534 <HAL_UART_IRQHandler+0x514>
 8006516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800651a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651e:	2b00      	cmp	r3, #0
 8006520:	d008      	beq.n	8006534 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f99d 	bl	8006862 <UART_EndTransmit_IT>
    return;
 8006528:	e004      	b.n	8006534 <HAL_UART_IRQHandler+0x514>
    return;
 800652a:	bf00      	nop
 800652c:	e002      	b.n	8006534 <HAL_UART_IRQHandler+0x514>
      return;
 800652e:	bf00      	nop
 8006530:	e000      	b.n	8006534 <HAL_UART_IRQHandler+0x514>
      return;
 8006532:	bf00      	nop
  }
}
 8006534:	37e8      	adds	r7, #232	; 0xe8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop

0800653c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b090      	sub	sp, #64	; 0x40
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	603b      	str	r3, [r7, #0]
 8006588:	4613      	mov	r3, r2
 800658a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800658c:	e050      	b.n	8006630 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800658e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006594:	d04c      	beq.n	8006630 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006598:	2b00      	cmp	r3, #0
 800659a:	d007      	beq.n	80065ac <UART_WaitOnFlagUntilTimeout+0x30>
 800659c:	f7fc f840 	bl	8002620 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d241      	bcs.n	8006630 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	330c      	adds	r3, #12
 80065b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	e853 3f00 	ldrex	r3, [r3]
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	330c      	adds	r3, #12
 80065ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065cc:	637a      	str	r2, [r7, #52]	; 0x34
 80065ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065d4:	e841 2300 	strex	r3, r2, [r1]
 80065d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e5      	bne.n	80065ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3314      	adds	r3, #20
 80065e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	613b      	str	r3, [r7, #16]
   return(result);
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f023 0301 	bic.w	r3, r3, #1
 80065f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3314      	adds	r3, #20
 80065fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006600:	623a      	str	r2, [r7, #32]
 8006602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	69f9      	ldr	r1, [r7, #28]
 8006606:	6a3a      	ldr	r2, [r7, #32]
 8006608:	e841 2300 	strex	r3, r2, [r1]
 800660c:	61bb      	str	r3, [r7, #24]
   return(result);
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e5      	bne.n	80065e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2220      	movs	r2, #32
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2220      	movs	r2, #32
 8006620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e00f      	b.n	8006650 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	4013      	ands	r3, r2
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	429a      	cmp	r2, r3
 800663e:	bf0c      	ite	eq
 8006640:	2301      	moveq	r3, #1
 8006642:	2300      	movne	r3, #0
 8006644:	b2db      	uxtb	r3, r3
 8006646:	461a      	mov	r2, r3
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	429a      	cmp	r2, r3
 800664c:	d09f      	beq.n	800658e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3740      	adds	r7, #64	; 0x40
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	4613      	mov	r3, r2
 8006664:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	88fa      	ldrh	r2, [r7, #6]
 8006670:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	88fa      	ldrh	r2, [r7, #6]
 8006676:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2222      	movs	r2, #34	; 0x22
 8006682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d007      	beq.n	80066a6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695a      	ldr	r2, [r3, #20]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f042 0201 	orr.w	r2, r2, #1
 80066b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0220 	orr.w	r2, r2, #32
 80066c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b095      	sub	sp, #84	; 0x54
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	330c      	adds	r3, #12
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	330c      	adds	r3, #12
 80066fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066fc:	643a      	str	r2, [r7, #64]	; 0x40
 80066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006702:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e5      	bne.n	80066dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3314      	adds	r3, #20
 8006716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f023 0301 	bic.w	r3, r3, #1
 8006726:	64bb      	str	r3, [r7, #72]	; 0x48
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3314      	adds	r3, #20
 800672e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006730:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e5      	bne.n	8006710 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006748:	2b01      	cmp	r3, #1
 800674a:	d119      	bne.n	8006780 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	330c      	adds	r3, #12
 8006752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	e853 3f00 	ldrex	r3, [r3]
 800675a:	60bb      	str	r3, [r7, #8]
   return(result);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f023 0310 	bic.w	r3, r3, #16
 8006762:	647b      	str	r3, [r7, #68]	; 0x44
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	330c      	adds	r3, #12
 800676a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800676c:	61ba      	str	r2, [r7, #24]
 800676e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006770:	6979      	ldr	r1, [r7, #20]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	e841 2300 	strex	r3, r2, [r1]
 8006778:	613b      	str	r3, [r7, #16]
   return(result);
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e5      	bne.n	800674c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800678e:	bf00      	nop
 8006790:	3754      	adds	r7, #84	; 0x54
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7ff fecb 	bl	8006550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ba:	bf00      	nop
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b085      	sub	sp, #20
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b21      	cmp	r3, #33	; 0x21
 80067d4:	d13e      	bne.n	8006854 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067de:	d114      	bne.n	800680a <UART_Transmit_IT+0x48>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d110      	bne.n	800680a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	1c9a      	adds	r2, r3, #2
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	621a      	str	r2, [r3, #32]
 8006808:	e008      	b.n	800681c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	1c59      	adds	r1, r3, #1
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6211      	str	r1, [r2, #32]
 8006814:	781a      	ldrb	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29b      	uxth	r3, r3
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	4619      	mov	r1, r3
 800682a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10f      	bne.n	8006850 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800683e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800684e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	e000      	b.n	8006856 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006854:	2302      	movs	r3, #2
  }
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006878:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7ff fe5a 	bl	800653c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b08c      	sub	sp, #48	; 0x30
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b22      	cmp	r3, #34	; 0x22
 80068a4:	f040 80ab 	bne.w	80069fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b0:	d117      	bne.n	80068e2 <UART_Receive_IT+0x50>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d113      	bne.n	80068e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068da:	1c9a      	adds	r2, r3, #2
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	629a      	str	r2, [r3, #40]	; 0x28
 80068e0:	e026      	b.n	8006930 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80068e8:	2300      	movs	r3, #0
 80068ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f4:	d007      	beq.n	8006906 <UART_Receive_IT+0x74>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <UART_Receive_IT+0x82>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d106      	bne.n	8006914 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	b2da      	uxtb	r2, r3
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	e008      	b.n	8006926 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006920:	b2da      	uxtb	r2, r3
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	b29b      	uxth	r3, r3
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	4619      	mov	r1, r3
 800693e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006940:	2b00      	cmp	r3, #0
 8006942:	d15a      	bne.n	80069fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0220 	bic.w	r2, r2, #32
 8006952:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68da      	ldr	r2, [r3, #12]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006962:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695a      	ldr	r2, [r3, #20]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0201 	bic.w	r2, r2, #1
 8006972:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	2b01      	cmp	r3, #1
 8006982:	d135      	bne.n	80069f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	330c      	adds	r3, #12
 8006990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	613b      	str	r3, [r7, #16]
   return(result);
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f023 0310 	bic.w	r3, r3, #16
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	330c      	adds	r3, #12
 80069a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069aa:	623a      	str	r2, [r7, #32]
 80069ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	69f9      	ldr	r1, [r7, #28]
 80069b0:	6a3a      	ldr	r2, [r7, #32]
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e5      	bne.n	800698a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b10      	cmp	r3, #16
 80069ca:	d10a      	bne.n	80069e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff fdbb 	bl	8006564 <HAL_UARTEx_RxEventCallback>
 80069ee:	e002      	b.n	80069f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7fa fe55 	bl	80016a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e002      	b.n	8006a00 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	e000      	b.n	8006a00 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80069fe:	2302      	movs	r3, #2
  }
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3730      	adds	r7, #48	; 0x30
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a0c:	b0c0      	sub	sp, #256	; 0x100
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a24:	68d9      	ldr	r1, [r3, #12]
 8006a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	ea40 0301 	orr.w	r3, r0, r1
 8006a30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	431a      	orrs	r2, r3
 8006a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a60:	f021 010c 	bic.w	r1, r1, #12
 8006a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a6e:	430b      	orrs	r3, r1
 8006a70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a82:	6999      	ldr	r1, [r3, #24]
 8006a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	ea40 0301 	orr.w	r3, r0, r1
 8006a8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	4b8f      	ldr	r3, [pc, #572]	; (8006cd4 <UART_SetConfig+0x2cc>)
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d005      	beq.n	8006aa8 <UART_SetConfig+0xa0>
 8006a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	4b8d      	ldr	r3, [pc, #564]	; (8006cd8 <UART_SetConfig+0x2d0>)
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d104      	bne.n	8006ab2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006aa8:	f7fe f98a 	bl	8004dc0 <HAL_RCC_GetPCLK2Freq>
 8006aac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ab0:	e003      	b.n	8006aba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ab2:	f7fe f971 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8006ab6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ac4:	f040 810c 	bne.w	8006ce0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006acc:	2200      	movs	r2, #0
 8006ace:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ad2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006ad6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006ada:	4622      	mov	r2, r4
 8006adc:	462b      	mov	r3, r5
 8006ade:	1891      	adds	r1, r2, r2
 8006ae0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ae2:	415b      	adcs	r3, r3
 8006ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ae6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006aea:	4621      	mov	r1, r4
 8006aec:	eb12 0801 	adds.w	r8, r2, r1
 8006af0:	4629      	mov	r1, r5
 8006af2:	eb43 0901 	adc.w	r9, r3, r1
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	f04f 0300 	mov.w	r3, #0
 8006afe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b0a:	4690      	mov	r8, r2
 8006b0c:	4699      	mov	r9, r3
 8006b0e:	4623      	mov	r3, r4
 8006b10:	eb18 0303 	adds.w	r3, r8, r3
 8006b14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b18:	462b      	mov	r3, r5
 8006b1a:	eb49 0303 	adc.w	r3, r9, r3
 8006b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006b32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b36:	460b      	mov	r3, r1
 8006b38:	18db      	adds	r3, r3, r3
 8006b3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	eb42 0303 	adc.w	r3, r2, r3
 8006b42:	657b      	str	r3, [r7, #84]	; 0x54
 8006b44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b4c:	f7fa f844 	bl	8000bd8 <__aeabi_uldivmod>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4b61      	ldr	r3, [pc, #388]	; (8006cdc <UART_SetConfig+0x2d4>)
 8006b56:	fba3 2302 	umull	r2, r3, r3, r2
 8006b5a:	095b      	lsrs	r3, r3, #5
 8006b5c:	011c      	lsls	r4, r3, #4
 8006b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b70:	4642      	mov	r2, r8
 8006b72:	464b      	mov	r3, r9
 8006b74:	1891      	adds	r1, r2, r2
 8006b76:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b78:	415b      	adcs	r3, r3
 8006b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b80:	4641      	mov	r1, r8
 8006b82:	eb12 0a01 	adds.w	sl, r2, r1
 8006b86:	4649      	mov	r1, r9
 8006b88:	eb43 0b01 	adc.w	fp, r3, r1
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ba0:	4692      	mov	sl, r2
 8006ba2:	469b      	mov	fp, r3
 8006ba4:	4643      	mov	r3, r8
 8006ba6:	eb1a 0303 	adds.w	r3, sl, r3
 8006baa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bae:	464b      	mov	r3, r9
 8006bb0:	eb4b 0303 	adc.w	r3, fp, r3
 8006bb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006bc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	18db      	adds	r3, r3, r3
 8006bd0:	643b      	str	r3, [r7, #64]	; 0x40
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	eb42 0303 	adc.w	r3, r2, r3
 8006bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8006bda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006bde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006be2:	f7f9 fff9 	bl	8000bd8 <__aeabi_uldivmod>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	4611      	mov	r1, r2
 8006bec:	4b3b      	ldr	r3, [pc, #236]	; (8006cdc <UART_SetConfig+0x2d4>)
 8006bee:	fba3 2301 	umull	r2, r3, r3, r1
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	2264      	movs	r2, #100	; 0x64
 8006bf6:	fb02 f303 	mul.w	r3, r2, r3
 8006bfa:	1acb      	subs	r3, r1, r3
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c02:	4b36      	ldr	r3, [pc, #216]	; (8006cdc <UART_SetConfig+0x2d4>)
 8006c04:	fba3 2302 	umull	r2, r3, r3, r2
 8006c08:	095b      	lsrs	r3, r3, #5
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c10:	441c      	add	r4, r3
 8006c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006c20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006c24:	4642      	mov	r2, r8
 8006c26:	464b      	mov	r3, r9
 8006c28:	1891      	adds	r1, r2, r2
 8006c2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c2c:	415b      	adcs	r3, r3
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c34:	4641      	mov	r1, r8
 8006c36:	1851      	adds	r1, r2, r1
 8006c38:	6339      	str	r1, [r7, #48]	; 0x30
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	414b      	adcs	r3, r1
 8006c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c4c:	4659      	mov	r1, fp
 8006c4e:	00cb      	lsls	r3, r1, #3
 8006c50:	4651      	mov	r1, sl
 8006c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c56:	4651      	mov	r1, sl
 8006c58:	00ca      	lsls	r2, r1, #3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4603      	mov	r3, r0
 8006c60:	4642      	mov	r2, r8
 8006c62:	189b      	adds	r3, r3, r2
 8006c64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c68:	464b      	mov	r3, r9
 8006c6a:	460a      	mov	r2, r1
 8006c6c:	eb42 0303 	adc.w	r3, r2, r3
 8006c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c88:	460b      	mov	r3, r1
 8006c8a:	18db      	adds	r3, r3, r3
 8006c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c8e:	4613      	mov	r3, r2
 8006c90:	eb42 0303 	adc.w	r3, r2, r3
 8006c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c9e:	f7f9 ff9b 	bl	8000bd8 <__aeabi_uldivmod>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4b0d      	ldr	r3, [pc, #52]	; (8006cdc <UART_SetConfig+0x2d4>)
 8006ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8006cac:	095b      	lsrs	r3, r3, #5
 8006cae:	2164      	movs	r1, #100	; 0x64
 8006cb0:	fb01 f303 	mul.w	r3, r1, r3
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	3332      	adds	r3, #50	; 0x32
 8006cba:	4a08      	ldr	r2, [pc, #32]	; (8006cdc <UART_SetConfig+0x2d4>)
 8006cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc0:	095b      	lsrs	r3, r3, #5
 8006cc2:	f003 0207 	and.w	r2, r3, #7
 8006cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4422      	add	r2, r4
 8006cce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cd0:	e105      	b.n	8006ede <UART_SetConfig+0x4d6>
 8006cd2:	bf00      	nop
 8006cd4:	40011000 	.word	0x40011000
 8006cd8:	40011400 	.word	0x40011400
 8006cdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006cea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006cee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006cf2:	4642      	mov	r2, r8
 8006cf4:	464b      	mov	r3, r9
 8006cf6:	1891      	adds	r1, r2, r2
 8006cf8:	6239      	str	r1, [r7, #32]
 8006cfa:	415b      	adcs	r3, r3
 8006cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d02:	4641      	mov	r1, r8
 8006d04:	1854      	adds	r4, r2, r1
 8006d06:	4649      	mov	r1, r9
 8006d08:	eb43 0501 	adc.w	r5, r3, r1
 8006d0c:	f04f 0200 	mov.w	r2, #0
 8006d10:	f04f 0300 	mov.w	r3, #0
 8006d14:	00eb      	lsls	r3, r5, #3
 8006d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d1a:	00e2      	lsls	r2, r4, #3
 8006d1c:	4614      	mov	r4, r2
 8006d1e:	461d      	mov	r5, r3
 8006d20:	4643      	mov	r3, r8
 8006d22:	18e3      	adds	r3, r4, r3
 8006d24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d28:	464b      	mov	r3, r9
 8006d2a:	eb45 0303 	adc.w	r3, r5, r3
 8006d2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	f04f 0300 	mov.w	r3, #0
 8006d4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d4e:	4629      	mov	r1, r5
 8006d50:	008b      	lsls	r3, r1, #2
 8006d52:	4621      	mov	r1, r4
 8006d54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d58:	4621      	mov	r1, r4
 8006d5a:	008a      	lsls	r2, r1, #2
 8006d5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d60:	f7f9 ff3a 	bl	8000bd8 <__aeabi_uldivmod>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	4b60      	ldr	r3, [pc, #384]	; (8006eec <UART_SetConfig+0x4e4>)
 8006d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d6e:	095b      	lsrs	r3, r3, #5
 8006d70:	011c      	lsls	r4, r3, #4
 8006d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d84:	4642      	mov	r2, r8
 8006d86:	464b      	mov	r3, r9
 8006d88:	1891      	adds	r1, r2, r2
 8006d8a:	61b9      	str	r1, [r7, #24]
 8006d8c:	415b      	adcs	r3, r3
 8006d8e:	61fb      	str	r3, [r7, #28]
 8006d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d94:	4641      	mov	r1, r8
 8006d96:	1851      	adds	r1, r2, r1
 8006d98:	6139      	str	r1, [r7, #16]
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	414b      	adcs	r3, r1
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	f04f 0200 	mov.w	r2, #0
 8006da4:	f04f 0300 	mov.w	r3, #0
 8006da8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006dac:	4659      	mov	r1, fp
 8006dae:	00cb      	lsls	r3, r1, #3
 8006db0:	4651      	mov	r1, sl
 8006db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006db6:	4651      	mov	r1, sl
 8006db8:	00ca      	lsls	r2, r1, #3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	189b      	adds	r3, r3, r2
 8006dc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006dc8:	464b      	mov	r3, r9
 8006dca:	460a      	mov	r2, r1
 8006dcc:	eb42 0303 	adc.w	r3, r2, r3
 8006dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006dde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	f04f 0300 	mov.w	r3, #0
 8006de8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006dec:	4649      	mov	r1, r9
 8006dee:	008b      	lsls	r3, r1, #2
 8006df0:	4641      	mov	r1, r8
 8006df2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006df6:	4641      	mov	r1, r8
 8006df8:	008a      	lsls	r2, r1, #2
 8006dfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006dfe:	f7f9 feeb 	bl	8000bd8 <__aeabi_uldivmod>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	4b39      	ldr	r3, [pc, #228]	; (8006eec <UART_SetConfig+0x4e4>)
 8006e08:	fba3 1302 	umull	r1, r3, r3, r2
 8006e0c:	095b      	lsrs	r3, r3, #5
 8006e0e:	2164      	movs	r1, #100	; 0x64
 8006e10:	fb01 f303 	mul.w	r3, r1, r3
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	3332      	adds	r3, #50	; 0x32
 8006e1a:	4a34      	ldr	r2, [pc, #208]	; (8006eec <UART_SetConfig+0x4e4>)
 8006e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e20:	095b      	lsrs	r3, r3, #5
 8006e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e26:	441c      	add	r4, r3
 8006e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	673b      	str	r3, [r7, #112]	; 0x70
 8006e30:	677a      	str	r2, [r7, #116]	; 0x74
 8006e32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e36:	4642      	mov	r2, r8
 8006e38:	464b      	mov	r3, r9
 8006e3a:	1891      	adds	r1, r2, r2
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	415b      	adcs	r3, r3
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e46:	4641      	mov	r1, r8
 8006e48:	1851      	adds	r1, r2, r1
 8006e4a:	6039      	str	r1, [r7, #0]
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	414b      	adcs	r3, r1
 8006e50:	607b      	str	r3, [r7, #4]
 8006e52:	f04f 0200 	mov.w	r2, #0
 8006e56:	f04f 0300 	mov.w	r3, #0
 8006e5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e5e:	4659      	mov	r1, fp
 8006e60:	00cb      	lsls	r3, r1, #3
 8006e62:	4651      	mov	r1, sl
 8006e64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e68:	4651      	mov	r1, sl
 8006e6a:	00ca      	lsls	r2, r1, #3
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4603      	mov	r3, r0
 8006e72:	4642      	mov	r2, r8
 8006e74:	189b      	adds	r3, r3, r2
 8006e76:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e78:	464b      	mov	r3, r9
 8006e7a:	460a      	mov	r2, r1
 8006e7c:	eb42 0303 	adc.w	r3, r2, r3
 8006e80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	663b      	str	r3, [r7, #96]	; 0x60
 8006e8c:	667a      	str	r2, [r7, #100]	; 0x64
 8006e8e:	f04f 0200 	mov.w	r2, #0
 8006e92:	f04f 0300 	mov.w	r3, #0
 8006e96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	008b      	lsls	r3, r1, #2
 8006e9e:	4641      	mov	r1, r8
 8006ea0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ea4:	4641      	mov	r1, r8
 8006ea6:	008a      	lsls	r2, r1, #2
 8006ea8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006eac:	f7f9 fe94 	bl	8000bd8 <__aeabi_uldivmod>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4b0d      	ldr	r3, [pc, #52]	; (8006eec <UART_SetConfig+0x4e4>)
 8006eb6:	fba3 1302 	umull	r1, r3, r3, r2
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	2164      	movs	r1, #100	; 0x64
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	3332      	adds	r3, #50	; 0x32
 8006ec8:	4a08      	ldr	r2, [pc, #32]	; (8006eec <UART_SetConfig+0x4e4>)
 8006eca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	f003 020f 	and.w	r2, r3, #15
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4422      	add	r2, r4
 8006edc:	609a      	str	r2, [r3, #8]
}
 8006ede:	bf00      	nop
 8006ee0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eea:	bf00      	nop
 8006eec:	51eb851f 	.word	0x51eb851f

08006ef0 <__NVIC_SetPriority>:
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	6039      	str	r1, [r7, #0]
 8006efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	db0a      	blt.n	8006f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	490c      	ldr	r1, [pc, #48]	; (8006f3c <__NVIC_SetPriority+0x4c>)
 8006f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f0e:	0112      	lsls	r2, r2, #4
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	440b      	add	r3, r1
 8006f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f18:	e00a      	b.n	8006f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	4908      	ldr	r1, [pc, #32]	; (8006f40 <__NVIC_SetPriority+0x50>)
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	3b04      	subs	r3, #4
 8006f28:	0112      	lsls	r2, r2, #4
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	761a      	strb	r2, [r3, #24]
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	e000e100 	.word	0xe000e100
 8006f40:	e000ed00 	.word	0xe000ed00

08006f44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006f48:	2100      	movs	r1, #0
 8006f4a:	f06f 0004 	mvn.w	r0, #4
 8006f4e:	f7ff ffcf 	bl	8006ef0 <__NVIC_SetPriority>
#endif
}
 8006f52:	bf00      	nop
 8006f54:	bd80      	pop	{r7, pc}
	...

08006f58 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f5e:	f3ef 8305 	mrs	r3, IPSR
 8006f62:	603b      	str	r3, [r7, #0]
  return(result);
 8006f64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006f6a:	f06f 0305 	mvn.w	r3, #5
 8006f6e:	607b      	str	r3, [r7, #4]
 8006f70:	e00c      	b.n	8006f8c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f72:	4b0a      	ldr	r3, [pc, #40]	; (8006f9c <osKernelInitialize+0x44>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d105      	bne.n	8006f86 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f7a:	4b08      	ldr	r3, [pc, #32]	; (8006f9c <osKernelInitialize+0x44>)
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	607b      	str	r3, [r7, #4]
 8006f84:	e002      	b.n	8006f8c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006f86:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f8c:	687b      	ldr	r3, [r7, #4]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	200002f4 	.word	0x200002f4

08006fa0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fa6:	f3ef 8305 	mrs	r3, IPSR
 8006faa:	603b      	str	r3, [r7, #0]
  return(result);
 8006fac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <osKernelStart+0x1a>
    stat = osErrorISR;
 8006fb2:	f06f 0305 	mvn.w	r3, #5
 8006fb6:	607b      	str	r3, [r7, #4]
 8006fb8:	e010      	b.n	8006fdc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006fba:	4b0b      	ldr	r3, [pc, #44]	; (8006fe8 <osKernelStart+0x48>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d109      	bne.n	8006fd6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006fc2:	f7ff ffbf 	bl	8006f44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006fc6:	4b08      	ldr	r3, [pc, #32]	; (8006fe8 <osKernelStart+0x48>)
 8006fc8:	2202      	movs	r2, #2
 8006fca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006fcc:	f001 f866 	bl	800809c <vTaskStartScheduler>
      stat = osOK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	607b      	str	r3, [r7, #4]
 8006fd4:	e002      	b.n	8006fdc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006fdc:	687b      	ldr	r3, [r7, #4]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	200002f4 	.word	0x200002f4

08006fec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08e      	sub	sp, #56	; 0x38
 8006ff0:	af04      	add	r7, sp, #16
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ffc:	f3ef 8305 	mrs	r3, IPSR
 8007000:	617b      	str	r3, [r7, #20]
  return(result);
 8007002:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007004:	2b00      	cmp	r3, #0
 8007006:	d17e      	bne.n	8007106 <osThreadNew+0x11a>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d07b      	beq.n	8007106 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800700e:	2380      	movs	r3, #128	; 0x80
 8007010:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007012:	2318      	movs	r3, #24
 8007014:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007016:	2300      	movs	r3, #0
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800701a:	f04f 33ff 	mov.w	r3, #4294967295
 800701e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d045      	beq.n	80070b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <osThreadNew+0x48>
        name = attr->name;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d008      	beq.n	800705a <osThreadNew+0x6e>
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	2b38      	cmp	r3, #56	; 0x38
 800704c:	d805      	bhi.n	800705a <osThreadNew+0x6e>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <osThreadNew+0x72>
        return (NULL);
 800705a:	2300      	movs	r3, #0
 800705c:	e054      	b.n	8007108 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	089b      	lsrs	r3, r3, #2
 800706c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00e      	beq.n	8007094 <osThreadNew+0xa8>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	2b5b      	cmp	r3, #91	; 0x5b
 800707c:	d90a      	bls.n	8007094 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007082:	2b00      	cmp	r3, #0
 8007084:	d006      	beq.n	8007094 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <osThreadNew+0xa8>
        mem = 1;
 800708e:	2301      	movs	r3, #1
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	e010      	b.n	80070b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10c      	bne.n	80070b6 <osThreadNew+0xca>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d108      	bne.n	80070b6 <osThreadNew+0xca>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d104      	bne.n	80070b6 <osThreadNew+0xca>
          mem = 0;
 80070ac:	2300      	movs	r3, #0
 80070ae:	61bb      	str	r3, [r7, #24]
 80070b0:	e001      	b.n	80070b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d110      	bne.n	80070de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070c4:	9202      	str	r2, [sp, #8]
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	6a3a      	ldr	r2, [r7, #32]
 80070d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 fe0c 	bl	8007cf0 <xTaskCreateStatic>
 80070d8:	4603      	mov	r3, r0
 80070da:	613b      	str	r3, [r7, #16]
 80070dc:	e013      	b.n	8007106 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d110      	bne.n	8007106 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	f107 0310 	add.w	r3, r7, #16
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 fe57 	bl	8007daa <xTaskCreate>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d001      	beq.n	8007106 <osThreadNew+0x11a>
            hTask = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007106:	693b      	ldr	r3, [r7, #16]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3728      	adds	r7, #40	; 0x28
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007118:	f3ef 8305 	mrs	r3, IPSR
 800711c:	60bb      	str	r3, [r7, #8]
  return(result);
 800711e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <osDelay+0x1c>
    stat = osErrorISR;
 8007124:	f06f 0305 	mvn.w	r3, #5
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	e007      	b.n	800713c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 ff7c 	bl	8008034 <vTaskDelay>
    }
  }

  return (stat);
 800713c:	68fb      	ldr	r3, [r7, #12]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4a07      	ldr	r2, [pc, #28]	; (8007174 <vApplicationGetIdleTaskMemory+0x2c>)
 8007158:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	4a06      	ldr	r2, [pc, #24]	; (8007178 <vApplicationGetIdleTaskMemory+0x30>)
 800715e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2280      	movs	r2, #128	; 0x80
 8007164:	601a      	str	r2, [r3, #0]
}
 8007166:	bf00      	nop
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	200002f8 	.word	0x200002f8
 8007178:	20000354 	.word	0x20000354

0800717c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4a07      	ldr	r2, [pc, #28]	; (80071a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800718c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	4a06      	ldr	r2, [pc, #24]	; (80071ac <vApplicationGetTimerTaskMemory+0x30>)
 8007192:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800719a:	601a      	str	r2, [r3, #0]
}
 800719c:	bf00      	nop
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	20000554 	.word	0x20000554
 80071ac:	200005b0 	.word	0x200005b0

080071b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f103 0208 	add.w	r2, r3, #8
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f04f 32ff 	mov.w	r2, #4294967295
 80071c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f103 0208 	add.w	r2, r3, #8
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f103 0208 	add.w	r2, r3, #8
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800720a:	b480      	push	{r7}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	601a      	str	r2, [r3, #0]
}
 8007246:	bf00      	nop
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007252:	b480      	push	{r7}
 8007254:	b085      	sub	sp, #20
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007268:	d103      	bne.n	8007272 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	e00c      	b.n	800728c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3308      	adds	r3, #8
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	e002      	b.n	8007280 <vListInsert+0x2e>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	429a      	cmp	r2, r3
 800728a:	d2f6      	bcs.n	800727a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	601a      	str	r2, [r3, #0]
}
 80072b8:	bf00      	nop
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	6892      	ldr	r2, [r2, #8]
 80072da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6852      	ldr	r2, [r2, #4]
 80072e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d103      	bne.n	80072f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689a      	ldr	r2, [r3, #8]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	1e5a      	subs	r2, r3, #1
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10a      	bne.n	8007342 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007342:	f002 f84f 	bl	80093e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734e:	68f9      	ldr	r1, [r7, #12]
 8007350:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007352:	fb01 f303 	mul.w	r3, r1, r3
 8007356:	441a      	add	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007372:	3b01      	subs	r3, #1
 8007374:	68f9      	ldr	r1, [r7, #12]
 8007376:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007378:	fb01 f303 	mul.w	r3, r1, r3
 800737c:	441a      	add	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	22ff      	movs	r2, #255	; 0xff
 8007386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	22ff      	movs	r2, #255	; 0xff
 800738e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d114      	bne.n	80073c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01a      	beq.n	80073d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3310      	adds	r3, #16
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 f903 	bl	80085b0 <xTaskRemoveFromEventList>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d012      	beq.n	80073d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073b0:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <xQueueGenericReset+0xcc>)
 80073b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	e009      	b.n	80073d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3310      	adds	r3, #16
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff fef2 	bl	80071b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3324      	adds	r3, #36	; 0x24
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff feed 	bl	80071b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073d6:	f002 f835 	bl	8009444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073da:	2301      	movs	r3, #1
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	e000ed04 	.word	0xe000ed04

080073e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08e      	sub	sp, #56	; 0x38
 80073ec:	af02      	add	r7, sp, #8
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10a      	bne.n	800742e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
}
 800742a:	bf00      	nop
 800742c:	e7fe      	b.n	800742c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <xQueueGenericCreateStatic+0x52>
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <xQueueGenericCreateStatic+0x56>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <xQueueGenericCreateStatic+0x58>
 800743e:	2300      	movs	r3, #0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	623b      	str	r3, [r7, #32]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <xQueueGenericCreateStatic+0x7e>
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <xQueueGenericCreateStatic+0x82>
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <xQueueGenericCreateStatic+0x84>
 800746a:	2300      	movs	r3, #0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	61fb      	str	r3, [r7, #28]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007486:	2350      	movs	r3, #80	; 0x50
 8007488:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2b50      	cmp	r3, #80	; 0x50
 800748e:	d00a      	beq.n	80074a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	61bb      	str	r3, [r7, #24]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80074a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80074ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00d      	beq.n	80074ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80074b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80074be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	4613      	mov	r3, r2
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	68b9      	ldr	r1, [r7, #8]
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 f805 	bl	80074d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3730      	adds	r7, #48	; 0x30
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d103      	bne.n	80074f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	e002      	b.n	80074fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007506:	2101      	movs	r1, #1
 8007508:	69b8      	ldr	r0, [r7, #24]
 800750a:	f7ff ff05 	bl	8007318 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	78fa      	ldrb	r2, [r7, #3]
 8007512:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007516:	bf00      	nop
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08e      	sub	sp, #56	; 0x38
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800752e:	2300      	movs	r3, #0
 8007530:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10a      	bne.n	8007552 <xQueueGenericSend+0x32>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d103      	bne.n	8007560 <xQueueGenericSend+0x40>
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <xQueueGenericSend+0x44>
 8007560:	2301      	movs	r3, #1
 8007562:	e000      	b.n	8007566 <xQueueGenericSend+0x46>
 8007564:	2300      	movs	r3, #0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10a      	bne.n	8007580 <xQueueGenericSend+0x60>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800757c:	bf00      	nop
 800757e:	e7fe      	b.n	800757e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d103      	bne.n	800758e <xQueueGenericSend+0x6e>
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758a:	2b01      	cmp	r3, #1
 800758c:	d101      	bne.n	8007592 <xQueueGenericSend+0x72>
 800758e:	2301      	movs	r3, #1
 8007590:	e000      	b.n	8007594 <xQueueGenericSend+0x74>
 8007592:	2300      	movs	r3, #0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10a      	bne.n	80075ae <xQueueGenericSend+0x8e>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	623b      	str	r3, [r7, #32]
}
 80075aa:	bf00      	nop
 80075ac:	e7fe      	b.n	80075ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075ae:	f001 f9bd 	bl	800892c <xTaskGetSchedulerState>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d102      	bne.n	80075be <xQueueGenericSend+0x9e>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <xQueueGenericSend+0xa2>
 80075be:	2301      	movs	r3, #1
 80075c0:	e000      	b.n	80075c4 <xQueueGenericSend+0xa4>
 80075c2:	2300      	movs	r3, #0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10a      	bne.n	80075de <xQueueGenericSend+0xbe>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	61fb      	str	r3, [r7, #28]
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075de:	f001 ff01 	bl	80093e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d302      	bcc.n	80075f4 <xQueueGenericSend+0xd4>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d129      	bne.n	8007648 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	68b9      	ldr	r1, [r7, #8]
 80075f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075fa:	f000 fa0b 	bl	8007a14 <prvCopyDataToQueue>
 80075fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	d010      	beq.n	800762a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	3324      	adds	r3, #36	; 0x24
 800760c:	4618      	mov	r0, r3
 800760e:	f000 ffcf 	bl	80085b0 <xTaskRemoveFromEventList>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d013      	beq.n	8007640 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007618:	4b3f      	ldr	r3, [pc, #252]	; (8007718 <xQueueGenericSend+0x1f8>)
 800761a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	e00a      	b.n	8007640 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800762a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762c:	2b00      	cmp	r3, #0
 800762e:	d007      	beq.n	8007640 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007630:	4b39      	ldr	r3, [pc, #228]	; (8007718 <xQueueGenericSend+0x1f8>)
 8007632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007640:	f001 ff00 	bl	8009444 <vPortExitCritical>
				return pdPASS;
 8007644:	2301      	movs	r3, #1
 8007646:	e063      	b.n	8007710 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d103      	bne.n	8007656 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800764e:	f001 fef9 	bl	8009444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007652:	2300      	movs	r3, #0
 8007654:	e05c      	b.n	8007710 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007658:	2b00      	cmp	r3, #0
 800765a:	d106      	bne.n	800766a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800765c:	f107 0314 	add.w	r3, r7, #20
 8007660:	4618      	mov	r0, r3
 8007662:	f001 f809 	bl	8008678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007666:	2301      	movs	r3, #1
 8007668:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800766a:	f001 feeb 	bl	8009444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800766e:	f000 fd7b 	bl	8008168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007672:	f001 feb7 	bl	80093e4 <vPortEnterCritical>
 8007676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800767c:	b25b      	sxtb	r3, r3
 800767e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007682:	d103      	bne.n	800768c <xQueueGenericSend+0x16c>
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007692:	b25b      	sxtb	r3, r3
 8007694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007698:	d103      	bne.n	80076a2 <xQueueGenericSend+0x182>
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076a2:	f001 fecf 	bl	8009444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076a6:	1d3a      	adds	r2, r7, #4
 80076a8:	f107 0314 	add.w	r3, r7, #20
 80076ac:	4611      	mov	r1, r2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 fff8 	bl	80086a4 <xTaskCheckForTimeOut>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d124      	bne.n	8007704 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076bc:	f000 faa2 	bl	8007c04 <prvIsQueueFull>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d018      	beq.n	80076f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	3310      	adds	r3, #16
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	4611      	mov	r1, r2
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 ff1e 	bl	8008510 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80076d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076d6:	f000 fa2d 	bl	8007b34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80076da:	f000 fd53 	bl	8008184 <xTaskResumeAll>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f47f af7c 	bne.w	80075de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80076e6:	4b0c      	ldr	r3, [pc, #48]	; (8007718 <xQueueGenericSend+0x1f8>)
 80076e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	e772      	b.n	80075de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076fa:	f000 fa1b 	bl	8007b34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076fe:	f000 fd41 	bl	8008184 <xTaskResumeAll>
 8007702:	e76c      	b.n	80075de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007706:	f000 fa15 	bl	8007b34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800770a:	f000 fd3b 	bl	8008184 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800770e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007710:	4618      	mov	r0, r3
 8007712:	3738      	adds	r7, #56	; 0x38
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	e000ed04 	.word	0xe000ed04

0800771c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b090      	sub	sp, #64	; 0x40
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800772e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10a      	bne.n	800774a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007746:	bf00      	nop
 8007748:	e7fe      	b.n	8007748 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d103      	bne.n	8007758 <xQueueGenericSendFromISR+0x3c>
 8007750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <xQueueGenericSendFromISR+0x40>
 8007758:	2301      	movs	r3, #1
 800775a:	e000      	b.n	800775e <xQueueGenericSendFromISR+0x42>
 800775c:	2300      	movs	r3, #0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10a      	bne.n	8007778 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2b02      	cmp	r3, #2
 800777c:	d103      	bne.n	8007786 <xQueueGenericSendFromISR+0x6a>
 800777e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007782:	2b01      	cmp	r3, #1
 8007784:	d101      	bne.n	800778a <xQueueGenericSendFromISR+0x6e>
 8007786:	2301      	movs	r3, #1
 8007788:	e000      	b.n	800778c <xQueueGenericSendFromISR+0x70>
 800778a:	2300      	movs	r3, #0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10a      	bne.n	80077a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	623b      	str	r3, [r7, #32]
}
 80077a2:	bf00      	nop
 80077a4:	e7fe      	b.n	80077a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077a6:	f001 feff 	bl	80095a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077aa:	f3ef 8211 	mrs	r2, BASEPRI
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	61fa      	str	r2, [r7, #28]
 80077c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80077c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d302      	bcc.n	80077d8 <xQueueGenericSendFromISR+0xbc>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d12f      	bne.n	8007838 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077ee:	f000 f911 	bl	8007a14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80077f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fa:	d112      	bne.n	8007822 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	2b00      	cmp	r3, #0
 8007802:	d016      	beq.n	8007832 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007806:	3324      	adds	r3, #36	; 0x24
 8007808:	4618      	mov	r0, r3
 800780a:	f000 fed1 	bl	80085b0 <xTaskRemoveFromEventList>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00e      	beq.n	8007832 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00b      	beq.n	8007832 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	e007      	b.n	8007832 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007822:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007826:	3301      	adds	r3, #1
 8007828:	b2db      	uxtb	r3, r3
 800782a:	b25a      	sxtb	r2, r3
 800782c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007832:	2301      	movs	r3, #1
 8007834:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007836:	e001      	b.n	800783c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007838:	2300      	movs	r3, #0
 800783a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800783c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007846:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800784a:	4618      	mov	r0, r3
 800784c:	3740      	adds	r7, #64	; 0x40
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
	...

08007854 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08c      	sub	sp, #48	; 0x30
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007860:	2300      	movs	r3, #0
 8007862:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <xQueueReceive+0x30>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	623b      	str	r3, [r7, #32]
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d103      	bne.n	8007892 <xQueueReceive+0x3e>
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <xQueueReceive+0x42>
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <xQueueReceive+0x44>
 8007896:	2300      	movs	r3, #0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10a      	bne.n	80078b2 <xQueueReceive+0x5e>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	61fb      	str	r3, [r7, #28]
}
 80078ae:	bf00      	nop
 80078b0:	e7fe      	b.n	80078b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078b2:	f001 f83b 	bl	800892c <xTaskGetSchedulerState>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d102      	bne.n	80078c2 <xQueueReceive+0x6e>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <xQueueReceive+0x72>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e000      	b.n	80078c8 <xQueueReceive+0x74>
 80078c6:	2300      	movs	r3, #0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10a      	bne.n	80078e2 <xQueueReceive+0x8e>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	61bb      	str	r3, [r7, #24]
}
 80078de:	bf00      	nop
 80078e0:	e7fe      	b.n	80078e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078e2:	f001 fd7f 	bl	80093e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d01f      	beq.n	8007932 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f6:	f000 f8f7 	bl	8007ae8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	1e5a      	subs	r2, r3, #1
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00f      	beq.n	800792a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	3310      	adds	r3, #16
 800790e:	4618      	mov	r0, r3
 8007910:	f000 fe4e 	bl	80085b0 <xTaskRemoveFromEventList>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d007      	beq.n	800792a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800791a:	4b3d      	ldr	r3, [pc, #244]	; (8007a10 <xQueueReceive+0x1bc>)
 800791c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800792a:	f001 fd8b 	bl	8009444 <vPortExitCritical>
				return pdPASS;
 800792e:	2301      	movs	r3, #1
 8007930:	e069      	b.n	8007a06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d103      	bne.n	8007940 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007938:	f001 fd84 	bl	8009444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800793c:	2300      	movs	r3, #0
 800793e:	e062      	b.n	8007a06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007942:	2b00      	cmp	r3, #0
 8007944:	d106      	bne.n	8007954 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007946:	f107 0310 	add.w	r3, r7, #16
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fe94 	bl	8008678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007950:	2301      	movs	r3, #1
 8007952:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007954:	f001 fd76 	bl	8009444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007958:	f000 fc06 	bl	8008168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800795c:	f001 fd42 	bl	80093e4 <vPortEnterCritical>
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007966:	b25b      	sxtb	r3, r3
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796c:	d103      	bne.n	8007976 <xQueueReceive+0x122>
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800797c:	b25b      	sxtb	r3, r3
 800797e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007982:	d103      	bne.n	800798c <xQueueReceive+0x138>
 8007984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800798c:	f001 fd5a 	bl	8009444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007990:	1d3a      	adds	r2, r7, #4
 8007992:	f107 0310 	add.w	r3, r7, #16
 8007996:	4611      	mov	r1, r2
 8007998:	4618      	mov	r0, r3
 800799a:	f000 fe83 	bl	80086a4 <xTaskCheckForTimeOut>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d123      	bne.n	80079ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079a6:	f000 f917 	bl	8007bd8 <prvIsQueueEmpty>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d017      	beq.n	80079e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b2:	3324      	adds	r3, #36	; 0x24
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	4611      	mov	r1, r2
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fda9 	bl	8008510 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079c0:	f000 f8b8 	bl	8007b34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079c4:	f000 fbde 	bl	8008184 <xTaskResumeAll>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d189      	bne.n	80078e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80079ce:	4b10      	ldr	r3, [pc, #64]	; (8007a10 <xQueueReceive+0x1bc>)
 80079d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	e780      	b.n	80078e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80079e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079e2:	f000 f8a7 	bl	8007b34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079e6:	f000 fbcd 	bl	8008184 <xTaskResumeAll>
 80079ea:	e77a      	b.n	80078e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80079ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ee:	f000 f8a1 	bl	8007b34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079f2:	f000 fbc7 	bl	8008184 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079f8:	f000 f8ee 	bl	8007bd8 <prvIsQueueEmpty>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f43f af6f 	beq.w	80078e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3730      	adds	r7, #48	; 0x30
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	e000ed04 	.word	0xe000ed04

08007a14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a20:	2300      	movs	r3, #0
 8007a22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10d      	bne.n	8007a4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d14d      	bne.n	8007ad6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 ff92 	bl	8008968 <xTaskPriorityDisinherit>
 8007a44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	609a      	str	r2, [r3, #8]
 8007a4c:	e043      	b.n	8007ad6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d119      	bne.n	8007a88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6858      	ldr	r0, [r3, #4]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	68b9      	ldr	r1, [r7, #8]
 8007a60:	f002 fd2a 	bl	800a4b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6c:	441a      	add	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d32b      	bcc.n	8007ad6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	605a      	str	r2, [r3, #4]
 8007a86:	e026      	b.n	8007ad6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	68d8      	ldr	r0, [r3, #12]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a90:	461a      	mov	r2, r3
 8007a92:	68b9      	ldr	r1, [r7, #8]
 8007a94:	f002 fd10 	bl	800a4b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa0:	425b      	negs	r3, r3
 8007aa2:	441a      	add	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	68da      	ldr	r2, [r3, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d207      	bcs.n	8007ac4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abc:	425b      	negs	r3, r3
 8007abe:	441a      	add	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d105      	bne.n	8007ad6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	1c5a      	adds	r2, r3, #1
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007ade:	697b      	ldr	r3, [r7, #20]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d018      	beq.n	8007b2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b02:	441a      	add	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d303      	bcc.n	8007b1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68d9      	ldr	r1, [r3, #12]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b24:	461a      	mov	r2, r3
 8007b26:	6838      	ldr	r0, [r7, #0]
 8007b28:	f002 fcc6 	bl	800a4b8 <memcpy>
	}
}
 8007b2c:	bf00      	nop
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b3c:	f001 fc52 	bl	80093e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b48:	e011      	b.n	8007b6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d012      	beq.n	8007b78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3324      	adds	r3, #36	; 0x24
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 fd2a 	bl	80085b0 <xTaskRemoveFromEventList>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b62:	f000 fe01 	bl	8008768 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dce9      	bgt.n	8007b4a <prvUnlockQueue+0x16>
 8007b76:	e000      	b.n	8007b7a <prvUnlockQueue+0x46>
					break;
 8007b78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	22ff      	movs	r2, #255	; 0xff
 8007b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b82:	f001 fc5f 	bl	8009444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b86:	f001 fc2d 	bl	80093e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b92:	e011      	b.n	8007bb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d012      	beq.n	8007bc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3310      	adds	r3, #16
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 fd05 	bl	80085b0 <xTaskRemoveFromEventList>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007bac:	f000 fddc 	bl	8008768 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	dce9      	bgt.n	8007b94 <prvUnlockQueue+0x60>
 8007bc0:	e000      	b.n	8007bc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007bc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	22ff      	movs	r2, #255	; 0xff
 8007bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007bcc:	f001 fc3a 	bl	8009444 <vPortExitCritical>
}
 8007bd0:	bf00      	nop
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007be0:	f001 fc00 	bl	80093e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d102      	bne.n	8007bf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007bec:	2301      	movs	r3, #1
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	e001      	b.n	8007bf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bf6:	f001 fc25 	bl	8009444 <vPortExitCritical>

	return xReturn;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c0c:	f001 fbea 	bl	80093e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d102      	bne.n	8007c22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	e001      	b.n	8007c26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c22:	2300      	movs	r3, #0
 8007c24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c26:	f001 fc0d 	bl	8009444 <vPortExitCritical>

	return xReturn;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60fb      	str	r3, [r7, #12]
 8007c42:	e014      	b.n	8007c6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c44:	4a0f      	ldr	r2, [pc, #60]	; (8007c84 <vQueueAddToRegistry+0x50>)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10b      	bne.n	8007c68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c50:	490c      	ldr	r1, [pc, #48]	; (8007c84 <vQueueAddToRegistry+0x50>)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c5a:	4a0a      	ldr	r2, [pc, #40]	; (8007c84 <vQueueAddToRegistry+0x50>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	4413      	add	r3, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c66:	e006      	b.n	8007c76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b07      	cmp	r3, #7
 8007c72:	d9e7      	bls.n	8007c44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	200009b0 	.word	0x200009b0

08007c88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c98:	f001 fba4 	bl	80093e4 <vPortEnterCritical>
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ca2:	b25b      	sxtb	r3, r3
 8007ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca8:	d103      	bne.n	8007cb2 <vQueueWaitForMessageRestricted+0x2a>
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cb8:	b25b      	sxtb	r3, r3
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbe:	d103      	bne.n	8007cc8 <vQueueWaitForMessageRestricted+0x40>
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cc8:	f001 fbbc 	bl	8009444 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d106      	bne.n	8007ce2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	3324      	adds	r3, #36	; 0x24
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	68b9      	ldr	r1, [r7, #8]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 fc3b 	bl	8008558 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ce2:	6978      	ldr	r0, [r7, #20]
 8007ce4:	f7ff ff26 	bl	8007b34 <prvUnlockQueue>
	}
 8007ce8:	bf00      	nop
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08e      	sub	sp, #56	; 0x38
 8007cf4:	af04      	add	r7, sp, #16
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	623b      	str	r3, [r7, #32]
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10a      	bne.n	8007d36 <xTaskCreateStatic+0x46>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	61fb      	str	r3, [r7, #28]
}
 8007d32:	bf00      	nop
 8007d34:	e7fe      	b.n	8007d34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d36:	235c      	movs	r3, #92	; 0x5c
 8007d38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	2b5c      	cmp	r3, #92	; 0x5c
 8007d3e:	d00a      	beq.n	8007d56 <xTaskCreateStatic+0x66>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	61bb      	str	r3, [r7, #24]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d01e      	beq.n	8007d9c <xTaskCreateStatic+0xac>
 8007d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d01b      	beq.n	8007d9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	2202      	movs	r2, #2
 8007d72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d76:	2300      	movs	r3, #0
 8007d78:	9303      	str	r3, [sp, #12]
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	9302      	str	r3, [sp, #8]
 8007d7e:	f107 0314 	add.w	r3, r7, #20
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 f850 	bl	8007e34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d96:	f000 f8dd 	bl	8007f54 <prvAddNewTaskToReadyList>
 8007d9a:	e001      	b.n	8007da0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007da0:	697b      	ldr	r3, [r7, #20]
	}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3728      	adds	r7, #40	; 0x28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b08c      	sub	sp, #48	; 0x30
 8007dae:	af04      	add	r7, sp, #16
 8007db0:	60f8      	str	r0, [r7, #12]
 8007db2:	60b9      	str	r1, [r7, #8]
 8007db4:	603b      	str	r3, [r7, #0]
 8007db6:	4613      	mov	r3, r2
 8007db8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f001 fc32 	bl	8009628 <pvPortMalloc>
 8007dc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00e      	beq.n	8007dea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007dcc:	205c      	movs	r0, #92	; 0x5c
 8007dce:	f001 fc2b 	bl	8009628 <pvPortMalloc>
 8007dd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	631a      	str	r2, [r3, #48]	; 0x30
 8007de0:	e005      	b.n	8007dee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007de2:	6978      	ldr	r0, [r7, #20]
 8007de4:	f001 fcec 	bl	80097c0 <vPortFree>
 8007de8:	e001      	b.n	8007dee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d017      	beq.n	8007e24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007dfc:	88fa      	ldrh	r2, [r7, #6]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	9303      	str	r3, [sp, #12]
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	9302      	str	r3, [sp, #8]
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68b9      	ldr	r1, [r7, #8]
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 f80e 	bl	8007e34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e18:	69f8      	ldr	r0, [r7, #28]
 8007e1a:	f000 f89b 	bl	8007f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	61bb      	str	r3, [r7, #24]
 8007e22:	e002      	b.n	8007e2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e24:	f04f 33ff 	mov.w	r3, #4294967295
 8007e28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e2a:	69bb      	ldr	r3, [r7, #24]
	}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3720      	adds	r7, #32
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	21a5      	movs	r1, #165	; 0xa5
 8007e4e:	f002 fb41 	bl	800a4d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	f023 0307 	bic.w	r3, r3, #7
 8007e6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	f003 0307 	and.w	r3, r3, #7
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00a      	beq.n	8007e8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	617b      	str	r3, [r7, #20]
}
 8007e88:	bf00      	nop
 8007e8a:	e7fe      	b.n	8007e8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d01f      	beq.n	8007ed2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e92:	2300      	movs	r3, #0
 8007e94:	61fb      	str	r3, [r7, #28]
 8007e96:	e012      	b.n	8007ebe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	7819      	ldrb	r1, [r3, #0]
 8007ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	3334      	adds	r3, #52	; 0x34
 8007ea8:	460a      	mov	r2, r1
 8007eaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d006      	beq.n	8007ec6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	61fb      	str	r3, [r7, #28]
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	2b0f      	cmp	r3, #15
 8007ec2:	d9e9      	bls.n	8007e98 <prvInitialiseNewTask+0x64>
 8007ec4:	e000      	b.n	8007ec8 <prvInitialiseNewTask+0x94>
			{
				break;
 8007ec6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ed0:	e003      	b.n	8007eda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007edc:	2b37      	cmp	r3, #55	; 0x37
 8007ede:	d901      	bls.n	8007ee4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ee0:	2337      	movs	r3, #55	; 0x37
 8007ee2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ee8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	3304      	adds	r3, #4
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff f978 	bl	80071f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	3318      	adds	r3, #24
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7ff f973 	bl	80071f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	2200      	movs	r2, #0
 8007f24:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	68f9      	ldr	r1, [r7, #12]
 8007f32:	69b8      	ldr	r0, [r7, #24]
 8007f34:	f001 f928 	bl	8009188 <pxPortInitialiseStack>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f4a:	bf00      	nop
 8007f4c:	3720      	adds	r7, #32
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
	...

08007f54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f5c:	f001 fa42 	bl	80093e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f60:	4b2d      	ldr	r3, [pc, #180]	; (8008018 <prvAddNewTaskToReadyList+0xc4>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3301      	adds	r3, #1
 8007f66:	4a2c      	ldr	r2, [pc, #176]	; (8008018 <prvAddNewTaskToReadyList+0xc4>)
 8007f68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f6a:	4b2c      	ldr	r3, [pc, #176]	; (800801c <prvAddNewTaskToReadyList+0xc8>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d109      	bne.n	8007f86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f72:	4a2a      	ldr	r2, [pc, #168]	; (800801c <prvAddNewTaskToReadyList+0xc8>)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f78:	4b27      	ldr	r3, [pc, #156]	; (8008018 <prvAddNewTaskToReadyList+0xc4>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d110      	bne.n	8007fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f80:	f000 fc16 	bl	80087b0 <prvInitialiseTaskLists>
 8007f84:	e00d      	b.n	8007fa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f86:	4b26      	ldr	r3, [pc, #152]	; (8008020 <prvAddNewTaskToReadyList+0xcc>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d109      	bne.n	8007fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f8e:	4b23      	ldr	r3, [pc, #140]	; (800801c <prvAddNewTaskToReadyList+0xc8>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d802      	bhi.n	8007fa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f9c:	4a1f      	ldr	r2, [pc, #124]	; (800801c <prvAddNewTaskToReadyList+0xc8>)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007fa2:	4b20      	ldr	r3, [pc, #128]	; (8008024 <prvAddNewTaskToReadyList+0xd0>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	4a1e      	ldr	r2, [pc, #120]	; (8008024 <prvAddNewTaskToReadyList+0xd0>)
 8007faa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007fac:	4b1d      	ldr	r3, [pc, #116]	; (8008024 <prvAddNewTaskToReadyList+0xd0>)
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb8:	4b1b      	ldr	r3, [pc, #108]	; (8008028 <prvAddNewTaskToReadyList+0xd4>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d903      	bls.n	8007fc8 <prvAddNewTaskToReadyList+0x74>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	4a18      	ldr	r2, [pc, #96]	; (8008028 <prvAddNewTaskToReadyList+0xd4>)
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fcc:	4613      	mov	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4a15      	ldr	r2, [pc, #84]	; (800802c <prvAddNewTaskToReadyList+0xd8>)
 8007fd6:	441a      	add	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3304      	adds	r3, #4
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	f7ff f913 	bl	800720a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007fe4:	f001 fa2e 	bl	8009444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007fe8:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <prvAddNewTaskToReadyList+0xcc>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00e      	beq.n	800800e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ff0:	4b0a      	ldr	r3, [pc, #40]	; (800801c <prvAddNewTaskToReadyList+0xc8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d207      	bcs.n	800800e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ffe:	4b0c      	ldr	r3, [pc, #48]	; (8008030 <prvAddNewTaskToReadyList+0xdc>)
 8008000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	20000ec4 	.word	0x20000ec4
 800801c:	200009f0 	.word	0x200009f0
 8008020:	20000ed0 	.word	0x20000ed0
 8008024:	20000ee0 	.word	0x20000ee0
 8008028:	20000ecc 	.word	0x20000ecc
 800802c:	200009f4 	.word	0x200009f4
 8008030:	e000ed04 	.word	0xe000ed04

08008034 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800803c:	2300      	movs	r3, #0
 800803e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d017      	beq.n	8008076 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008046:	4b13      	ldr	r3, [pc, #76]	; (8008094 <vTaskDelay+0x60>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00a      	beq.n	8008064 <vTaskDelay+0x30>
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	60bb      	str	r3, [r7, #8]
}
 8008060:	bf00      	nop
 8008062:	e7fe      	b.n	8008062 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008064:	f000 f880 	bl	8008168 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008068:	2100      	movs	r1, #0
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fcea 	bl	8008a44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008070:	f000 f888 	bl	8008184 <xTaskResumeAll>
 8008074:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d107      	bne.n	800808c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800807c:	4b06      	ldr	r3, [pc, #24]	; (8008098 <vTaskDelay+0x64>)
 800807e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800808c:	bf00      	nop
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	20000eec 	.word	0x20000eec
 8008098:	e000ed04 	.word	0xe000ed04

0800809c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08a      	sub	sp, #40	; 0x28
 80080a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80080a6:	2300      	movs	r3, #0
 80080a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80080aa:	463a      	mov	r2, r7
 80080ac:	1d39      	adds	r1, r7, #4
 80080ae:	f107 0308 	add.w	r3, r7, #8
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff f848 	bl	8007148 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	9202      	str	r2, [sp, #8]
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	2300      	movs	r3, #0
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	2300      	movs	r3, #0
 80080c8:	460a      	mov	r2, r1
 80080ca:	4921      	ldr	r1, [pc, #132]	; (8008150 <vTaskStartScheduler+0xb4>)
 80080cc:	4821      	ldr	r0, [pc, #132]	; (8008154 <vTaskStartScheduler+0xb8>)
 80080ce:	f7ff fe0f 	bl	8007cf0 <xTaskCreateStatic>
 80080d2:	4603      	mov	r3, r0
 80080d4:	4a20      	ldr	r2, [pc, #128]	; (8008158 <vTaskStartScheduler+0xbc>)
 80080d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080d8:	4b1f      	ldr	r3, [pc, #124]	; (8008158 <vTaskStartScheduler+0xbc>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80080e0:	2301      	movs	r3, #1
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	e001      	b.n	80080ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d102      	bne.n	80080f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80080f0:	f000 fcfc 	bl	8008aec <xTimerCreateTimerTask>
 80080f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d116      	bne.n	800812a <vTaskStartScheduler+0x8e>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	613b      	str	r3, [r7, #16]
}
 800810e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008110:	4b12      	ldr	r3, [pc, #72]	; (800815c <vTaskStartScheduler+0xc0>)
 8008112:	f04f 32ff 	mov.w	r2, #4294967295
 8008116:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008118:	4b11      	ldr	r3, [pc, #68]	; (8008160 <vTaskStartScheduler+0xc4>)
 800811a:	2201      	movs	r2, #1
 800811c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800811e:	4b11      	ldr	r3, [pc, #68]	; (8008164 <vTaskStartScheduler+0xc8>)
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008124:	f001 f8bc 	bl	80092a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008128:	e00e      	b.n	8008148 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008130:	d10a      	bne.n	8008148 <vTaskStartScheduler+0xac>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	60fb      	str	r3, [r7, #12]
}
 8008144:	bf00      	nop
 8008146:	e7fe      	b.n	8008146 <vTaskStartScheduler+0xaa>
}
 8008148:	bf00      	nop
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	0800bc74 	.word	0x0800bc74
 8008154:	08008781 	.word	0x08008781
 8008158:	20000ee8 	.word	0x20000ee8
 800815c:	20000ee4 	.word	0x20000ee4
 8008160:	20000ed0 	.word	0x20000ed0
 8008164:	20000ec8 	.word	0x20000ec8

08008168 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008168:	b480      	push	{r7}
 800816a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800816c:	4b04      	ldr	r3, [pc, #16]	; (8008180 <vTaskSuspendAll+0x18>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3301      	adds	r3, #1
 8008172:	4a03      	ldr	r2, [pc, #12]	; (8008180 <vTaskSuspendAll+0x18>)
 8008174:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008176:	bf00      	nop
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	20000eec 	.word	0x20000eec

08008184 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800818e:	2300      	movs	r3, #0
 8008190:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008192:	4b42      	ldr	r3, [pc, #264]	; (800829c <xTaskResumeAll+0x118>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	603b      	str	r3, [r7, #0]
}
 80081ac:	bf00      	nop
 80081ae:	e7fe      	b.n	80081ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081b0:	f001 f918 	bl	80093e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80081b4:	4b39      	ldr	r3, [pc, #228]	; (800829c <xTaskResumeAll+0x118>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	4a38      	ldr	r2, [pc, #224]	; (800829c <xTaskResumeAll+0x118>)
 80081bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081be:	4b37      	ldr	r3, [pc, #220]	; (800829c <xTaskResumeAll+0x118>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d162      	bne.n	800828c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081c6:	4b36      	ldr	r3, [pc, #216]	; (80082a0 <xTaskResumeAll+0x11c>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d05e      	beq.n	800828c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081ce:	e02f      	b.n	8008230 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081d0:	4b34      	ldr	r3, [pc, #208]	; (80082a4 <xTaskResumeAll+0x120>)
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3318      	adds	r3, #24
 80081dc:	4618      	mov	r0, r3
 80081de:	f7ff f871 	bl	80072c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3304      	adds	r3, #4
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff f86c 	bl	80072c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f0:	4b2d      	ldr	r3, [pc, #180]	; (80082a8 <xTaskResumeAll+0x124>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d903      	bls.n	8008200 <xTaskResumeAll+0x7c>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	4a2a      	ldr	r2, [pc, #168]	; (80082a8 <xTaskResumeAll+0x124>)
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4a27      	ldr	r2, [pc, #156]	; (80082ac <xTaskResumeAll+0x128>)
 800820e:	441a      	add	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3304      	adds	r3, #4
 8008214:	4619      	mov	r1, r3
 8008216:	4610      	mov	r0, r2
 8008218:	f7fe fff7 	bl	800720a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008220:	4b23      	ldr	r3, [pc, #140]	; (80082b0 <xTaskResumeAll+0x12c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008226:	429a      	cmp	r2, r3
 8008228:	d302      	bcc.n	8008230 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800822a:	4b22      	ldr	r3, [pc, #136]	; (80082b4 <xTaskResumeAll+0x130>)
 800822c:	2201      	movs	r2, #1
 800822e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008230:	4b1c      	ldr	r3, [pc, #112]	; (80082a4 <xTaskResumeAll+0x120>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1cb      	bne.n	80081d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800823e:	f000 fb55 	bl	80088ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008242:	4b1d      	ldr	r3, [pc, #116]	; (80082b8 <xTaskResumeAll+0x134>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d010      	beq.n	8008270 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800824e:	f000 f847 	bl	80082e0 <xTaskIncrementTick>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008258:	4b16      	ldr	r3, [pc, #88]	; (80082b4 <xTaskResumeAll+0x130>)
 800825a:	2201      	movs	r2, #1
 800825c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	3b01      	subs	r3, #1
 8008262:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1f1      	bne.n	800824e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800826a:	4b13      	ldr	r3, [pc, #76]	; (80082b8 <xTaskResumeAll+0x134>)
 800826c:	2200      	movs	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008270:	4b10      	ldr	r3, [pc, #64]	; (80082b4 <xTaskResumeAll+0x130>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d009      	beq.n	800828c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008278:	2301      	movs	r3, #1
 800827a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800827c:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <xTaskResumeAll+0x138>)
 800827e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800828c:	f001 f8da 	bl	8009444 <vPortExitCritical>

	return xAlreadyYielded;
 8008290:	68bb      	ldr	r3, [r7, #8]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20000eec 	.word	0x20000eec
 80082a0:	20000ec4 	.word	0x20000ec4
 80082a4:	20000e84 	.word	0x20000e84
 80082a8:	20000ecc 	.word	0x20000ecc
 80082ac:	200009f4 	.word	0x200009f4
 80082b0:	200009f0 	.word	0x200009f0
 80082b4:	20000ed8 	.word	0x20000ed8
 80082b8:	20000ed4 	.word	0x20000ed4
 80082bc:	e000ed04 	.word	0xe000ed04

080082c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80082c6:	4b05      	ldr	r3, [pc, #20]	; (80082dc <xTaskGetTickCount+0x1c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80082cc:	687b      	ldr	r3, [r7, #4]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	370c      	adds	r7, #12
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	20000ec8 	.word	0x20000ec8

080082e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082e6:	2300      	movs	r3, #0
 80082e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ea:	4b4f      	ldr	r3, [pc, #316]	; (8008428 <xTaskIncrementTick+0x148>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f040 808f 	bne.w	8008412 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082f4:	4b4d      	ldr	r3, [pc, #308]	; (800842c <xTaskIncrementTick+0x14c>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	3301      	adds	r3, #1
 80082fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082fc:	4a4b      	ldr	r2, [pc, #300]	; (800842c <xTaskIncrementTick+0x14c>)
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d120      	bne.n	800834a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008308:	4b49      	ldr	r3, [pc, #292]	; (8008430 <xTaskIncrementTick+0x150>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00a      	beq.n	8008328 <xTaskIncrementTick+0x48>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	603b      	str	r3, [r7, #0]
}
 8008324:	bf00      	nop
 8008326:	e7fe      	b.n	8008326 <xTaskIncrementTick+0x46>
 8008328:	4b41      	ldr	r3, [pc, #260]	; (8008430 <xTaskIncrementTick+0x150>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	60fb      	str	r3, [r7, #12]
 800832e:	4b41      	ldr	r3, [pc, #260]	; (8008434 <xTaskIncrementTick+0x154>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a3f      	ldr	r2, [pc, #252]	; (8008430 <xTaskIncrementTick+0x150>)
 8008334:	6013      	str	r3, [r2, #0]
 8008336:	4a3f      	ldr	r2, [pc, #252]	; (8008434 <xTaskIncrementTick+0x154>)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6013      	str	r3, [r2, #0]
 800833c:	4b3e      	ldr	r3, [pc, #248]	; (8008438 <xTaskIncrementTick+0x158>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3301      	adds	r3, #1
 8008342:	4a3d      	ldr	r2, [pc, #244]	; (8008438 <xTaskIncrementTick+0x158>)
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	f000 fad1 	bl	80088ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800834a:	4b3c      	ldr	r3, [pc, #240]	; (800843c <xTaskIncrementTick+0x15c>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	429a      	cmp	r2, r3
 8008352:	d349      	bcc.n	80083e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008354:	4b36      	ldr	r3, [pc, #216]	; (8008430 <xTaskIncrementTick+0x150>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d104      	bne.n	8008368 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800835e:	4b37      	ldr	r3, [pc, #220]	; (800843c <xTaskIncrementTick+0x15c>)
 8008360:	f04f 32ff 	mov.w	r2, #4294967295
 8008364:	601a      	str	r2, [r3, #0]
					break;
 8008366:	e03f      	b.n	80083e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008368:	4b31      	ldr	r3, [pc, #196]	; (8008430 <xTaskIncrementTick+0x150>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	429a      	cmp	r2, r3
 800837e:	d203      	bcs.n	8008388 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008380:	4a2e      	ldr	r2, [pc, #184]	; (800843c <xTaskIncrementTick+0x15c>)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008386:	e02f      	b.n	80083e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	3304      	adds	r3, #4
 800838c:	4618      	mov	r0, r3
 800838e:	f7fe ff99 	bl	80072c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008396:	2b00      	cmp	r3, #0
 8008398:	d004      	beq.n	80083a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	3318      	adds	r3, #24
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fe ff90 	bl	80072c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a8:	4b25      	ldr	r3, [pc, #148]	; (8008440 <xTaskIncrementTick+0x160>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d903      	bls.n	80083b8 <xTaskIncrementTick+0xd8>
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	4a22      	ldr	r2, [pc, #136]	; (8008440 <xTaskIncrementTick+0x160>)
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4a1f      	ldr	r2, [pc, #124]	; (8008444 <xTaskIncrementTick+0x164>)
 80083c6:	441a      	add	r2, r3
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	3304      	adds	r3, #4
 80083cc:	4619      	mov	r1, r3
 80083ce:	4610      	mov	r0, r2
 80083d0:	f7fe ff1b 	bl	800720a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d8:	4b1b      	ldr	r3, [pc, #108]	; (8008448 <xTaskIncrementTick+0x168>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083de:	429a      	cmp	r2, r3
 80083e0:	d3b8      	bcc.n	8008354 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80083e2:	2301      	movs	r3, #1
 80083e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083e6:	e7b5      	b.n	8008354 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083e8:	4b17      	ldr	r3, [pc, #92]	; (8008448 <xTaskIncrementTick+0x168>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ee:	4915      	ldr	r1, [pc, #84]	; (8008444 <xTaskIncrementTick+0x164>)
 80083f0:	4613      	mov	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d901      	bls.n	8008404 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008400:	2301      	movs	r3, #1
 8008402:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008404:	4b11      	ldr	r3, [pc, #68]	; (800844c <xTaskIncrementTick+0x16c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d007      	beq.n	800841c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800840c:	2301      	movs	r3, #1
 800840e:	617b      	str	r3, [r7, #20]
 8008410:	e004      	b.n	800841c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008412:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <xTaskIncrementTick+0x170>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3301      	adds	r3, #1
 8008418:	4a0d      	ldr	r2, [pc, #52]	; (8008450 <xTaskIncrementTick+0x170>)
 800841a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800841c:	697b      	ldr	r3, [r7, #20]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3718      	adds	r7, #24
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000eec 	.word	0x20000eec
 800842c:	20000ec8 	.word	0x20000ec8
 8008430:	20000e7c 	.word	0x20000e7c
 8008434:	20000e80 	.word	0x20000e80
 8008438:	20000edc 	.word	0x20000edc
 800843c:	20000ee4 	.word	0x20000ee4
 8008440:	20000ecc 	.word	0x20000ecc
 8008444:	200009f4 	.word	0x200009f4
 8008448:	200009f0 	.word	0x200009f0
 800844c:	20000ed8 	.word	0x20000ed8
 8008450:	20000ed4 	.word	0x20000ed4

08008454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800845a:	4b28      	ldr	r3, [pc, #160]	; (80084fc <vTaskSwitchContext+0xa8>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008462:	4b27      	ldr	r3, [pc, #156]	; (8008500 <vTaskSwitchContext+0xac>)
 8008464:	2201      	movs	r2, #1
 8008466:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008468:	e041      	b.n	80084ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800846a:	4b25      	ldr	r3, [pc, #148]	; (8008500 <vTaskSwitchContext+0xac>)
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008470:	4b24      	ldr	r3, [pc, #144]	; (8008504 <vTaskSwitchContext+0xb0>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	e010      	b.n	800849a <vTaskSwitchContext+0x46>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10a      	bne.n	8008494 <vTaskSwitchContext+0x40>
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	607b      	str	r3, [r7, #4]
}
 8008490:	bf00      	nop
 8008492:	e7fe      	b.n	8008492 <vTaskSwitchContext+0x3e>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	3b01      	subs	r3, #1
 8008498:	60fb      	str	r3, [r7, #12]
 800849a:	491b      	ldr	r1, [pc, #108]	; (8008508 <vTaskSwitchContext+0xb4>)
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	4613      	mov	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	440b      	add	r3, r1
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d0e4      	beq.n	8008478 <vTaskSwitchContext+0x24>
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	4613      	mov	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4a13      	ldr	r2, [pc, #76]	; (8008508 <vTaskSwitchContext+0xb4>)
 80084ba:	4413      	add	r3, r2
 80084bc:	60bb      	str	r3, [r7, #8]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	605a      	str	r2, [r3, #4]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	3308      	adds	r3, #8
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d104      	bne.n	80084de <vTaskSwitchContext+0x8a>
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	605a      	str	r2, [r3, #4]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	4a09      	ldr	r2, [pc, #36]	; (800850c <vTaskSwitchContext+0xb8>)
 80084e6:	6013      	str	r3, [r2, #0]
 80084e8:	4a06      	ldr	r2, [pc, #24]	; (8008504 <vTaskSwitchContext+0xb0>)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6013      	str	r3, [r2, #0]
}
 80084ee:	bf00      	nop
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	20000eec 	.word	0x20000eec
 8008500:	20000ed8 	.word	0x20000ed8
 8008504:	20000ecc 	.word	0x20000ecc
 8008508:	200009f4 	.word	0x200009f4
 800850c:	200009f0 	.word	0x200009f0

08008510 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	60fb      	str	r3, [r7, #12]
}
 8008532:	bf00      	nop
 8008534:	e7fe      	b.n	8008534 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008536:	4b07      	ldr	r3, [pc, #28]	; (8008554 <vTaskPlaceOnEventList+0x44>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3318      	adds	r3, #24
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7fe fe87 	bl	8007252 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008544:	2101      	movs	r1, #1
 8008546:	6838      	ldr	r0, [r7, #0]
 8008548:	f000 fa7c 	bl	8008a44 <prvAddCurrentTaskToDelayedList>
}
 800854c:	bf00      	nop
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	200009f0 	.word	0x200009f0

08008558 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10a      	bne.n	8008580 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	617b      	str	r3, [r7, #20]
}
 800857c:	bf00      	nop
 800857e:	e7fe      	b.n	800857e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008580:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <vTaskPlaceOnEventListRestricted+0x54>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3318      	adds	r3, #24
 8008586:	4619      	mov	r1, r3
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f7fe fe3e 	bl	800720a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008594:	f04f 33ff 	mov.w	r3, #4294967295
 8008598:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800859a:	6879      	ldr	r1, [r7, #4]
 800859c:	68b8      	ldr	r0, [r7, #8]
 800859e:	f000 fa51 	bl	8008a44 <prvAddCurrentTaskToDelayedList>
	}
 80085a2:	bf00      	nop
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	200009f0 	.word	0x200009f0

080085b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10a      	bne.n	80085dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	60fb      	str	r3, [r7, #12]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	3318      	adds	r3, #24
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe fe6f 	bl	80072c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085e6:	4b1e      	ldr	r3, [pc, #120]	; (8008660 <xTaskRemoveFromEventList+0xb0>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d11d      	bne.n	800862a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	3304      	adds	r3, #4
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fe fe66 	bl	80072c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fc:	4b19      	ldr	r3, [pc, #100]	; (8008664 <xTaskRemoveFromEventList+0xb4>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d903      	bls.n	800860c <xTaskRemoveFromEventList+0x5c>
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	4a16      	ldr	r2, [pc, #88]	; (8008664 <xTaskRemoveFromEventList+0xb4>)
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008610:	4613      	mov	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4a13      	ldr	r2, [pc, #76]	; (8008668 <xTaskRemoveFromEventList+0xb8>)
 800861a:	441a      	add	r2, r3
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	3304      	adds	r3, #4
 8008620:	4619      	mov	r1, r3
 8008622:	4610      	mov	r0, r2
 8008624:	f7fe fdf1 	bl	800720a <vListInsertEnd>
 8008628:	e005      	b.n	8008636 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	3318      	adds	r3, #24
 800862e:	4619      	mov	r1, r3
 8008630:	480e      	ldr	r0, [pc, #56]	; (800866c <xTaskRemoveFromEventList+0xbc>)
 8008632:	f7fe fdea 	bl	800720a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863a:	4b0d      	ldr	r3, [pc, #52]	; (8008670 <xTaskRemoveFromEventList+0xc0>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	429a      	cmp	r2, r3
 8008642:	d905      	bls.n	8008650 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008644:	2301      	movs	r3, #1
 8008646:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008648:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <xTaskRemoveFromEventList+0xc4>)
 800864a:	2201      	movs	r2, #1
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e001      	b.n	8008654 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008650:	2300      	movs	r3, #0
 8008652:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008654:	697b      	ldr	r3, [r7, #20]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20000eec 	.word	0x20000eec
 8008664:	20000ecc 	.word	0x20000ecc
 8008668:	200009f4 	.word	0x200009f4
 800866c:	20000e84 	.word	0x20000e84
 8008670:	200009f0 	.word	0x200009f0
 8008674:	20000ed8 	.word	0x20000ed8

08008678 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008680:	4b06      	ldr	r3, [pc, #24]	; (800869c <vTaskInternalSetTimeOutState+0x24>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008688:	4b05      	ldr	r3, [pc, #20]	; (80086a0 <vTaskInternalSetTimeOutState+0x28>)
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	605a      	str	r2, [r3, #4]
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	20000edc 	.word	0x20000edc
 80086a0:	20000ec8 	.word	0x20000ec8

080086a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10a      	bne.n	80086ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	613b      	str	r3, [r7, #16]
}
 80086c6:	bf00      	nop
 80086c8:	e7fe      	b.n	80086c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10a      	bne.n	80086e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	60fb      	str	r3, [r7, #12]
}
 80086e2:	bf00      	nop
 80086e4:	e7fe      	b.n	80086e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80086e6:	f000 fe7d 	bl	80093e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80086ea:	4b1d      	ldr	r3, [pc, #116]	; (8008760 <xTaskCheckForTimeOut+0xbc>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008702:	d102      	bne.n	800870a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008704:	2300      	movs	r3, #0
 8008706:	61fb      	str	r3, [r7, #28]
 8008708:	e023      	b.n	8008752 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	4b15      	ldr	r3, [pc, #84]	; (8008764 <xTaskCheckForTimeOut+0xc0>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	429a      	cmp	r2, r3
 8008714:	d007      	beq.n	8008726 <xTaskCheckForTimeOut+0x82>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	429a      	cmp	r2, r3
 800871e:	d302      	bcc.n	8008726 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008720:	2301      	movs	r3, #1
 8008722:	61fb      	str	r3, [r7, #28]
 8008724:	e015      	b.n	8008752 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	429a      	cmp	r2, r3
 800872e:	d20b      	bcs.n	8008748 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	1ad2      	subs	r2, r2, r3
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff ff9b 	bl	8008678 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008742:	2300      	movs	r3, #0
 8008744:	61fb      	str	r3, [r7, #28]
 8008746:	e004      	b.n	8008752 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2200      	movs	r2, #0
 800874c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800874e:	2301      	movs	r3, #1
 8008750:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008752:	f000 fe77 	bl	8009444 <vPortExitCritical>

	return xReturn;
 8008756:	69fb      	ldr	r3, [r7, #28]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3720      	adds	r7, #32
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20000ec8 	.word	0x20000ec8
 8008764:	20000edc 	.word	0x20000edc

08008768 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008768:	b480      	push	{r7}
 800876a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800876c:	4b03      	ldr	r3, [pc, #12]	; (800877c <vTaskMissedYield+0x14>)
 800876e:	2201      	movs	r2, #1
 8008770:	601a      	str	r2, [r3, #0]
}
 8008772:	bf00      	nop
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	20000ed8 	.word	0x20000ed8

08008780 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008788:	f000 f852 	bl	8008830 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800878c:	4b06      	ldr	r3, [pc, #24]	; (80087a8 <prvIdleTask+0x28>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d9f9      	bls.n	8008788 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008794:	4b05      	ldr	r3, [pc, #20]	; (80087ac <prvIdleTask+0x2c>)
 8008796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80087a4:	e7f0      	b.n	8008788 <prvIdleTask+0x8>
 80087a6:	bf00      	nop
 80087a8:	200009f4 	.word	0x200009f4
 80087ac:	e000ed04 	.word	0xe000ed04

080087b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087b6:	2300      	movs	r3, #0
 80087b8:	607b      	str	r3, [r7, #4]
 80087ba:	e00c      	b.n	80087d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4a12      	ldr	r2, [pc, #72]	; (8008810 <prvInitialiseTaskLists+0x60>)
 80087c8:	4413      	add	r3, r2
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe fcf0 	bl	80071b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3301      	adds	r3, #1
 80087d4:	607b      	str	r3, [r7, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b37      	cmp	r3, #55	; 0x37
 80087da:	d9ef      	bls.n	80087bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087dc:	480d      	ldr	r0, [pc, #52]	; (8008814 <prvInitialiseTaskLists+0x64>)
 80087de:	f7fe fce7 	bl	80071b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087e2:	480d      	ldr	r0, [pc, #52]	; (8008818 <prvInitialiseTaskLists+0x68>)
 80087e4:	f7fe fce4 	bl	80071b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087e8:	480c      	ldr	r0, [pc, #48]	; (800881c <prvInitialiseTaskLists+0x6c>)
 80087ea:	f7fe fce1 	bl	80071b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087ee:	480c      	ldr	r0, [pc, #48]	; (8008820 <prvInitialiseTaskLists+0x70>)
 80087f0:	f7fe fcde 	bl	80071b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087f4:	480b      	ldr	r0, [pc, #44]	; (8008824 <prvInitialiseTaskLists+0x74>)
 80087f6:	f7fe fcdb 	bl	80071b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087fa:	4b0b      	ldr	r3, [pc, #44]	; (8008828 <prvInitialiseTaskLists+0x78>)
 80087fc:	4a05      	ldr	r2, [pc, #20]	; (8008814 <prvInitialiseTaskLists+0x64>)
 80087fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008800:	4b0a      	ldr	r3, [pc, #40]	; (800882c <prvInitialiseTaskLists+0x7c>)
 8008802:	4a05      	ldr	r2, [pc, #20]	; (8008818 <prvInitialiseTaskLists+0x68>)
 8008804:	601a      	str	r2, [r3, #0]
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	200009f4 	.word	0x200009f4
 8008814:	20000e54 	.word	0x20000e54
 8008818:	20000e68 	.word	0x20000e68
 800881c:	20000e84 	.word	0x20000e84
 8008820:	20000e98 	.word	0x20000e98
 8008824:	20000eb0 	.word	0x20000eb0
 8008828:	20000e7c 	.word	0x20000e7c
 800882c:	20000e80 	.word	0x20000e80

08008830 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008836:	e019      	b.n	800886c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008838:	f000 fdd4 	bl	80093e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800883c:	4b10      	ldr	r3, [pc, #64]	; (8008880 <prvCheckTasksWaitingTermination+0x50>)
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3304      	adds	r3, #4
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe fd3b 	bl	80072c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800884e:	4b0d      	ldr	r3, [pc, #52]	; (8008884 <prvCheckTasksWaitingTermination+0x54>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3b01      	subs	r3, #1
 8008854:	4a0b      	ldr	r2, [pc, #44]	; (8008884 <prvCheckTasksWaitingTermination+0x54>)
 8008856:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008858:	4b0b      	ldr	r3, [pc, #44]	; (8008888 <prvCheckTasksWaitingTermination+0x58>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3b01      	subs	r3, #1
 800885e:	4a0a      	ldr	r2, [pc, #40]	; (8008888 <prvCheckTasksWaitingTermination+0x58>)
 8008860:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008862:	f000 fdef 	bl	8009444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f810 	bl	800888c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800886c:	4b06      	ldr	r3, [pc, #24]	; (8008888 <prvCheckTasksWaitingTermination+0x58>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e1      	bne.n	8008838 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	20000e98 	.word	0x20000e98
 8008884:	20000ec4 	.word	0x20000ec4
 8008888:	20000eac 	.word	0x20000eac

0800888c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800889a:	2b00      	cmp	r3, #0
 800889c:	d108      	bne.n	80088b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 ff8c 	bl	80097c0 <vPortFree>
				vPortFree( pxTCB );
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 ff89 	bl	80097c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088ae:	e018      	b.n	80088e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d103      	bne.n	80088c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 ff80 	bl	80097c0 <vPortFree>
	}
 80088c0:	e00f      	b.n	80088e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d00a      	beq.n	80088e2 <prvDeleteTCB+0x56>
	__asm volatile
 80088cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d0:	f383 8811 	msr	BASEPRI, r3
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	60fb      	str	r3, [r7, #12]
}
 80088de:	bf00      	nop
 80088e0:	e7fe      	b.n	80088e0 <prvDeleteTCB+0x54>
	}
 80088e2:	bf00      	nop
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
	...

080088ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088f2:	4b0c      	ldr	r3, [pc, #48]	; (8008924 <prvResetNextTaskUnblockTime+0x38>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d104      	bne.n	8008906 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088fc:	4b0a      	ldr	r3, [pc, #40]	; (8008928 <prvResetNextTaskUnblockTime+0x3c>)
 80088fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008902:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008904:	e008      	b.n	8008918 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008906:	4b07      	ldr	r3, [pc, #28]	; (8008924 <prvResetNextTaskUnblockTime+0x38>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	4a04      	ldr	r2, [pc, #16]	; (8008928 <prvResetNextTaskUnblockTime+0x3c>)
 8008916:	6013      	str	r3, [r2, #0]
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr
 8008924:	20000e7c 	.word	0x20000e7c
 8008928:	20000ee4 	.word	0x20000ee4

0800892c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008932:	4b0b      	ldr	r3, [pc, #44]	; (8008960 <xTaskGetSchedulerState+0x34>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d102      	bne.n	8008940 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800893a:	2301      	movs	r3, #1
 800893c:	607b      	str	r3, [r7, #4]
 800893e:	e008      	b.n	8008952 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008940:	4b08      	ldr	r3, [pc, #32]	; (8008964 <xTaskGetSchedulerState+0x38>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d102      	bne.n	800894e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008948:	2302      	movs	r3, #2
 800894a:	607b      	str	r3, [r7, #4]
 800894c:	e001      	b.n	8008952 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800894e:	2300      	movs	r3, #0
 8008950:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008952:	687b      	ldr	r3, [r7, #4]
	}
 8008954:	4618      	mov	r0, r3
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	20000ed0 	.word	0x20000ed0
 8008964:	20000eec 	.word	0x20000eec

08008968 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d056      	beq.n	8008a2c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800897e:	4b2e      	ldr	r3, [pc, #184]	; (8008a38 <xTaskPriorityDisinherit+0xd0>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	429a      	cmp	r2, r3
 8008986:	d00a      	beq.n	800899e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	60fb      	str	r3, [r7, #12]
}
 800899a:	bf00      	nop
 800899c:	e7fe      	b.n	800899c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10a      	bne.n	80089bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	60bb      	str	r3, [r7, #8]
}
 80089b8:	bf00      	nop
 80089ba:	e7fe      	b.n	80089ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089c0:	1e5a      	subs	r2, r3, #1
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d02c      	beq.n	8008a2c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d128      	bne.n	8008a2c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	3304      	adds	r3, #4
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe fc70 	bl	80072c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fc:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <xTaskPriorityDisinherit+0xd4>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d903      	bls.n	8008a0c <xTaskPriorityDisinherit+0xa4>
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a08:	4a0c      	ldr	r2, [pc, #48]	; (8008a3c <xTaskPriorityDisinherit+0xd4>)
 8008a0a:	6013      	str	r3, [r2, #0]
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a10:	4613      	mov	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4a09      	ldr	r2, [pc, #36]	; (8008a40 <xTaskPriorityDisinherit+0xd8>)
 8008a1a:	441a      	add	r2, r3
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	3304      	adds	r3, #4
 8008a20:	4619      	mov	r1, r3
 8008a22:	4610      	mov	r0, r2
 8008a24:	f7fe fbf1 	bl	800720a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a2c:	697b      	ldr	r3, [r7, #20]
	}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3718      	adds	r7, #24
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	200009f0 	.word	0x200009f0
 8008a3c:	20000ecc 	.word	0x20000ecc
 8008a40:	200009f4 	.word	0x200009f4

08008a44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a4e:	4b21      	ldr	r3, [pc, #132]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a54:	4b20      	ldr	r3, [pc, #128]	; (8008ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe fc32 	bl	80072c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a66:	d10a      	bne.n	8008a7e <prvAddCurrentTaskToDelayedList+0x3a>
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d007      	beq.n	8008a7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a6e:	4b1a      	ldr	r3, [pc, #104]	; (8008ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3304      	adds	r3, #4
 8008a74:	4619      	mov	r1, r3
 8008a76:	4819      	ldr	r0, [pc, #100]	; (8008adc <prvAddCurrentTaskToDelayedList+0x98>)
 8008a78:	f7fe fbc7 	bl	800720a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a7c:	e026      	b.n	8008acc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4413      	add	r3, r2
 8008a84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a86:	4b14      	ldr	r3, [pc, #80]	; (8008ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d209      	bcs.n	8008aaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a96:	4b12      	ldr	r3, [pc, #72]	; (8008ae0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	4b0f      	ldr	r3, [pc, #60]	; (8008ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	f7fe fbd5 	bl	8007252 <vListInsert>
}
 8008aa8:	e010      	b.n	8008acc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aaa:	4b0e      	ldr	r3, [pc, #56]	; (8008ae4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f7fe fbcb 	bl	8007252 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008abc:	4b0a      	ldr	r3, [pc, #40]	; (8008ae8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d202      	bcs.n	8008acc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ac6:	4a08      	ldr	r2, [pc, #32]	; (8008ae8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	6013      	str	r3, [r2, #0]
}
 8008acc:	bf00      	nop
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	20000ec8 	.word	0x20000ec8
 8008ad8:	200009f0 	.word	0x200009f0
 8008adc:	20000eb0 	.word	0x20000eb0
 8008ae0:	20000e80 	.word	0x20000e80
 8008ae4:	20000e7c 	.word	0x20000e7c
 8008ae8:	20000ee4 	.word	0x20000ee4

08008aec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08a      	sub	sp, #40	; 0x28
 8008af0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008af6:	f000 fb07 	bl	8009108 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008afa:	4b1c      	ldr	r3, [pc, #112]	; (8008b6c <xTimerCreateTimerTask+0x80>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d021      	beq.n	8008b46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b0a:	1d3a      	adds	r2, r7, #4
 8008b0c:	f107 0108 	add.w	r1, r7, #8
 8008b10:	f107 030c 	add.w	r3, r7, #12
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fe fb31 	bl	800717c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	9202      	str	r2, [sp, #8]
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	2302      	movs	r3, #2
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	460a      	mov	r2, r1
 8008b2c:	4910      	ldr	r1, [pc, #64]	; (8008b70 <xTimerCreateTimerTask+0x84>)
 8008b2e:	4811      	ldr	r0, [pc, #68]	; (8008b74 <xTimerCreateTimerTask+0x88>)
 8008b30:	f7ff f8de 	bl	8007cf0 <xTaskCreateStatic>
 8008b34:	4603      	mov	r3, r0
 8008b36:	4a10      	ldr	r2, [pc, #64]	; (8008b78 <xTimerCreateTimerTask+0x8c>)
 8008b38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b3a:	4b0f      	ldr	r3, [pc, #60]	; (8008b78 <xTimerCreateTimerTask+0x8c>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b42:	2301      	movs	r3, #1
 8008b44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10a      	bne.n	8008b62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	613b      	str	r3, [r7, #16]
}
 8008b5e:	bf00      	nop
 8008b60:	e7fe      	b.n	8008b60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b62:	697b      	ldr	r3, [r7, #20]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20000f20 	.word	0x20000f20
 8008b70:	0800bc7c 	.word	0x0800bc7c
 8008b74:	08008cb1 	.word	0x08008cb1
 8008b78:	20000f24 	.word	0x20000f24

08008b7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08a      	sub	sp, #40	; 0x28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
 8008b88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10a      	bne.n	8008baa <xTimerGenericCommand+0x2e>
	__asm volatile
 8008b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	623b      	str	r3, [r7, #32]
}
 8008ba6:	bf00      	nop
 8008ba8:	e7fe      	b.n	8008ba8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008baa:	4b1a      	ldr	r3, [pc, #104]	; (8008c14 <xTimerGenericCommand+0x98>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d02a      	beq.n	8008c08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b05      	cmp	r3, #5
 8008bc2:	dc18      	bgt.n	8008bf6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008bc4:	f7ff feb2 	bl	800892c <xTaskGetSchedulerState>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d109      	bne.n	8008be2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008bce:	4b11      	ldr	r3, [pc, #68]	; (8008c14 <xTimerGenericCommand+0x98>)
 8008bd0:	6818      	ldr	r0, [r3, #0]
 8008bd2:	f107 0110 	add.w	r1, r7, #16
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bda:	f7fe fca1 	bl	8007520 <xQueueGenericSend>
 8008bde:	6278      	str	r0, [r7, #36]	; 0x24
 8008be0:	e012      	b.n	8008c08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008be2:	4b0c      	ldr	r3, [pc, #48]	; (8008c14 <xTimerGenericCommand+0x98>)
 8008be4:	6818      	ldr	r0, [r3, #0]
 8008be6:	f107 0110 	add.w	r1, r7, #16
 8008bea:	2300      	movs	r3, #0
 8008bec:	2200      	movs	r2, #0
 8008bee:	f7fe fc97 	bl	8007520 <xQueueGenericSend>
 8008bf2:	6278      	str	r0, [r7, #36]	; 0x24
 8008bf4:	e008      	b.n	8008c08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008bf6:	4b07      	ldr	r3, [pc, #28]	; (8008c14 <xTimerGenericCommand+0x98>)
 8008bf8:	6818      	ldr	r0, [r3, #0]
 8008bfa:	f107 0110 	add.w	r1, r7, #16
 8008bfe:	2300      	movs	r3, #0
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	f7fe fd8b 	bl	800771c <xQueueGenericSendFromISR>
 8008c06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3728      	adds	r7, #40	; 0x28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20000f20 	.word	0x20000f20

08008c18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b088      	sub	sp, #32
 8008c1c:	af02      	add	r7, sp, #8
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c22:	4b22      	ldr	r3, [pc, #136]	; (8008cac <prvProcessExpiredTimer+0x94>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	3304      	adds	r3, #4
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7fe fb47 	bl	80072c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c3c:	f003 0304 	and.w	r3, r3, #4
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d022      	beq.n	8008c8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	699a      	ldr	r2, [r3, #24]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	18d1      	adds	r1, r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	6978      	ldr	r0, [r7, #20]
 8008c52:	f000 f8d1 	bl	8008df8 <prvInsertTimerInActiveList>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d01f      	beq.n	8008c9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	2300      	movs	r3, #0
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	2100      	movs	r1, #0
 8008c66:	6978      	ldr	r0, [r7, #20]
 8008c68:	f7ff ff88 	bl	8008b7c <xTimerGenericCommand>
 8008c6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d113      	bne.n	8008c9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	60fb      	str	r3, [r7, #12]
}
 8008c86:	bf00      	nop
 8008c88:	e7fe      	b.n	8008c88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c90:	f023 0301 	bic.w	r3, r3, #1
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	6a1b      	ldr	r3, [r3, #32]
 8008ca0:	6978      	ldr	r0, [r7, #20]
 8008ca2:	4798      	blx	r3
}
 8008ca4:	bf00      	nop
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	20000f18 	.word	0x20000f18

08008cb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cb8:	f107 0308 	add.w	r3, r7, #8
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 f857 	bl	8008d70 <prvGetNextExpireTime>
 8008cc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f000 f803 	bl	8008cd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008cce:	f000 f8d5 	bl	8008e7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cd2:	e7f1      	b.n	8008cb8 <prvTimerTask+0x8>

08008cd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008cde:	f7ff fa43 	bl	8008168 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ce2:	f107 0308 	add.w	r3, r7, #8
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 f866 	bl	8008db8 <prvSampleTimeNow>
 8008cec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d130      	bne.n	8008d56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10a      	bne.n	8008d10 <prvProcessTimerOrBlockTask+0x3c>
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d806      	bhi.n	8008d10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d02:	f7ff fa3f 	bl	8008184 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d06:	68f9      	ldr	r1, [r7, #12]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7ff ff85 	bl	8008c18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d0e:	e024      	b.n	8008d5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d008      	beq.n	8008d28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d16:	4b13      	ldr	r3, [pc, #76]	; (8008d64 <prvProcessTimerOrBlockTask+0x90>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <prvProcessTimerOrBlockTask+0x50>
 8008d20:	2301      	movs	r3, #1
 8008d22:	e000      	b.n	8008d26 <prvProcessTimerOrBlockTask+0x52>
 8008d24:	2300      	movs	r3, #0
 8008d26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d28:	4b0f      	ldr	r3, [pc, #60]	; (8008d68 <prvProcessTimerOrBlockTask+0x94>)
 8008d2a:	6818      	ldr	r0, [r3, #0]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	4619      	mov	r1, r3
 8008d36:	f7fe ffa7 	bl	8007c88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d3a:	f7ff fa23 	bl	8008184 <xTaskResumeAll>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10a      	bne.n	8008d5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d44:	4b09      	ldr	r3, [pc, #36]	; (8008d6c <prvProcessTimerOrBlockTask+0x98>)
 8008d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	f3bf 8f6f 	isb	sy
}
 8008d54:	e001      	b.n	8008d5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d56:	f7ff fa15 	bl	8008184 <xTaskResumeAll>
}
 8008d5a:	bf00      	nop
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	20000f1c 	.word	0x20000f1c
 8008d68:	20000f20 	.word	0x20000f20
 8008d6c:	e000ed04 	.word	0xe000ed04

08008d70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d78:	4b0e      	ldr	r3, [pc, #56]	; (8008db4 <prvGetNextExpireTime+0x44>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <prvGetNextExpireTime+0x16>
 8008d82:	2201      	movs	r2, #1
 8008d84:	e000      	b.n	8008d88 <prvGetNextExpireTime+0x18>
 8008d86:	2200      	movs	r2, #0
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d105      	bne.n	8008da0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d94:	4b07      	ldr	r3, [pc, #28]	; (8008db4 <prvGetNextExpireTime+0x44>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	60fb      	str	r3, [r7, #12]
 8008d9e:	e001      	b.n	8008da4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008da0:	2300      	movs	r3, #0
 8008da2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008da4:	68fb      	ldr	r3, [r7, #12]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	20000f18 	.word	0x20000f18

08008db8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008dc0:	f7ff fa7e 	bl	80082c0 <xTaskGetTickCount>
 8008dc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008dc6:	4b0b      	ldr	r3, [pc, #44]	; (8008df4 <prvSampleTimeNow+0x3c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d205      	bcs.n	8008ddc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008dd0:	f000 f936 	bl	8009040 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	601a      	str	r2, [r3, #0]
 8008dda:	e002      	b.n	8008de2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008de2:	4a04      	ldr	r2, [pc, #16]	; (8008df4 <prvSampleTimeNow+0x3c>)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008de8:	68fb      	ldr	r3, [r7, #12]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20000f28 	.word	0x20000f28

08008df8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
 8008e04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e06:	2300      	movs	r3, #0
 8008e08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d812      	bhi.n	8008e44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	1ad2      	subs	r2, r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d302      	bcc.n	8008e32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	617b      	str	r3, [r7, #20]
 8008e30:	e01b      	b.n	8008e6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e32:	4b10      	ldr	r3, [pc, #64]	; (8008e74 <prvInsertTimerInActiveList+0x7c>)
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3304      	adds	r3, #4
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	4610      	mov	r0, r2
 8008e3e:	f7fe fa08 	bl	8007252 <vListInsert>
 8008e42:	e012      	b.n	8008e6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d206      	bcs.n	8008e5a <prvInsertTimerInActiveList+0x62>
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d302      	bcc.n	8008e5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e54:	2301      	movs	r3, #1
 8008e56:	617b      	str	r3, [r7, #20]
 8008e58:	e007      	b.n	8008e6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e5a:	4b07      	ldr	r3, [pc, #28]	; (8008e78 <prvInsertTimerInActiveList+0x80>)
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	3304      	adds	r3, #4
 8008e62:	4619      	mov	r1, r3
 8008e64:	4610      	mov	r0, r2
 8008e66:	f7fe f9f4 	bl	8007252 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e6a:	697b      	ldr	r3, [r7, #20]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	20000f1c 	.word	0x20000f1c
 8008e78:	20000f18 	.word	0x20000f18

08008e7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08e      	sub	sp, #56	; 0x38
 8008e80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e82:	e0ca      	b.n	800901a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	da18      	bge.n	8008ebc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e8a:	1d3b      	adds	r3, r7, #4
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10a      	bne.n	8008eac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	61fb      	str	r3, [r7, #28]
}
 8008ea8:	bf00      	nop
 8008eaa:	e7fe      	b.n	8008eaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb2:	6850      	ldr	r0, [r2, #4]
 8008eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb6:	6892      	ldr	r2, [r2, #8]
 8008eb8:	4611      	mov	r1, r2
 8008eba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f2c0 80aa 	blt.w	8009018 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d004      	beq.n	8008eda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe f9f5 	bl	80072c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008eda:	463b      	mov	r3, r7
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff ff6b 	bl	8008db8 <prvSampleTimeNow>
 8008ee2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b09      	cmp	r3, #9
 8008ee8:	f200 8097 	bhi.w	800901a <prvProcessReceivedCommands+0x19e>
 8008eec:	a201      	add	r2, pc, #4	; (adr r2, 8008ef4 <prvProcessReceivedCommands+0x78>)
 8008eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef2:	bf00      	nop
 8008ef4:	08008f1d 	.word	0x08008f1d
 8008ef8:	08008f1d 	.word	0x08008f1d
 8008efc:	08008f1d 	.word	0x08008f1d
 8008f00:	08008f91 	.word	0x08008f91
 8008f04:	08008fa5 	.word	0x08008fa5
 8008f08:	08008fef 	.word	0x08008fef
 8008f0c:	08008f1d 	.word	0x08008f1d
 8008f10:	08008f1d 	.word	0x08008f1d
 8008f14:	08008f91 	.word	0x08008f91
 8008f18:	08008fa5 	.word	0x08008fa5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f22:	f043 0301 	orr.w	r3, r3, #1
 8008f26:	b2da      	uxtb	r2, r3
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	18d1      	adds	r1, r2, r3
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f3c:	f7ff ff5c 	bl	8008df8 <prvInsertTimerInActiveList>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d069      	beq.n	800901a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d05e      	beq.n	800901a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	441a      	add	r2, r3
 8008f64:	2300      	movs	r3, #0
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	2300      	movs	r3, #0
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f6e:	f7ff fe05 	bl	8008b7c <xTimerGenericCommand>
 8008f72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d14f      	bne.n	800901a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	61bb      	str	r3, [r7, #24]
}
 8008f8c:	bf00      	nop
 8008f8e:	e7fe      	b.n	8008f8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f96:	f023 0301 	bic.w	r3, r3, #1
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008fa2:	e03a      	b.n	800901a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008faa:	f043 0301 	orr.w	r3, r3, #1
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10a      	bne.n	8008fda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	617b      	str	r3, [r7, #20]
}
 8008fd6:	bf00      	nop
 8008fd8:	e7fe      	b.n	8008fd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fdc:	699a      	ldr	r2, [r3, #24]
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	18d1      	adds	r1, r2, r3
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fe8:	f7ff ff06 	bl	8008df8 <prvInsertTimerInActiveList>
					break;
 8008fec:	e015      	b.n	800901a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ff4:	f003 0302 	and.w	r3, r3, #2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d103      	bne.n	8009004 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ffe:	f000 fbdf 	bl	80097c0 <vPortFree>
 8009002:	e00a      	b.n	800901a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800900a:	f023 0301 	bic.w	r3, r3, #1
 800900e:	b2da      	uxtb	r2, r3
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009016:	e000      	b.n	800901a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009018:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800901a:	4b08      	ldr	r3, [pc, #32]	; (800903c <prvProcessReceivedCommands+0x1c0>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	1d39      	adds	r1, r7, #4
 8009020:	2200      	movs	r2, #0
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe fc16 	bl	8007854 <xQueueReceive>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	f47f af2a 	bne.w	8008e84 <prvProcessReceivedCommands+0x8>
	}
}
 8009030:	bf00      	nop
 8009032:	bf00      	nop
 8009034:	3730      	adds	r7, #48	; 0x30
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	20000f20 	.word	0x20000f20

08009040 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b088      	sub	sp, #32
 8009044:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009046:	e048      	b.n	80090da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009048:	4b2d      	ldr	r3, [pc, #180]	; (8009100 <prvSwitchTimerLists+0xc0>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009052:	4b2b      	ldr	r3, [pc, #172]	; (8009100 <prvSwitchTimerLists+0xc0>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	3304      	adds	r3, #4
 8009060:	4618      	mov	r0, r3
 8009062:	f7fe f92f 	bl	80072c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009074:	f003 0304 	and.w	r3, r3, #4
 8009078:	2b00      	cmp	r3, #0
 800907a:	d02e      	beq.n	80090da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	4413      	add	r3, r2
 8009084:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	429a      	cmp	r2, r3
 800908c:	d90e      	bls.n	80090ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800909a:	4b19      	ldr	r3, [pc, #100]	; (8009100 <prvSwitchTimerLists+0xc0>)
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3304      	adds	r3, #4
 80090a2:	4619      	mov	r1, r3
 80090a4:	4610      	mov	r0, r2
 80090a6:	f7fe f8d4 	bl	8007252 <vListInsert>
 80090aa:	e016      	b.n	80090da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090ac:	2300      	movs	r3, #0
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	2300      	movs	r3, #0
 80090b2:	693a      	ldr	r2, [r7, #16]
 80090b4:	2100      	movs	r1, #0
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f7ff fd60 	bl	8008b7c <xTimerGenericCommand>
 80090bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10a      	bne.n	80090da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80090c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	603b      	str	r3, [r7, #0]
}
 80090d6:	bf00      	nop
 80090d8:	e7fe      	b.n	80090d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090da:	4b09      	ldr	r3, [pc, #36]	; (8009100 <prvSwitchTimerLists+0xc0>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1b1      	bne.n	8009048 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80090e4:	4b06      	ldr	r3, [pc, #24]	; (8009100 <prvSwitchTimerLists+0xc0>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80090ea:	4b06      	ldr	r3, [pc, #24]	; (8009104 <prvSwitchTimerLists+0xc4>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a04      	ldr	r2, [pc, #16]	; (8009100 <prvSwitchTimerLists+0xc0>)
 80090f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80090f2:	4a04      	ldr	r2, [pc, #16]	; (8009104 <prvSwitchTimerLists+0xc4>)
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	6013      	str	r3, [r2, #0]
}
 80090f8:	bf00      	nop
 80090fa:	3718      	adds	r7, #24
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20000f18 	.word	0x20000f18
 8009104:	20000f1c 	.word	0x20000f1c

08009108 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800910e:	f000 f969 	bl	80093e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009112:	4b15      	ldr	r3, [pc, #84]	; (8009168 <prvCheckForValidListAndQueue+0x60>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d120      	bne.n	800915c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800911a:	4814      	ldr	r0, [pc, #80]	; (800916c <prvCheckForValidListAndQueue+0x64>)
 800911c:	f7fe f848 	bl	80071b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009120:	4813      	ldr	r0, [pc, #76]	; (8009170 <prvCheckForValidListAndQueue+0x68>)
 8009122:	f7fe f845 	bl	80071b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009126:	4b13      	ldr	r3, [pc, #76]	; (8009174 <prvCheckForValidListAndQueue+0x6c>)
 8009128:	4a10      	ldr	r2, [pc, #64]	; (800916c <prvCheckForValidListAndQueue+0x64>)
 800912a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800912c:	4b12      	ldr	r3, [pc, #72]	; (8009178 <prvCheckForValidListAndQueue+0x70>)
 800912e:	4a10      	ldr	r2, [pc, #64]	; (8009170 <prvCheckForValidListAndQueue+0x68>)
 8009130:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009132:	2300      	movs	r3, #0
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	4b11      	ldr	r3, [pc, #68]	; (800917c <prvCheckForValidListAndQueue+0x74>)
 8009138:	4a11      	ldr	r2, [pc, #68]	; (8009180 <prvCheckForValidListAndQueue+0x78>)
 800913a:	2110      	movs	r1, #16
 800913c:	200a      	movs	r0, #10
 800913e:	f7fe f953 	bl	80073e8 <xQueueGenericCreateStatic>
 8009142:	4603      	mov	r3, r0
 8009144:	4a08      	ldr	r2, [pc, #32]	; (8009168 <prvCheckForValidListAndQueue+0x60>)
 8009146:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009148:	4b07      	ldr	r3, [pc, #28]	; (8009168 <prvCheckForValidListAndQueue+0x60>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d005      	beq.n	800915c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009150:	4b05      	ldr	r3, [pc, #20]	; (8009168 <prvCheckForValidListAndQueue+0x60>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	490b      	ldr	r1, [pc, #44]	; (8009184 <prvCheckForValidListAndQueue+0x7c>)
 8009156:	4618      	mov	r0, r3
 8009158:	f7fe fd6c 	bl	8007c34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800915c:	f000 f972 	bl	8009444 <vPortExitCritical>
}
 8009160:	bf00      	nop
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20000f20 	.word	0x20000f20
 800916c:	20000ef0 	.word	0x20000ef0
 8009170:	20000f04 	.word	0x20000f04
 8009174:	20000f18 	.word	0x20000f18
 8009178:	20000f1c 	.word	0x20000f1c
 800917c:	20000fcc 	.word	0x20000fcc
 8009180:	20000f2c 	.word	0x20000f2c
 8009184:	0800bc84 	.word	0x0800bc84

08009188 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	3b04      	subs	r3, #4
 8009198:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80091a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3b04      	subs	r3, #4
 80091a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f023 0201 	bic.w	r2, r3, #1
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3b04      	subs	r3, #4
 80091b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091b8:	4a0c      	ldr	r2, [pc, #48]	; (80091ec <pxPortInitialiseStack+0x64>)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3b14      	subs	r3, #20
 80091c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3b04      	subs	r3, #4
 80091ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f06f 0202 	mvn.w	r2, #2
 80091d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	3b20      	subs	r3, #32
 80091dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80091de:	68fb      	ldr	r3, [r7, #12]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	080091f1 	.word	0x080091f1

080091f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091fa:	4b12      	ldr	r3, [pc, #72]	; (8009244 <prvTaskExitError+0x54>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009202:	d00a      	beq.n	800921a <prvTaskExitError+0x2a>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	60fb      	str	r3, [r7, #12]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <prvTaskExitError+0x28>
	__asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	60bb      	str	r3, [r7, #8]
}
 800922c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800922e:	bf00      	nop
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d0fc      	beq.n	8009230 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009236:	bf00      	nop
 8009238:	bf00      	nop
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	2000000c 	.word	0x2000000c
	...

08009250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009250:	4b07      	ldr	r3, [pc, #28]	; (8009270 <pxCurrentTCBConst2>)
 8009252:	6819      	ldr	r1, [r3, #0]
 8009254:	6808      	ldr	r0, [r1, #0]
 8009256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925a:	f380 8809 	msr	PSP, r0
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f04f 0000 	mov.w	r0, #0
 8009266:	f380 8811 	msr	BASEPRI, r0
 800926a:	4770      	bx	lr
 800926c:	f3af 8000 	nop.w

08009270 <pxCurrentTCBConst2>:
 8009270:	200009f0 	.word	0x200009f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop

08009278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009278:	4808      	ldr	r0, [pc, #32]	; (800929c <prvPortStartFirstTask+0x24>)
 800927a:	6800      	ldr	r0, [r0, #0]
 800927c:	6800      	ldr	r0, [r0, #0]
 800927e:	f380 8808 	msr	MSP, r0
 8009282:	f04f 0000 	mov.w	r0, #0
 8009286:	f380 8814 	msr	CONTROL, r0
 800928a:	b662      	cpsie	i
 800928c:	b661      	cpsie	f
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	df00      	svc	0
 8009298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800929a:	bf00      	nop
 800929c:	e000ed08 	.word	0xe000ed08

080092a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092a6:	4b46      	ldr	r3, [pc, #280]	; (80093c0 <xPortStartScheduler+0x120>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a46      	ldr	r2, [pc, #280]	; (80093c4 <xPortStartScheduler+0x124>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d10a      	bne.n	80092c6 <xPortStartScheduler+0x26>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	613b      	str	r3, [r7, #16]
}
 80092c2:	bf00      	nop
 80092c4:	e7fe      	b.n	80092c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80092c6:	4b3e      	ldr	r3, [pc, #248]	; (80093c0 <xPortStartScheduler+0x120>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a3f      	ldr	r2, [pc, #252]	; (80093c8 <xPortStartScheduler+0x128>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d10a      	bne.n	80092e6 <xPortStartScheduler+0x46>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	60fb      	str	r3, [r7, #12]
}
 80092e2:	bf00      	nop
 80092e4:	e7fe      	b.n	80092e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092e6:	4b39      	ldr	r3, [pc, #228]	; (80093cc <xPortStartScheduler+0x12c>)
 80092e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	22ff      	movs	r2, #255	; 0xff
 80092f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009300:	78fb      	ldrb	r3, [r7, #3]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009308:	b2da      	uxtb	r2, r3
 800930a:	4b31      	ldr	r3, [pc, #196]	; (80093d0 <xPortStartScheduler+0x130>)
 800930c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800930e:	4b31      	ldr	r3, [pc, #196]	; (80093d4 <xPortStartScheduler+0x134>)
 8009310:	2207      	movs	r2, #7
 8009312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009314:	e009      	b.n	800932a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009316:	4b2f      	ldr	r3, [pc, #188]	; (80093d4 <xPortStartScheduler+0x134>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3b01      	subs	r3, #1
 800931c:	4a2d      	ldr	r2, [pc, #180]	; (80093d4 <xPortStartScheduler+0x134>)
 800931e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009320:	78fb      	ldrb	r3, [r7, #3]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	b2db      	uxtb	r3, r3
 8009328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800932a:	78fb      	ldrb	r3, [r7, #3]
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009332:	2b80      	cmp	r3, #128	; 0x80
 8009334:	d0ef      	beq.n	8009316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009336:	4b27      	ldr	r3, [pc, #156]	; (80093d4 <xPortStartScheduler+0x134>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f1c3 0307 	rsb	r3, r3, #7
 800933e:	2b04      	cmp	r3, #4
 8009340:	d00a      	beq.n	8009358 <xPortStartScheduler+0xb8>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	60bb      	str	r3, [r7, #8]
}
 8009354:	bf00      	nop
 8009356:	e7fe      	b.n	8009356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009358:	4b1e      	ldr	r3, [pc, #120]	; (80093d4 <xPortStartScheduler+0x134>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	021b      	lsls	r3, r3, #8
 800935e:	4a1d      	ldr	r2, [pc, #116]	; (80093d4 <xPortStartScheduler+0x134>)
 8009360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009362:	4b1c      	ldr	r3, [pc, #112]	; (80093d4 <xPortStartScheduler+0x134>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800936a:	4a1a      	ldr	r2, [pc, #104]	; (80093d4 <xPortStartScheduler+0x134>)
 800936c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	b2da      	uxtb	r2, r3
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009376:	4b18      	ldr	r3, [pc, #96]	; (80093d8 <xPortStartScheduler+0x138>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a17      	ldr	r2, [pc, #92]	; (80093d8 <xPortStartScheduler+0x138>)
 800937c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009382:	4b15      	ldr	r3, [pc, #84]	; (80093d8 <xPortStartScheduler+0x138>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a14      	ldr	r2, [pc, #80]	; (80093d8 <xPortStartScheduler+0x138>)
 8009388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800938c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800938e:	f000 f8dd 	bl	800954c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009392:	4b12      	ldr	r3, [pc, #72]	; (80093dc <xPortStartScheduler+0x13c>)
 8009394:	2200      	movs	r2, #0
 8009396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009398:	f000 f8fc 	bl	8009594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800939c:	4b10      	ldr	r3, [pc, #64]	; (80093e0 <xPortStartScheduler+0x140>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a0f      	ldr	r2, [pc, #60]	; (80093e0 <xPortStartScheduler+0x140>)
 80093a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80093a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093a8:	f7ff ff66 	bl	8009278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093ac:	f7ff f852 	bl	8008454 <vTaskSwitchContext>
	prvTaskExitError();
 80093b0:	f7ff ff1e 	bl	80091f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	e000ed00 	.word	0xe000ed00
 80093c4:	410fc271 	.word	0x410fc271
 80093c8:	410fc270 	.word	0x410fc270
 80093cc:	e000e400 	.word	0xe000e400
 80093d0:	2000101c 	.word	0x2000101c
 80093d4:	20001020 	.word	0x20001020
 80093d8:	e000ed20 	.word	0xe000ed20
 80093dc:	2000000c 	.word	0x2000000c
 80093e0:	e000ef34 	.word	0xe000ef34

080093e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	607b      	str	r3, [r7, #4]
}
 80093fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093fe:	4b0f      	ldr	r3, [pc, #60]	; (800943c <vPortEnterCritical+0x58>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3301      	adds	r3, #1
 8009404:	4a0d      	ldr	r2, [pc, #52]	; (800943c <vPortEnterCritical+0x58>)
 8009406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009408:	4b0c      	ldr	r3, [pc, #48]	; (800943c <vPortEnterCritical+0x58>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d10f      	bne.n	8009430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009410:	4b0b      	ldr	r3, [pc, #44]	; (8009440 <vPortEnterCritical+0x5c>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <vPortEnterCritical+0x4c>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	603b      	str	r3, [r7, #0]
}
 800942c:	bf00      	nop
 800942e:	e7fe      	b.n	800942e <vPortEnterCritical+0x4a>
	}
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	2000000c 	.word	0x2000000c
 8009440:	e000ed04 	.word	0xe000ed04

08009444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800944a:	4b12      	ldr	r3, [pc, #72]	; (8009494 <vPortExitCritical+0x50>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10a      	bne.n	8009468 <vPortExitCritical+0x24>
	__asm volatile
 8009452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	607b      	str	r3, [r7, #4]
}
 8009464:	bf00      	nop
 8009466:	e7fe      	b.n	8009466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009468:	4b0a      	ldr	r3, [pc, #40]	; (8009494 <vPortExitCritical+0x50>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3b01      	subs	r3, #1
 800946e:	4a09      	ldr	r2, [pc, #36]	; (8009494 <vPortExitCritical+0x50>)
 8009470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009472:	4b08      	ldr	r3, [pc, #32]	; (8009494 <vPortExitCritical+0x50>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d105      	bne.n	8009486 <vPortExitCritical+0x42>
 800947a:	2300      	movs	r3, #0
 800947c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	f383 8811 	msr	BASEPRI, r3
}
 8009484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	2000000c 	.word	0x2000000c
	...

080094a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094a0:	f3ef 8009 	mrs	r0, PSP
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	4b15      	ldr	r3, [pc, #84]	; (8009500 <pxCurrentTCBConst>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	f01e 0f10 	tst.w	lr, #16
 80094b0:	bf08      	it	eq
 80094b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80094b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ba:	6010      	str	r0, [r2, #0]
 80094bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80094c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80094c4:	f380 8811 	msr	BASEPRI, r0
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f7fe ffc0 	bl	8008454 <vTaskSwitchContext>
 80094d4:	f04f 0000 	mov.w	r0, #0
 80094d8:	f380 8811 	msr	BASEPRI, r0
 80094dc:	bc09      	pop	{r0, r3}
 80094de:	6819      	ldr	r1, [r3, #0]
 80094e0:	6808      	ldr	r0, [r1, #0]
 80094e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e6:	f01e 0f10 	tst.w	lr, #16
 80094ea:	bf08      	it	eq
 80094ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80094f0:	f380 8809 	msr	PSP, r0
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	f3af 8000 	nop.w

08009500 <pxCurrentTCBConst>:
 8009500:	200009f0 	.word	0x200009f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009504:	bf00      	nop
 8009506:	bf00      	nop

08009508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	607b      	str	r3, [r7, #4]
}
 8009520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009522:	f7fe fedd 	bl	80082e0 <xTaskIncrementTick>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d003      	beq.n	8009534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800952c:	4b06      	ldr	r3, [pc, #24]	; (8009548 <xPortSysTickHandler+0x40>)
 800952e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	2300      	movs	r3, #0
 8009536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	f383 8811 	msr	BASEPRI, r3
}
 800953e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009540:	bf00      	nop
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	e000ed04 	.word	0xe000ed04

0800954c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800954c:	b480      	push	{r7}
 800954e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009550:	4b0b      	ldr	r3, [pc, #44]	; (8009580 <vPortSetupTimerInterrupt+0x34>)
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009556:	4b0b      	ldr	r3, [pc, #44]	; (8009584 <vPortSetupTimerInterrupt+0x38>)
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800955c:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <vPortSetupTimerInterrupt+0x3c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a0a      	ldr	r2, [pc, #40]	; (800958c <vPortSetupTimerInterrupt+0x40>)
 8009562:	fba2 2303 	umull	r2, r3, r2, r3
 8009566:	099b      	lsrs	r3, r3, #6
 8009568:	4a09      	ldr	r2, [pc, #36]	; (8009590 <vPortSetupTimerInterrupt+0x44>)
 800956a:	3b01      	subs	r3, #1
 800956c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800956e:	4b04      	ldr	r3, [pc, #16]	; (8009580 <vPortSetupTimerInterrupt+0x34>)
 8009570:	2207      	movs	r2, #7
 8009572:	601a      	str	r2, [r3, #0]
}
 8009574:	bf00      	nop
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	e000e010 	.word	0xe000e010
 8009584:	e000e018 	.word	0xe000e018
 8009588:	20000000 	.word	0x20000000
 800958c:	10624dd3 	.word	0x10624dd3
 8009590:	e000e014 	.word	0xe000e014

08009594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80095a4 <vPortEnableVFP+0x10>
 8009598:	6801      	ldr	r1, [r0, #0]
 800959a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800959e:	6001      	str	r1, [r0, #0]
 80095a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80095a2:	bf00      	nop
 80095a4:	e000ed88 	.word	0xe000ed88

080095a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80095ae:	f3ef 8305 	mrs	r3, IPSR
 80095b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2b0f      	cmp	r3, #15
 80095b8:	d914      	bls.n	80095e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80095ba:	4a17      	ldr	r2, [pc, #92]	; (8009618 <vPortValidateInterruptPriority+0x70>)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	4413      	add	r3, r2
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80095c4:	4b15      	ldr	r3, [pc, #84]	; (800961c <vPortValidateInterruptPriority+0x74>)
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	7afa      	ldrb	r2, [r7, #11]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d20a      	bcs.n	80095e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	607b      	str	r3, [r7, #4]
}
 80095e0:	bf00      	nop
 80095e2:	e7fe      	b.n	80095e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80095e4:	4b0e      	ldr	r3, [pc, #56]	; (8009620 <vPortValidateInterruptPriority+0x78>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80095ec:	4b0d      	ldr	r3, [pc, #52]	; (8009624 <vPortValidateInterruptPriority+0x7c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d90a      	bls.n	800960a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	603b      	str	r3, [r7, #0]
}
 8009606:	bf00      	nop
 8009608:	e7fe      	b.n	8009608 <vPortValidateInterruptPriority+0x60>
	}
 800960a:	bf00      	nop
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	e000e3f0 	.word	0xe000e3f0
 800961c:	2000101c 	.word	0x2000101c
 8009620:	e000ed0c 	.word	0xe000ed0c
 8009624:	20001020 	.word	0x20001020

08009628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08a      	sub	sp, #40	; 0x28
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009630:	2300      	movs	r3, #0
 8009632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009634:	f7fe fd98 	bl	8008168 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009638:	4b5b      	ldr	r3, [pc, #364]	; (80097a8 <pvPortMalloc+0x180>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009640:	f000 f920 	bl	8009884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009644:	4b59      	ldr	r3, [pc, #356]	; (80097ac <pvPortMalloc+0x184>)
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4013      	ands	r3, r2
 800964c:	2b00      	cmp	r3, #0
 800964e:	f040 8093 	bne.w	8009778 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d01d      	beq.n	8009694 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009658:	2208      	movs	r2, #8
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4413      	add	r3, r2
 800965e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f003 0307 	and.w	r3, r3, #7
 8009666:	2b00      	cmp	r3, #0
 8009668:	d014      	beq.n	8009694 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f023 0307 	bic.w	r3, r3, #7
 8009670:	3308      	adds	r3, #8
 8009672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f003 0307 	and.w	r3, r3, #7
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00a      	beq.n	8009694 <pvPortMalloc+0x6c>
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	617b      	str	r3, [r7, #20]
}
 8009690:	bf00      	nop
 8009692:	e7fe      	b.n	8009692 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d06e      	beq.n	8009778 <pvPortMalloc+0x150>
 800969a:	4b45      	ldr	r3, [pc, #276]	; (80097b0 <pvPortMalloc+0x188>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d869      	bhi.n	8009778 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096a4:	4b43      	ldr	r3, [pc, #268]	; (80097b4 <pvPortMalloc+0x18c>)
 80096a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096a8:	4b42      	ldr	r3, [pc, #264]	; (80097b4 <pvPortMalloc+0x18c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096ae:	e004      	b.n	80096ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d903      	bls.n	80096cc <pvPortMalloc+0xa4>
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1f1      	bne.n	80096b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096cc:	4b36      	ldr	r3, [pc, #216]	; (80097a8 <pvPortMalloc+0x180>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d050      	beq.n	8009778 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2208      	movs	r2, #8
 80096dc:	4413      	add	r3, r2
 80096de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	1ad2      	subs	r2, r2, r3
 80096f0:	2308      	movs	r3, #8
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d91f      	bls.n	8009738 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4413      	add	r3, r2
 80096fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	f003 0307 	and.w	r3, r3, #7
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00a      	beq.n	8009720 <pvPortMalloc+0xf8>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	613b      	str	r3, [r7, #16]
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	1ad2      	subs	r2, r2, r3
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009732:	69b8      	ldr	r0, [r7, #24]
 8009734:	f000 f908 	bl	8009948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009738:	4b1d      	ldr	r3, [pc, #116]	; (80097b0 <pvPortMalloc+0x188>)
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	4a1b      	ldr	r2, [pc, #108]	; (80097b0 <pvPortMalloc+0x188>)
 8009744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009746:	4b1a      	ldr	r3, [pc, #104]	; (80097b0 <pvPortMalloc+0x188>)
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	4b1b      	ldr	r3, [pc, #108]	; (80097b8 <pvPortMalloc+0x190>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	429a      	cmp	r2, r3
 8009750:	d203      	bcs.n	800975a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009752:	4b17      	ldr	r3, [pc, #92]	; (80097b0 <pvPortMalloc+0x188>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a18      	ldr	r2, [pc, #96]	; (80097b8 <pvPortMalloc+0x190>)
 8009758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	4b13      	ldr	r3, [pc, #76]	; (80097ac <pvPortMalloc+0x184>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	431a      	orrs	r2, r3
 8009764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	2200      	movs	r2, #0
 800976c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800976e:	4b13      	ldr	r3, [pc, #76]	; (80097bc <pvPortMalloc+0x194>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3301      	adds	r3, #1
 8009774:	4a11      	ldr	r2, [pc, #68]	; (80097bc <pvPortMalloc+0x194>)
 8009776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009778:	f7fe fd04 	bl	8008184 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	f003 0307 	and.w	r3, r3, #7
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <pvPortMalloc+0x174>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	60fb      	str	r3, [r7, #12]
}
 8009798:	bf00      	nop
 800979a:	e7fe      	b.n	800979a <pvPortMalloc+0x172>
	return pvReturn;
 800979c:	69fb      	ldr	r3, [r7, #28]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3728      	adds	r7, #40	; 0x28
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	20004c2c 	.word	0x20004c2c
 80097ac:	20004c40 	.word	0x20004c40
 80097b0:	20004c30 	.word	0x20004c30
 80097b4:	20004c24 	.word	0x20004c24
 80097b8:	20004c34 	.word	0x20004c34
 80097bc:	20004c38 	.word	0x20004c38

080097c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d04d      	beq.n	800986e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097d2:	2308      	movs	r3, #8
 80097d4:	425b      	negs	r3, r3
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	4413      	add	r3, r2
 80097da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	4b24      	ldr	r3, [pc, #144]	; (8009878 <vPortFree+0xb8>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4013      	ands	r3, r2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10a      	bne.n	8009804 <vPortFree+0x44>
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	60fb      	str	r3, [r7, #12]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00a      	beq.n	8009822 <vPortFree+0x62>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	60bb      	str	r3, [r7, #8]
}
 800981e:	bf00      	nop
 8009820:	e7fe      	b.n	8009820 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	4b14      	ldr	r3, [pc, #80]	; (8009878 <vPortFree+0xb8>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4013      	ands	r3, r2
 800982c:	2b00      	cmp	r3, #0
 800982e:	d01e      	beq.n	800986e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d11a      	bne.n	800986e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	4b0e      	ldr	r3, [pc, #56]	; (8009878 <vPortFree+0xb8>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	43db      	mvns	r3, r3
 8009842:	401a      	ands	r2, r3
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009848:	f7fe fc8e 	bl	8008168 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	4b0a      	ldr	r3, [pc, #40]	; (800987c <vPortFree+0xbc>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4413      	add	r3, r2
 8009856:	4a09      	ldr	r2, [pc, #36]	; (800987c <vPortFree+0xbc>)
 8009858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800985a:	6938      	ldr	r0, [r7, #16]
 800985c:	f000 f874 	bl	8009948 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009860:	4b07      	ldr	r3, [pc, #28]	; (8009880 <vPortFree+0xc0>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3301      	adds	r3, #1
 8009866:	4a06      	ldr	r2, [pc, #24]	; (8009880 <vPortFree+0xc0>)
 8009868:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800986a:	f7fe fc8b 	bl	8008184 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800986e:	bf00      	nop
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20004c40 	.word	0x20004c40
 800987c:	20004c30 	.word	0x20004c30
 8009880:	20004c3c 	.word	0x20004c3c

08009884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800988a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800988e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009890:	4b27      	ldr	r3, [pc, #156]	; (8009930 <prvHeapInit+0xac>)
 8009892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f003 0307 	and.w	r3, r3, #7
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00c      	beq.n	80098b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3307      	adds	r3, #7
 80098a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f023 0307 	bic.w	r3, r3, #7
 80098aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	4a1f      	ldr	r2, [pc, #124]	; (8009930 <prvHeapInit+0xac>)
 80098b4:	4413      	add	r3, r2
 80098b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098bc:	4a1d      	ldr	r2, [pc, #116]	; (8009934 <prvHeapInit+0xb0>)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098c2:	4b1c      	ldr	r3, [pc, #112]	; (8009934 <prvHeapInit+0xb0>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	4413      	add	r3, r2
 80098ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098d0:	2208      	movs	r2, #8
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	1a9b      	subs	r3, r3, r2
 80098d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f023 0307 	bic.w	r3, r3, #7
 80098de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	4a15      	ldr	r2, [pc, #84]	; (8009938 <prvHeapInit+0xb4>)
 80098e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80098e6:	4b14      	ldr	r3, [pc, #80]	; (8009938 <prvHeapInit+0xb4>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2200      	movs	r2, #0
 80098ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80098ee:	4b12      	ldr	r3, [pc, #72]	; (8009938 <prvHeapInit+0xb4>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	1ad2      	subs	r2, r2, r3
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009904:	4b0c      	ldr	r3, [pc, #48]	; (8009938 <prvHeapInit+0xb4>)
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	4a0a      	ldr	r2, [pc, #40]	; (800993c <prvHeapInit+0xb8>)
 8009912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	4a09      	ldr	r2, [pc, #36]	; (8009940 <prvHeapInit+0xbc>)
 800991a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800991c:	4b09      	ldr	r3, [pc, #36]	; (8009944 <prvHeapInit+0xc0>)
 800991e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009922:	601a      	str	r2, [r3, #0]
}
 8009924:	bf00      	nop
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	20001024 	.word	0x20001024
 8009934:	20004c24 	.word	0x20004c24
 8009938:	20004c2c 	.word	0x20004c2c
 800993c:	20004c34 	.word	0x20004c34
 8009940:	20004c30 	.word	0x20004c30
 8009944:	20004c40 	.word	0x20004c40

08009948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009950:	4b28      	ldr	r3, [pc, #160]	; (80099f4 <prvInsertBlockIntoFreeList+0xac>)
 8009952:	60fb      	str	r3, [r7, #12]
 8009954:	e002      	b.n	800995c <prvInsertBlockIntoFreeList+0x14>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	60fb      	str	r3, [r7, #12]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	429a      	cmp	r2, r3
 8009964:	d8f7      	bhi.n	8009956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	4413      	add	r3, r2
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	429a      	cmp	r2, r3
 8009976:	d108      	bne.n	800998a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	441a      	add	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	441a      	add	r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	429a      	cmp	r2, r3
 800999c:	d118      	bne.n	80099d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	4b15      	ldr	r3, [pc, #84]	; (80099f8 <prvInsertBlockIntoFreeList+0xb0>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d00d      	beq.n	80099c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	685a      	ldr	r2, [r3, #4]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	441a      	add	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	e008      	b.n	80099d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099c6:	4b0c      	ldr	r3, [pc, #48]	; (80099f8 <prvInsertBlockIntoFreeList+0xb0>)
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	601a      	str	r2, [r3, #0]
 80099ce:	e003      	b.n	80099d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d002      	beq.n	80099e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099e6:	bf00      	nop
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	20004c24 	.word	0x20004c24
 80099f8:	20004c2c 	.word	0x20004c2c

080099fc <_ICM20948_SelectUserBank>:
#define ICM20948_DISABLE_SENSORS 0x00
#define ICM20948_ENABLE_SENSORS 0x3F
#define ICM20948_AUTO_SELECT_CLOCK 0x01


HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08a      	sub	sp, #40	; 0x28
 8009a00:	af04      	add	r7, sp, #16
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	460b      	mov	r3, r1
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	011b      	lsls	r3, r3, #4
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8009a18:	7afb      	ldrb	r3, [r7, #11]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <_ICM20948_SelectUserBank+0x26>
 8009a1e:	2368      	movs	r3, #104	; 0x68
 8009a20:	e000      	b.n	8009a24 <_ICM20948_SelectUserBank+0x28>
 8009a22:	2369      	movs	r3, #105	; 0x69
 8009a24:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 8009a26:	7dbb      	ldrb	r3, [r7, #22]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	005b      	lsls	r3, r3, #1
 8009a2c:	b299      	uxth	r1, r3
 8009a2e:	230a      	movs	r3, #10
 8009a30:	9302      	str	r3, [sp, #8]
 8009a32:	2301      	movs	r3, #1
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	f107 0315 	add.w	r3, r7, #21
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	227f      	movs	r2, #127	; 0x7f
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f7f9 fed5 	bl	80037f0 <HAL_I2C_Mem_Write>
 8009a46:	4603      	mov	r3, r0
 8009a48:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8009a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b088      	sub	sp, #32
 8009a58:	af04      	add	r7, sp, #16
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	4608      	mov	r0, r1
 8009a5e:	4611      	mov	r1, r2
 8009a60:	461a      	mov	r2, r3
 8009a62:	4603      	mov	r3, r0
 8009a64:	70fb      	strb	r3, [r7, #3]
 8009a66:	460b      	mov	r3, r1
 8009a68:	70bb      	strb	r3, [r7, #2]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8009a72:	78fb      	ldrb	r3, [r7, #3]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <_ICM20948_WriteByte+0x28>
 8009a78:	2368      	movs	r3, #104	; 0x68
 8009a7a:	e000      	b.n	8009a7e <_ICM20948_WriteByte+0x2a>
 8009a7c:	2369      	movs	r3, #105	; 0x69
 8009a7e:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	b299      	uxth	r1, r3
 8009a88:	78bb      	ldrb	r3, [r7, #2]
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	230a      	movs	r3, #10
 8009a8e:	9302      	str	r3, [sp, #8]
 8009a90:	2301      	movs	r3, #1
 8009a92:	9301      	str	r3, [sp, #4]
 8009a94:	1c7b      	adds	r3, r7, #1
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	2301      	movs	r3, #1
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f7f9 fea8 	bl	80037f0 <HAL_I2C_Mem_Write>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <_ICM20948_BrustRead>:
			10);

	return status;
}

HAL_StatusTypeDef _ICM20948_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b088      	sub	sp, #32
 8009ab2:	af04      	add	r7, sp, #16
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	4608      	mov	r0, r1
 8009ab8:	4611      	mov	r1, r2
 8009aba:	461a      	mov	r2, r3
 8009abc:	4603      	mov	r3, r0
 8009abe:	70fb      	strb	r3, [r7, #3]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	70bb      	strb	r3, [r7, #2]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8009acc:	78fb      	ldrb	r3, [r7, #3]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <_ICM20948_BrustRead+0x28>
 8009ad2:	2368      	movs	r3, #104	; 0x68
 8009ad4:	e000      	b.n	8009ad8 <_ICM20948_BrustRead+0x2a>
 8009ad6:	2369      	movs	r3, #105	; 0x69
 8009ad8:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(
 8009ada:	7bbb      	ldrb	r3, [r7, #14]
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	005b      	lsls	r3, r3, #1
 8009ae0:	b299      	uxth	r1, r3
 8009ae2:	78bb      	ldrb	r3, [r7, #2]
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	230a      	movs	r3, #10
 8009ae8:	9302      	str	r3, [sp, #8]
 8009aea:	883b      	ldrh	r3, [r7, #0]
 8009aec:	9301      	str	r3, [sp, #4]
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	2301      	movs	r3, #1
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7f9 ff75 	bl	80039e4 <HAL_I2C_Mem_Read>
 8009afa:	4603      	mov	r3, r0
 8009afc:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead,
			10);

	return status;
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <_AK09918_WriteByte>:

HAL_StatusTypeDef _AK09918_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData) {
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b088      	sub	sp, #32
 8009b0c:	af04      	add	r7, sp, #16
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
 8009b14:	4613      	mov	r3, r2
 8009b16:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 8009b1c:	78fb      	ldrb	r3, [r7, #3]
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	230a      	movs	r3, #10
 8009b22:	9302      	str	r3, [sp, #8]
 8009b24:	2301      	movs	r3, #1
 8009b26:	9301      	str	r3, [sp, #4]
 8009b28:	1cbb      	adds	r3, r7, #2
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	2118      	movs	r1, #24
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f7f9 fe5d 	bl	80037f0 <HAL_I2C_Mem_Write>
 8009b36:	4603      	mov	r3, r0
 8009b38:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8009b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity) {
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	4608      	mov	r0, r1
 8009b4e:	4611      	mov	r1, r2
 8009b50:	461a      	mov	r2, r3
 8009b52:	4603      	mov	r3, r0
 8009b54:	70fb      	strb	r3, [r7, #3]
 8009b56:	460b      	mov	r3, r1
 8009b58:	70bb      	strb	r3, [r7, #2]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8009b62:	78fb      	ldrb	r3, [r7, #3]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <ICM20948_init+0x28>
 8009b68:	2368      	movs	r3, #104	; 0x68
 8009b6a:	e000      	b.n	8009b6e <ICM20948_init+0x2a>
 8009b6c:	2369      	movs	r3, #105	; 0x69
 8009b6e:	73bb      	strb	r3, [r7, #14]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8009b70:	78fb      	ldrb	r3, [r7, #3]
 8009b72:	2200      	movs	r2, #0
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7ff ff40 	bl	80099fc <_ICM20948_SelectUserBank>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8009b80:	78f9      	ldrb	r1, [r7, #3]
 8009b82:	2380      	movs	r3, #128	; 0x80
 8009b84:	2206      	movs	r2, #6
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff ff64 	bl	8009a54 <_ICM20948_WriteByte>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 8009b90:	20c8      	movs	r0, #200	; 0xc8
 8009b92:	f7f8 fd51 	bl	8002638 <HAL_Delay>

	status = _ICM20948_WriteByte(
 8009b96:	78f9      	ldrb	r1, [r7, #3]
 8009b98:	2301      	movs	r3, #1
 8009b9a:	2206      	movs	r2, #6
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7ff ff59 	bl	8009a54 <_ICM20948_WriteByte>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); */ // For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8009ba6:	78fb      	ldrb	r3, [r7, #3]
 8009ba8:	2202      	movs	r2, #2
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7ff ff25 	bl	80099fc <_ICM20948_SelectUserBank>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			3 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << BIT_1|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8009bb6:	78bb      	ldrb	r3, [r7, #2]
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	b25b      	sxtb	r3, r3
 8009bbc:	f043 0319 	orr.w	r3, r3, #25
 8009bc0:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	78f9      	ldrb	r1, [r7, #3]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7ff ff43 	bl	8009a54 <_ICM20948_WriteByte>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8009bd2:	78f9      	ldrb	r1, [r7, #3]
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	2253      	movs	r2, #83	; 0x53
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f7ff ff3b 	bl	8009a54 <_ICM20948_WriteByte>
 8009bde:	4603      	mov	r3, r0
 8009be0:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
			0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 8009be2:	78f9      	ldrb	r1, [r7, #3]
 8009be4:	2304      	movs	r3, #4
 8009be6:	2200      	movs	r2, #0
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7ff ff33 	bl	8009a54 <_ICM20948_WriteByte>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
			0x03<< BIT_3|selectAccelSensitivity << BIT_1|0x01 << BIT_0);
 8009bf2:	787b      	ldrb	r3, [r7, #1]
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	b25b      	sxtb	r3, r3
 8009bf8:	f043 0319 	orr.w	r3, r3, #25
 8009bfc:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	78f9      	ldrb	r1, [r7, #3]
 8009c02:	2214      	movs	r2, #20
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff ff25 	bl	8009a54 <_ICM20948_WriteByte>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8009c0e:	78f9      	ldrb	r1, [r7, #3]
 8009c10:	2304      	movs	r3, #4
 8009c12:	2211      	movs	r2, #17
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7ff ff1d 	bl	8009a54 <_ICM20948_WriteByte>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
			0x04); // Don't understand how this works

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8009c1e:	78fb      	ldrb	r3, [r7, #3]
 8009c20:	2200      	movs	r2, #0
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff fee9 	bl	80099fc <_ICM20948_SelectUserBank>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8009c2e:	78f9      	ldrb	r1, [r7, #3]
 8009c30:	2302      	movs	r3, #2
 8009c32:	220f      	movs	r2, #15
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f7ff ff0d 	bl	8009a54 <_ICM20948_WriteByte>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
 8009c3e:	2208      	movs	r2, #8
 8009c40:	2131      	movs	r1, #49	; 0x31
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7ff ff60 	bl	8009b08 <_AK09918_WriteByte>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	73fb      	strb	r3, [r7, #15]
}
 8009c4c:	bf00      	nop
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	0000      	movs	r0, r0
	...

08009c58 <ICM20948_readGyroscope_allAxises>:

void ICM20948_readGyroscope_allAxises(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, int16_t readings[3]) {
 8009c58:	b590      	push	{r4, r7, lr}
 8009c5a:	b089      	sub	sp, #36	; 0x24
 8009c5c:	af02      	add	r7, sp, #8
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	607b      	str	r3, [r7, #4]
 8009c62:	460b      	mov	r3, r1
 8009c64:	72fb      	strb	r3, [r7, #11]
 8009c66:	4613      	mov	r3, r2
 8009c68:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef status = HAL_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	75fb      	strb	r3, [r7, #23]
	uint8_t readData[6];

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8009c6e:	7afb      	ldrb	r3, [r7, #11]
 8009c70:	2200      	movs	r2, #0
 8009c72:	4619      	mov	r1, r3
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f7ff fec1 	bl	80099fc <_ICM20948_SelectUserBank>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	75fb      	strb	r3, [r7, #23]

	status = _ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__GYRO_XOUT_H__REGISTER, 6, readData);
 8009c7e:	7af9      	ldrb	r1, [r7, #11]
 8009c80:	f107 0310 	add.w	r3, r7, #16
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	2306      	movs	r3, #6
 8009c88:	2233      	movs	r2, #51	; 0x33
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f7ff ff0f 	bl	8009aae <_ICM20948_BrustRead>
 8009c90:	4603      	mov	r3, r0
 8009c92:	75fb      	strb	r3, [r7, #23]

	readings[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 8009c94:	7c3b      	ldrb	r3, [r7, #16]
 8009c96:	021b      	lsls	r3, r3, #8
 8009c98:	b21a      	sxth	r2, r3
 8009c9a:	7c7b      	ldrb	r3, [r7, #17]
 8009c9c:	b21b      	sxth	r3, r3
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	b21a      	sxth	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	801a      	strh	r2, [r3, #0]
	readings[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 8009ca6:	7cbb      	ldrb	r3, [r7, #18]
 8009ca8:	021b      	lsls	r3, r3, #8
 8009caa:	b219      	sxth	r1, r3
 8009cac:	7cfb      	ldrb	r3, [r7, #19]
 8009cae:	b21a      	sxth	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3302      	adds	r3, #2
 8009cb4:	430a      	orrs	r2, r1
 8009cb6:	b212      	sxth	r2, r2
 8009cb8:	801a      	strh	r2, [r3, #0]
	readings[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8009cba:	7d3b      	ldrb	r3, [r7, #20]
 8009cbc:	021b      	lsls	r3, r3, #8
 8009cbe:	b219      	sxth	r1, r3
 8009cc0:	7d7b      	ldrb	r3, [r7, #21]
 8009cc2:	b21a      	sxth	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	b212      	sxth	r2, r2
 8009ccc:	801a      	strh	r2, [r3, #0]

	switch (selectGyroSensitivity) {
 8009cce:	7abb      	ldrb	r3, [r7, #10]
 8009cd0:	2b03      	cmp	r3, #3
 8009cd2:	f200 8100 	bhi.w	8009ed6 <ICM20948_readGyroscope_allAxises+0x27e>
 8009cd6:	a201      	add	r2, pc, #4	; (adr r2, 8009cdc <ICM20948_readGyroscope_allAxises+0x84>)
 8009cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cdc:	08009ced 	.word	0x08009ced
 8009ce0:	08009d3f 	.word	0x08009d3f
 8009ce4:	08009dc7 	.word	0x08009dc7
 8009ce8:	08009e4f 	.word	0x08009e4f
		case GYRO_FULL_SCALE_250DPS:
			readings[X] /= GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009cf2:	4a81      	ldr	r2, [pc, #516]	; (8009ef8 <ICM20948_readGyroscope_allAxises+0x2a0>)
 8009cf4:	fb82 1203 	smull	r1, r2, r2, r3
 8009cf8:	1152      	asrs	r2, r2, #5
 8009cfa:	17db      	asrs	r3, r3, #31
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	b21a      	sxth	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	801a      	strh	r2, [r3, #0]
			readings[Y] /= GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	3302      	adds	r3, #2
 8009d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	3202      	adds	r2, #2
 8009d10:	4979      	ldr	r1, [pc, #484]	; (8009ef8 <ICM20948_readGyroscope_allAxises+0x2a0>)
 8009d12:	fb81 0103 	smull	r0, r1, r1, r3
 8009d16:	1149      	asrs	r1, r1, #5
 8009d18:	17db      	asrs	r3, r3, #31
 8009d1a:	1acb      	subs	r3, r1, r3
 8009d1c:	b21b      	sxth	r3, r3
 8009d1e:	8013      	strh	r3, [r2, #0]
			readings[Z] /= GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3304      	adds	r3, #4
 8009d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	3204      	adds	r2, #4
 8009d2c:	4972      	ldr	r1, [pc, #456]	; (8009ef8 <ICM20948_readGyroscope_allAxises+0x2a0>)
 8009d2e:	fb81 0103 	smull	r0, r1, r1, r3
 8009d32:	1149      	asrs	r1, r1, #5
 8009d34:	17db      	asrs	r3, r3, #31
 8009d36:	1acb      	subs	r3, r1, r3
 8009d38:	b21b      	sxth	r3, r3
 8009d3a:	8013      	strh	r3, [r2, #0]
			break;
 8009d3c:	e0cb      	b.n	8009ed6 <ICM20948_readGyroscope_allAxises+0x27e>
		case GYRO_FULL_SCALE_500DPS:
			readings[X] /= GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7f6 fbe5 	bl	8000514 <__aeabi_i2d>
 8009d4a:	a365      	add	r3, pc, #404	; (adr r3, 8009ee0 <ICM20948_readGyroscope_allAxises+0x288>)
 8009d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d50:	f7f6 fd74 	bl	800083c <__aeabi_ddiv>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	4610      	mov	r0, r2
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	f7f6 fef4 	bl	8000b48 <__aeabi_d2iz>
 8009d60:	4603      	mov	r3, r0
 8009d62:	b21a      	sxth	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	801a      	strh	r2, [r3, #0]
			readings[Y] /= GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	3302      	adds	r3, #2
 8009d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7f6 fbcf 	bl	8000514 <__aeabi_i2d>
 8009d76:	a35a      	add	r3, pc, #360	; (adr r3, 8009ee0 <ICM20948_readGyroscope_allAxises+0x288>)
 8009d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7c:	f7f6 fd5e 	bl	800083c <__aeabi_ddiv>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	4610      	mov	r0, r2
 8009d86:	4619      	mov	r1, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	1c9c      	adds	r4, r3, #2
 8009d8c:	f7f6 fedc 	bl	8000b48 <__aeabi_d2iz>
 8009d90:	4603      	mov	r3, r0
 8009d92:	b21b      	sxth	r3, r3
 8009d94:	8023      	strh	r3, [r4, #0]
			readings[Z] /= GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	3304      	adds	r3, #4
 8009d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7f6 fbb8 	bl	8000514 <__aeabi_i2d>
 8009da4:	a34e      	add	r3, pc, #312	; (adr r3, 8009ee0 <ICM20948_readGyroscope_allAxises+0x288>)
 8009da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009daa:	f7f6 fd47 	bl	800083c <__aeabi_ddiv>
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	4610      	mov	r0, r2
 8009db4:	4619      	mov	r1, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	1d1c      	adds	r4, r3, #4
 8009dba:	f7f6 fec5 	bl	8000b48 <__aeabi_d2iz>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	b21b      	sxth	r3, r3
 8009dc2:	8023      	strh	r3, [r4, #0]
			break;
 8009dc4:	e087      	b.n	8009ed6 <ICM20948_readGyroscope_allAxises+0x27e>
		case GYRO_FULL_SCALE_1000DPS:
			readings[X] /= GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7f6 fba1 	bl	8000514 <__aeabi_i2d>
 8009dd2:	a345      	add	r3, pc, #276	; (adr r3, 8009ee8 <ICM20948_readGyroscope_allAxises+0x290>)
 8009dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd8:	f7f6 fd30 	bl	800083c <__aeabi_ddiv>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	4610      	mov	r0, r2
 8009de2:	4619      	mov	r1, r3
 8009de4:	f7f6 feb0 	bl	8000b48 <__aeabi_d2iz>
 8009de8:	4603      	mov	r3, r0
 8009dea:	b21a      	sxth	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	801a      	strh	r2, [r3, #0]
			readings[Y] /= GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	3302      	adds	r3, #2
 8009df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7f6 fb8b 	bl	8000514 <__aeabi_i2d>
 8009dfe:	a33a      	add	r3, pc, #232	; (adr r3, 8009ee8 <ICM20948_readGyroscope_allAxises+0x290>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	f7f6 fd1a 	bl	800083c <__aeabi_ddiv>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	4619      	mov	r1, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	1c9c      	adds	r4, r3, #2
 8009e14:	f7f6 fe98 	bl	8000b48 <__aeabi_d2iz>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	b21b      	sxth	r3, r3
 8009e1c:	8023      	strh	r3, [r4, #0]
			readings[Z] /= GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	3304      	adds	r3, #4
 8009e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7f6 fb74 	bl	8000514 <__aeabi_i2d>
 8009e2c:	a32e      	add	r3, pc, #184	; (adr r3, 8009ee8 <ICM20948_readGyroscope_allAxises+0x290>)
 8009e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e32:	f7f6 fd03 	bl	800083c <__aeabi_ddiv>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	1d1c      	adds	r4, r3, #4
 8009e42:	f7f6 fe81 	bl	8000b48 <__aeabi_d2iz>
 8009e46:	4603      	mov	r3, r0
 8009e48:	b21b      	sxth	r3, r3
 8009e4a:	8023      	strh	r3, [r4, #0]
			break;
 8009e4c:	e043      	b.n	8009ed6 <ICM20948_readGyroscope_allAxises+0x27e>
		case GYRO_FULL_SCALE_2000DPS:
			readings[X] /= GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7f6 fb5d 	bl	8000514 <__aeabi_i2d>
 8009e5a:	a325      	add	r3, pc, #148	; (adr r3, 8009ef0 <ICM20948_readGyroscope_allAxises+0x298>)
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	f7f6 fcec 	bl	800083c <__aeabi_ddiv>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4610      	mov	r0, r2
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	f7f6 fe6c 	bl	8000b48 <__aeabi_d2iz>
 8009e70:	4603      	mov	r3, r0
 8009e72:	b21a      	sxth	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	801a      	strh	r2, [r3, #0]
			readings[Y] /= GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	3302      	adds	r3, #2
 8009e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7f6 fb47 	bl	8000514 <__aeabi_i2d>
 8009e86:	a31a      	add	r3, pc, #104	; (adr r3, 8009ef0 <ICM20948_readGyroscope_allAxises+0x298>)
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	f7f6 fcd6 	bl	800083c <__aeabi_ddiv>
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	4610      	mov	r0, r2
 8009e96:	4619      	mov	r1, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	1c9c      	adds	r4, r3, #2
 8009e9c:	f7f6 fe54 	bl	8000b48 <__aeabi_d2iz>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	b21b      	sxth	r3, r3
 8009ea4:	8023      	strh	r3, [r4, #0]
			readings[Z] /= GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	3304      	adds	r3, #4
 8009eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7f6 fb30 	bl	8000514 <__aeabi_i2d>
 8009eb4:	a30e      	add	r3, pc, #56	; (adr r3, 8009ef0 <ICM20948_readGyroscope_allAxises+0x298>)
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	f7f6 fcbf 	bl	800083c <__aeabi_ddiv>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	4610      	mov	r0, r2
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	1d1c      	adds	r4, r3, #4
 8009eca:	f7f6 fe3d 	bl	8000b48 <__aeabi_d2iz>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	b21b      	sxth	r3, r3
 8009ed2:	8023      	strh	r3, [r4, #0]
			break;
 8009ed4:	bf00      	nop
	}
}
 8009ed6:	bf00      	nop
 8009ed8:	371c      	adds	r7, #28
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd90      	pop	{r4, r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	00000000 	.word	0x00000000
 8009ee4:	40506000 	.word	0x40506000
 8009ee8:	66666666 	.word	0x66666666
 8009eec:	40406666 	.word	0x40406666
 8009ef0:	66666666 	.word	0x66666666
 8009ef4:	40306666 	.word	0x40306666
 8009ef8:	3e88cb3d 	.word	0x3e88cb3d

08009efc <LPF_Init2>:
uint32_t x2[1024];   // two copies of MACQ
uint32_t *Pt2;       // pointer to current
uint32_t LPFSum2;    // sum of the last Size samples
uint32_t I2;        // index to oldest

void LPF_Init2(ADC_HandleTypeDef* hadc, uint32_t size){
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  uint32_t initial;

  HAL_ADC_Start(hadc);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f7f8 fbfe 	bl	8002708 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 10);
 8009f0c:	210a      	movs	r1, #10
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7f8 fcff 	bl	8002912 <HAL_ADC_PollForConversion>
  initial = HAL_ADC_GetValue(hadc);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f7f8 fd87 	bl	8002a28 <HAL_ADC_GetValue>
 8009f1a:	60b8      	str	r0, [r7, #8]
  HAL_ADC_Stop(hadc);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7f8 fcc5 	bl	80028ac <HAL_ADC_Stop>

  if(size>1024) size=1024; // max
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f28:	d902      	bls.n	8009f30 <LPF_Init2+0x34>
 8009f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f2e:	603b      	str	r3, [r7, #0]
  Size = size;
 8009f30:	4a12      	ldr	r2, [pc, #72]	; (8009f7c <LPF_Init2+0x80>)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	6013      	str	r3, [r2, #0]
  I2 = Size - 1;
 8009f36:	4b11      	ldr	r3, [pc, #68]	; (8009f7c <LPF_Init2+0x80>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	4a10      	ldr	r2, [pc, #64]	; (8009f80 <LPF_Init2+0x84>)
 8009f3e:	6013      	str	r3, [r2, #0]
  LPFSum2 = Size*initial; // prime MACQ with initial data
 8009f40:	4b0e      	ldr	r3, [pc, #56]	; (8009f7c <LPF_Init2+0x80>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	fb02 f303 	mul.w	r3, r2, r3
 8009f4a:	4a0e      	ldr	r2, [pc, #56]	; (8009f84 <LPF_Init2+0x88>)
 8009f4c:	6013      	str	r3, [r2, #0]
  for(int i=0; i<2*Size; i++){
 8009f4e:	2300      	movs	r3, #0
 8009f50:	60fb      	str	r3, [r7, #12]
 8009f52:	e007      	b.n	8009f64 <LPF_Init2+0x68>
    x2[i] = initial;
 8009f54:	490c      	ldr	r1, [pc, #48]	; (8009f88 <LPF_Init2+0x8c>)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<2*Size; i++){
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3301      	adds	r3, #1
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <LPF_Init2+0x80>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	005a      	lsls	r2, r3, #1
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d8f1      	bhi.n	8009f54 <LPF_Init2+0x58>
  }
}
 8009f70:	bf00      	nop
 8009f72:	bf00      	nop
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20004c44 	.word	0x20004c44
 8009f80:	20005c4c 	.word	0x20005c4c
 8009f84:	20005c48 	.word	0x20005c48
 8009f88:	20004c48 	.word	0x20004c48

08009f8c <LPF_Calc2>:
// calculate one filter output, called at sampling rate
// Input: new ADC data   Output: filter output, DAC data
// y(n) = (x(n)+x(n-1)+...+x(n-Size-1)/Size
uint32_t LPF_Calc2(uint32_t newdata){
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  LPFSum2 = LPFSum2+newdata-x2[I2];   // subtract oldest, add newest
 8009f94:	4b16      	ldr	r3, [pc, #88]	; (8009ff0 <LPF_Calc2+0x64>)
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	441a      	add	r2, r3
 8009f9c:	4b15      	ldr	r3, [pc, #84]	; (8009ff4 <LPF_Calc2+0x68>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4915      	ldr	r1, [pc, #84]	; (8009ff8 <LPF_Calc2+0x6c>)
 8009fa2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	4a11      	ldr	r2, [pc, #68]	; (8009ff0 <LPF_Calc2+0x64>)
 8009faa:	6013      	str	r3, [r2, #0]
  x2[I2] = newdata;// save new data
 8009fac:	4b11      	ldr	r3, [pc, #68]	; (8009ff4 <LPF_Calc2+0x68>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4911      	ldr	r1, [pc, #68]	; (8009ff8 <LPF_Calc2+0x6c>)
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if(I2 == 0){
 8009fb8:	4b0e      	ldr	r3, [pc, #56]	; (8009ff4 <LPF_Calc2+0x68>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d105      	bne.n	8009fcc <LPF_Calc2+0x40>
	  I2 = Size-1;// wrap
 8009fc0:	4b0e      	ldr	r3, [pc, #56]	; (8009ffc <LPF_Calc2+0x70>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	4a0b      	ldr	r2, [pc, #44]	; (8009ff4 <LPF_Calc2+0x68>)
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	e004      	b.n	8009fd6 <LPF_Calc2+0x4a>
  }
  else{
	  I2--;// make room for data
 8009fcc:	4b09      	ldr	r3, [pc, #36]	; (8009ff4 <LPF_Calc2+0x68>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	4a08      	ldr	r2, [pc, #32]	; (8009ff4 <LPF_Calc2+0x68>)
 8009fd4:	6013      	str	r3, [r2, #0]
//  else{
//    Pt2--;// make room for data
//  }
//  LPFSum2 = LPFSum2+newdata -*Pt2;   // subtract oldest, add newest
//  *Pt2 = *(Pt2+Size) = newdata;     // two copies of the new data
  return LPFSum2/Size;
 8009fd6:	4b06      	ldr	r3, [pc, #24]	; (8009ff0 <LPF_Calc2+0x64>)
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	4b08      	ldr	r3, [pc, #32]	; (8009ffc <LPF_Calc2+0x70>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	20005c48 	.word	0x20005c48
 8009ff4:	20005c4c 	.word	0x20005c4c
 8009ff8:	20004c48 	.word	0x20004c48
 8009ffc:	20004c44 	.word	0x20004c44

0800a000 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800a006:	2300      	movs	r3, #0
 800a008:	71fb      	strb	r3, [r7, #7]
 800a00a:	e026      	b.n	800a05a <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800a00c:	79fb      	ldrb	r3, [r7, #7]
 800a00e:	3b50      	subs	r3, #80	; 0x50
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2100      	movs	r1, #0
 800a014:	4618      	mov	r0, r3
 800a016:	f000 f82b 	bl	800a070 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800a01a:	2100      	movs	r1, #0
 800a01c:	2000      	movs	r0, #0
 800a01e:	f000 f827 	bl	800a070 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800a022:	2100      	movs	r1, #0
 800a024:	2010      	movs	r0, #16
 800a026:	f000 f823 	bl	800a070 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800a02a:	2300      	movs	r3, #0
 800a02c:	71bb      	strb	r3, [r7, #6]
 800a02e:	e00d      	b.n	800a04c <OLED_Refresh_Gram+0x4c>
 800a030:	79ba      	ldrb	r2, [r7, #6]
 800a032:	79fb      	ldrb	r3, [r7, #7]
 800a034:	490d      	ldr	r1, [pc, #52]	; (800a06c <OLED_Refresh_Gram+0x6c>)
 800a036:	00d2      	lsls	r2, r2, #3
 800a038:	440a      	add	r2, r1
 800a03a:	4413      	add	r3, r2
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2101      	movs	r1, #1
 800a040:	4618      	mov	r0, r3
 800a042:	f000 f815 	bl	800a070 <OLED_WR_Byte>
 800a046:	79bb      	ldrb	r3, [r7, #6]
 800a048:	3301      	adds	r3, #1
 800a04a:	71bb      	strb	r3, [r7, #6]
 800a04c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a050:	2b00      	cmp	r3, #0
 800a052:	daed      	bge.n	800a030 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800a054:	79fb      	ldrb	r3, [r7, #7]
 800a056:	3301      	adds	r3, #1
 800a058:	71fb      	strb	r3, [r7, #7]
 800a05a:	79fb      	ldrb	r3, [r7, #7]
 800a05c:	2b07      	cmp	r3, #7
 800a05e:	d9d5      	bls.n	800a00c <OLED_Refresh_Gram+0xc>
	}   
}
 800a060:	bf00      	nop
 800a062:	bf00      	nop
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20005c50 	.word	0x20005c50

0800a070 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	460a      	mov	r2, r1
 800a07a:	71fb      	strb	r3, [r7, #7]
 800a07c:	4613      	mov	r3, r2
 800a07e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800a080:	79bb      	ldrb	r3, [r7, #6]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d006      	beq.n	800a094 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800a086:	2201      	movs	r2, #1
 800a088:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a08c:	481c      	ldr	r0, [pc, #112]	; (800a100 <OLED_WR_Byte+0x90>)
 800a08e:	f7f9 fa37 	bl	8003500 <HAL_GPIO_WritePin>
 800a092:	e005      	b.n	800a0a0 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800a094:	2200      	movs	r2, #0
 800a096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a09a:	4819      	ldr	r0, [pc, #100]	; (800a100 <OLED_WR_Byte+0x90>)
 800a09c:	f7f9 fa30 	bl	8003500 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	73fb      	strb	r3, [r7, #15]
 800a0a4:	e01e      	b.n	800a0e4 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	2120      	movs	r1, #32
 800a0aa:	4815      	ldr	r0, [pc, #84]	; (800a100 <OLED_WR_Byte+0x90>)
 800a0ac:	f7f9 fa28 	bl	8003500 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800a0b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	da05      	bge.n	800a0c4 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	2140      	movs	r1, #64	; 0x40
 800a0bc:	4810      	ldr	r0, [pc, #64]	; (800a100 <OLED_WR_Byte+0x90>)
 800a0be:	f7f9 fa1f 	bl	8003500 <HAL_GPIO_WritePin>
 800a0c2:	e004      	b.n	800a0ce <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	2140      	movs	r1, #64	; 0x40
 800a0c8:	480d      	ldr	r0, [pc, #52]	; (800a100 <OLED_WR_Byte+0x90>)
 800a0ca:	f7f9 fa19 	bl	8003500 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	2120      	movs	r1, #32
 800a0d2:	480b      	ldr	r0, [pc, #44]	; (800a100 <OLED_WR_Byte+0x90>)
 800a0d4:	f7f9 fa14 	bl	8003500 <HAL_GPIO_WritePin>
		dat<<=1;   
 800a0d8:	79fb      	ldrb	r3, [r7, #7]
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	73fb      	strb	r3, [r7, #15]
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	2b07      	cmp	r3, #7
 800a0e8:	d9dd      	bls.n	800a0a6 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a0f0:	4803      	ldr	r0, [pc, #12]	; (800a100 <OLED_WR_Byte+0x90>)
 800a0f2:	f7f9 fa05 	bl	8003500 <HAL_GPIO_WritePin>
} 
 800a0f6:	bf00      	nop
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	40021000 	.word	0x40021000

0800a104 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800a10a:	2300      	movs	r3, #0
 800a10c:	71fb      	strb	r3, [r7, #7]
 800a10e:	e014      	b.n	800a13a <OLED_Clear+0x36>
 800a110:	2300      	movs	r3, #0
 800a112:	71bb      	strb	r3, [r7, #6]
 800a114:	e00a      	b.n	800a12c <OLED_Clear+0x28>
 800a116:	79ba      	ldrb	r2, [r7, #6]
 800a118:	79fb      	ldrb	r3, [r7, #7]
 800a11a:	490c      	ldr	r1, [pc, #48]	; (800a14c <OLED_Clear+0x48>)
 800a11c:	00d2      	lsls	r2, r2, #3
 800a11e:	440a      	add	r2, r1
 800a120:	4413      	add	r3, r2
 800a122:	2200      	movs	r2, #0
 800a124:	701a      	strb	r2, [r3, #0]
 800a126:	79bb      	ldrb	r3, [r7, #6]
 800a128:	3301      	adds	r3, #1
 800a12a:	71bb      	strb	r3, [r7, #6]
 800a12c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a130:	2b00      	cmp	r3, #0
 800a132:	daf0      	bge.n	800a116 <OLED_Clear+0x12>
 800a134:	79fb      	ldrb	r3, [r7, #7]
 800a136:	3301      	adds	r3, #1
 800a138:	71fb      	strb	r3, [r7, #7]
 800a13a:	79fb      	ldrb	r3, [r7, #7]
 800a13c:	2b07      	cmp	r3, #7
 800a13e:	d9e7      	bls.n	800a110 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800a140:	f7ff ff5e 	bl	800a000 <OLED_Refresh_Gram>
}
 800a144:	bf00      	nop
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	20005c50 	.word	0x20005c50

0800a150 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	4603      	mov	r3, r0
 800a158:	71fb      	strb	r3, [r7, #7]
 800a15a:	460b      	mov	r3, r1
 800a15c:	71bb      	strb	r3, [r7, #6]
 800a15e:	4613      	mov	r3, r2
 800a160:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800a162:	2300      	movs	r3, #0
 800a164:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800a166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	db41      	blt.n	800a1f2 <OLED_DrawPoint+0xa2>
 800a16e:	79bb      	ldrb	r3, [r7, #6]
 800a170:	2b3f      	cmp	r3, #63	; 0x3f
 800a172:	d83e      	bhi.n	800a1f2 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800a174:	79bb      	ldrb	r3, [r7, #6]
 800a176:	08db      	lsrs	r3, r3, #3
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	f1c3 0307 	rsb	r3, r3, #7
 800a17e:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800a180:	79bb      	ldrb	r3, [r7, #6]
 800a182:	f003 0307 	and.w	r3, r3, #7
 800a186:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800a188:	7b7b      	ldrb	r3, [r7, #13]
 800a18a:	f1c3 0307 	rsb	r3, r3, #7
 800a18e:	2201      	movs	r2, #1
 800a190:	fa02 f303 	lsl.w	r3, r2, r3
 800a194:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800a196:	797b      	ldrb	r3, [r7, #5]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d012      	beq.n	800a1c2 <OLED_DrawPoint+0x72>
 800a19c:	79fa      	ldrb	r2, [r7, #7]
 800a19e:	7bbb      	ldrb	r3, [r7, #14]
 800a1a0:	4917      	ldr	r1, [pc, #92]	; (800a200 <OLED_DrawPoint+0xb0>)
 800a1a2:	00d2      	lsls	r2, r2, #3
 800a1a4:	440a      	add	r2, r1
 800a1a6:	4413      	add	r3, r2
 800a1a8:	7818      	ldrb	r0, [r3, #0]
 800a1aa:	79fa      	ldrb	r2, [r7, #7]
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
 800a1ae:	7bf9      	ldrb	r1, [r7, #15]
 800a1b0:	4301      	orrs	r1, r0
 800a1b2:	b2c8      	uxtb	r0, r1
 800a1b4:	4912      	ldr	r1, [pc, #72]	; (800a200 <OLED_DrawPoint+0xb0>)
 800a1b6:	00d2      	lsls	r2, r2, #3
 800a1b8:	440a      	add	r2, r1
 800a1ba:	4413      	add	r3, r2
 800a1bc:	4602      	mov	r2, r0
 800a1be:	701a      	strb	r2, [r3, #0]
 800a1c0:	e018      	b.n	800a1f4 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800a1c2:	79fa      	ldrb	r2, [r7, #7]
 800a1c4:	7bbb      	ldrb	r3, [r7, #14]
 800a1c6:	490e      	ldr	r1, [pc, #56]	; (800a200 <OLED_DrawPoint+0xb0>)
 800a1c8:	00d2      	lsls	r2, r2, #3
 800a1ca:	440a      	add	r2, r1
 800a1cc:	4413      	add	r3, r2
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	b25a      	sxtb	r2, r3
 800a1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1d6:	43db      	mvns	r3, r3
 800a1d8:	b25b      	sxtb	r3, r3
 800a1da:	4013      	ands	r3, r2
 800a1dc:	b259      	sxtb	r1, r3
 800a1de:	79fa      	ldrb	r2, [r7, #7]
 800a1e0:	7bbb      	ldrb	r3, [r7, #14]
 800a1e2:	b2c8      	uxtb	r0, r1
 800a1e4:	4906      	ldr	r1, [pc, #24]	; (800a200 <OLED_DrawPoint+0xb0>)
 800a1e6:	00d2      	lsls	r2, r2, #3
 800a1e8:	440a      	add	r2, r1
 800a1ea:	4413      	add	r3, r2
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	701a      	strb	r2, [r3, #0]
 800a1f0:	e000      	b.n	800a1f4 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800a1f2:	bf00      	nop
}
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	20005c50 	.word	0x20005c50

0800a204 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800a204:	b590      	push	{r4, r7, lr}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	4604      	mov	r4, r0
 800a20c:	4608      	mov	r0, r1
 800a20e:	4611      	mov	r1, r2
 800a210:	461a      	mov	r2, r3
 800a212:	4623      	mov	r3, r4
 800a214:	71fb      	strb	r3, [r7, #7]
 800a216:	4603      	mov	r3, r0
 800a218:	71bb      	strb	r3, [r7, #6]
 800a21a:	460b      	mov	r3, r1
 800a21c:	717b      	strb	r3, [r7, #5]
 800a21e:	4613      	mov	r3, r2
 800a220:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800a222:	79bb      	ldrb	r3, [r7, #6]
 800a224:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800a226:	797b      	ldrb	r3, [r7, #5]
 800a228:	3b20      	subs	r3, #32
 800a22a:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800a22c:	2300      	movs	r3, #0
 800a22e:	73bb      	strb	r3, [r7, #14]
 800a230:	e04d      	b.n	800a2ce <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800a232:	793b      	ldrb	r3, [r7, #4]
 800a234:	2b0c      	cmp	r3, #12
 800a236:	d10b      	bne.n	800a250 <OLED_ShowChar+0x4c>
 800a238:	797a      	ldrb	r2, [r7, #5]
 800a23a:	7bb9      	ldrb	r1, [r7, #14]
 800a23c:	4828      	ldr	r0, [pc, #160]	; (800a2e0 <OLED_ShowChar+0xdc>)
 800a23e:	4613      	mov	r3, r2
 800a240:	005b      	lsls	r3, r3, #1
 800a242:	4413      	add	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4403      	add	r3, r0
 800a248:	440b      	add	r3, r1
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	73fb      	strb	r3, [r7, #15]
 800a24e:	e007      	b.n	800a260 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800a250:	797a      	ldrb	r2, [r7, #5]
 800a252:	7bbb      	ldrb	r3, [r7, #14]
 800a254:	4923      	ldr	r1, [pc, #140]	; (800a2e4 <OLED_ShowChar+0xe0>)
 800a256:	0112      	lsls	r2, r2, #4
 800a258:	440a      	add	r2, r1
 800a25a:	4413      	add	r3, r2
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800a260:	2300      	movs	r3, #0
 800a262:	737b      	strb	r3, [r7, #13]
 800a264:	e02d      	b.n	800a2c2 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800a266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	da07      	bge.n	800a27e <OLED_ShowChar+0x7a>
 800a26e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a272:	79b9      	ldrb	r1, [r7, #6]
 800a274:	79fb      	ldrb	r3, [r7, #7]
 800a276:	4618      	mov	r0, r3
 800a278:	f7ff ff6a 	bl	800a150 <OLED_DrawPoint>
 800a27c:	e00c      	b.n	800a298 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800a27e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a282:	2b00      	cmp	r3, #0
 800a284:	bf0c      	ite	eq
 800a286:	2301      	moveq	r3, #1
 800a288:	2300      	movne	r3, #0
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	461a      	mov	r2, r3
 800a28e:	79b9      	ldrb	r1, [r7, #6]
 800a290:	79fb      	ldrb	r3, [r7, #7]
 800a292:	4618      	mov	r0, r3
 800a294:	f7ff ff5c 	bl	800a150 <OLED_DrawPoint>
			temp<<=1;
 800a298:	7bfb      	ldrb	r3, [r7, #15]
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	73fb      	strb	r3, [r7, #15]
			y++;
 800a29e:	79bb      	ldrb	r3, [r7, #6]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800a2a4:	79ba      	ldrb	r2, [r7, #6]
 800a2a6:	7b3b      	ldrb	r3, [r7, #12]
 800a2a8:	1ad2      	subs	r2, r2, r3
 800a2aa:	793b      	ldrb	r3, [r7, #4]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d105      	bne.n	800a2bc <OLED_ShowChar+0xb8>
			{
				y=y0;
 800a2b0:	7b3b      	ldrb	r3, [r7, #12]
 800a2b2:	71bb      	strb	r3, [r7, #6]
				x++;
 800a2b4:	79fb      	ldrb	r3, [r7, #7]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	71fb      	strb	r3, [r7, #7]
				break;
 800a2ba:	e005      	b.n	800a2c8 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800a2bc:	7b7b      	ldrb	r3, [r7, #13]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	737b      	strb	r3, [r7, #13]
 800a2c2:	7b7b      	ldrb	r3, [r7, #13]
 800a2c4:	2b07      	cmp	r3, #7
 800a2c6:	d9ce      	bls.n	800a266 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800a2c8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	73bb      	strb	r3, [r7, #14]
 800a2ce:	7bba      	ldrb	r2, [r7, #14]
 800a2d0:	793b      	ldrb	r3, [r7, #4]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d3ad      	bcc.n	800a232 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800a2d6:	bf00      	nop
 800a2d8:	bf00      	nop
 800a2da:	3714      	adds	r7, #20
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd90      	pop	{r4, r7, pc}
 800a2e0:	0800bd58 	.word	0x0800bd58
 800a2e4:	0800c1cc 	.word	0x0800c1cc

0800a2e8 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af02      	add	r7, sp, #8
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	603a      	str	r2, [r7, #0]
 800a2f2:	71fb      	strb	r3, [r7, #7]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800a2f8:	e01f      	b.n	800a33a <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800a2fa:	79fb      	ldrb	r3, [r7, #7]
 800a2fc:	2b7a      	cmp	r3, #122	; 0x7a
 800a2fe:	d904      	bls.n	800a30a <OLED_ShowString+0x22>
 800a300:	2300      	movs	r3, #0
 800a302:	71fb      	strb	r3, [r7, #7]
 800a304:	79bb      	ldrb	r3, [r7, #6]
 800a306:	3310      	adds	r3, #16
 800a308:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800a30a:	79bb      	ldrb	r3, [r7, #6]
 800a30c:	2b3a      	cmp	r3, #58	; 0x3a
 800a30e:	d905      	bls.n	800a31c <OLED_ShowString+0x34>
 800a310:	2300      	movs	r3, #0
 800a312:	71fb      	strb	r3, [r7, #7]
 800a314:	79fb      	ldrb	r3, [r7, #7]
 800a316:	71bb      	strb	r3, [r7, #6]
 800a318:	f7ff fef4 	bl	800a104 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	781a      	ldrb	r2, [r3, #0]
 800a320:	79b9      	ldrb	r1, [r7, #6]
 800a322:	79f8      	ldrb	r0, [r7, #7]
 800a324:	2301      	movs	r3, #1
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	230c      	movs	r3, #12
 800a32a:	f7ff ff6b 	bl	800a204 <OLED_ShowChar>
        x+=8;
 800a32e:	79fb      	ldrb	r3, [r7, #7]
 800a330:	3308      	adds	r3, #8
 800a332:	71fb      	strb	r3, [r7, #7]
        p++;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	3301      	adds	r3, #1
 800a338:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1db      	bne.n	800a2fa <OLED_ShowString+0x12>
    }  
}	 
 800a342:	bf00      	nop
 800a344:	bf00      	nop
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <OLED_Init>:

void OLED_Init(void)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800a350:	f7fa f8ca 	bl	80044e8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800a354:	4b41      	ldr	r3, [pc, #260]	; (800a45c <OLED_Init+0x110>)
 800a356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a358:	4a40      	ldr	r2, [pc, #256]	; (800a45c <OLED_Init+0x110>)
 800a35a:	f023 0301 	bic.w	r3, r3, #1
 800a35e:	6713      	str	r3, [r2, #112]	; 0x70
 800a360:	4b3e      	ldr	r3, [pc, #248]	; (800a45c <OLED_Init+0x110>)
 800a362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a364:	4a3d      	ldr	r2, [pc, #244]	; (800a45c <OLED_Init+0x110>)
 800a366:	f023 0304 	bic.w	r3, r3, #4
 800a36a:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800a36c:	f7fa f8d0 	bl	8004510 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800a370:	2200      	movs	r2, #0
 800a372:	2180      	movs	r1, #128	; 0x80
 800a374:	483a      	ldr	r0, [pc, #232]	; (800a460 <OLED_Init+0x114>)
 800a376:	f7f9 f8c3 	bl	8003500 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800a37a:	2064      	movs	r0, #100	; 0x64
 800a37c:	f7f8 f95c 	bl	8002638 <HAL_Delay>
	OLED_RST_Set();
 800a380:	2201      	movs	r2, #1
 800a382:	2180      	movs	r1, #128	; 0x80
 800a384:	4836      	ldr	r0, [pc, #216]	; (800a460 <OLED_Init+0x114>)
 800a386:	f7f9 f8bb 	bl	8003500 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800a38a:	2100      	movs	r1, #0
 800a38c:	20ae      	movs	r0, #174	; 0xae
 800a38e:	f7ff fe6f 	bl	800a070 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800a392:	2100      	movs	r1, #0
 800a394:	20d5      	movs	r0, #213	; 0xd5
 800a396:	f7ff fe6b 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800a39a:	2100      	movs	r1, #0
 800a39c:	2050      	movs	r0, #80	; 0x50
 800a39e:	f7ff fe67 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	20a8      	movs	r0, #168	; 0xa8
 800a3a6:	f7ff fe63 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	203f      	movs	r0, #63	; 0x3f
 800a3ae:	f7ff fe5f 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	20d3      	movs	r0, #211	; 0xd3
 800a3b6:	f7ff fe5b 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	2000      	movs	r0, #0
 800a3be:	f7ff fe57 	bl	800a070 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	2040      	movs	r0, #64	; 0x40
 800a3c6:	f7ff fe53 	bl	800a070 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	208d      	movs	r0, #141	; 0x8d
 800a3ce:	f7ff fe4f 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	2014      	movs	r0, #20
 800a3d6:	f7ff fe4b 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800a3da:	2100      	movs	r1, #0
 800a3dc:	2020      	movs	r0, #32
 800a3de:	f7ff fe47 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	2002      	movs	r0, #2
 800a3e6:	f7ff fe43 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	20a1      	movs	r0, #161	; 0xa1
 800a3ee:	f7ff fe3f 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	20c0      	movs	r0, #192	; 0xc0
 800a3f6:	f7ff fe3b 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	20da      	movs	r0, #218	; 0xda
 800a3fe:	f7ff fe37 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800a402:	2100      	movs	r1, #0
 800a404:	2012      	movs	r0, #18
 800a406:	f7ff fe33 	bl	800a070 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800a40a:	2100      	movs	r1, #0
 800a40c:	2081      	movs	r0, #129	; 0x81
 800a40e:	f7ff fe2f 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800a412:	2100      	movs	r1, #0
 800a414:	20ef      	movs	r0, #239	; 0xef
 800a416:	f7ff fe2b 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800a41a:	2100      	movs	r1, #0
 800a41c:	20d9      	movs	r0, #217	; 0xd9
 800a41e:	f7ff fe27 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800a422:	2100      	movs	r1, #0
 800a424:	20f1      	movs	r0, #241	; 0xf1
 800a426:	f7ff fe23 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800a42a:	2100      	movs	r1, #0
 800a42c:	20db      	movs	r0, #219	; 0xdb
 800a42e:	f7ff fe1f 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800a432:	2100      	movs	r1, #0
 800a434:	2030      	movs	r0, #48	; 0x30
 800a436:	f7ff fe1b 	bl	800a070 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800a43a:	2100      	movs	r1, #0
 800a43c:	20a4      	movs	r0, #164	; 0xa4
 800a43e:	f7ff fe17 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800a442:	2100      	movs	r1, #0
 800a444:	20a6      	movs	r0, #166	; 0xa6
 800a446:	f7ff fe13 	bl	800a070 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800a44a:	2100      	movs	r1, #0
 800a44c:	20af      	movs	r0, #175	; 0xaf
 800a44e:	f7ff fe0f 	bl	800a070 <OLED_WR_Byte>
	OLED_Clear(); 
 800a452:	f7ff fe57 	bl	800a104 <OLED_Clear>
 800a456:	bf00      	nop
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	40023800 	.word	0x40023800
 800a460:	40021000 	.word	0x40021000

0800a464 <__errno>:
 800a464:	4b01      	ldr	r3, [pc, #4]	; (800a46c <__errno+0x8>)
 800a466:	6818      	ldr	r0, [r3, #0]
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	20000010 	.word	0x20000010

0800a470 <__libc_init_array>:
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	4d0d      	ldr	r5, [pc, #52]	; (800a4a8 <__libc_init_array+0x38>)
 800a474:	4c0d      	ldr	r4, [pc, #52]	; (800a4ac <__libc_init_array+0x3c>)
 800a476:	1b64      	subs	r4, r4, r5
 800a478:	10a4      	asrs	r4, r4, #2
 800a47a:	2600      	movs	r6, #0
 800a47c:	42a6      	cmp	r6, r4
 800a47e:	d109      	bne.n	800a494 <__libc_init_array+0x24>
 800a480:	4d0b      	ldr	r5, [pc, #44]	; (800a4b0 <__libc_init_array+0x40>)
 800a482:	4c0c      	ldr	r4, [pc, #48]	; (800a4b4 <__libc_init_array+0x44>)
 800a484:	f001 fbaa 	bl	800bbdc <_init>
 800a488:	1b64      	subs	r4, r4, r5
 800a48a:	10a4      	asrs	r4, r4, #2
 800a48c:	2600      	movs	r6, #0
 800a48e:	42a6      	cmp	r6, r4
 800a490:	d105      	bne.n	800a49e <__libc_init_array+0x2e>
 800a492:	bd70      	pop	{r4, r5, r6, pc}
 800a494:	f855 3b04 	ldr.w	r3, [r5], #4
 800a498:	4798      	blx	r3
 800a49a:	3601      	adds	r6, #1
 800a49c:	e7ee      	b.n	800a47c <__libc_init_array+0xc>
 800a49e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4a2:	4798      	blx	r3
 800a4a4:	3601      	adds	r6, #1
 800a4a6:	e7f2      	b.n	800a48e <__libc_init_array+0x1e>
 800a4a8:	0800c828 	.word	0x0800c828
 800a4ac:	0800c828 	.word	0x0800c828
 800a4b0:	0800c828 	.word	0x0800c828
 800a4b4:	0800c82c 	.word	0x0800c82c

0800a4b8 <memcpy>:
 800a4b8:	440a      	add	r2, r1
 800a4ba:	4291      	cmp	r1, r2
 800a4bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4c0:	d100      	bne.n	800a4c4 <memcpy+0xc>
 800a4c2:	4770      	bx	lr
 800a4c4:	b510      	push	{r4, lr}
 800a4c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4ce:	4291      	cmp	r1, r2
 800a4d0:	d1f9      	bne.n	800a4c6 <memcpy+0xe>
 800a4d2:	bd10      	pop	{r4, pc}

0800a4d4 <memset>:
 800a4d4:	4402      	add	r2, r0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d100      	bne.n	800a4de <memset+0xa>
 800a4dc:	4770      	bx	lr
 800a4de:	f803 1b01 	strb.w	r1, [r3], #1
 800a4e2:	e7f9      	b.n	800a4d8 <memset+0x4>

0800a4e4 <siprintf>:
 800a4e4:	b40e      	push	{r1, r2, r3}
 800a4e6:	b500      	push	{lr}
 800a4e8:	b09c      	sub	sp, #112	; 0x70
 800a4ea:	ab1d      	add	r3, sp, #116	; 0x74
 800a4ec:	9002      	str	r0, [sp, #8]
 800a4ee:	9006      	str	r0, [sp, #24]
 800a4f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4f4:	4809      	ldr	r0, [pc, #36]	; (800a51c <siprintf+0x38>)
 800a4f6:	9107      	str	r1, [sp, #28]
 800a4f8:	9104      	str	r1, [sp, #16]
 800a4fa:	4909      	ldr	r1, [pc, #36]	; (800a520 <siprintf+0x3c>)
 800a4fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a500:	9105      	str	r1, [sp, #20]
 800a502:	6800      	ldr	r0, [r0, #0]
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	a902      	add	r1, sp, #8
 800a508:	f000 f868 	bl	800a5dc <_svfiprintf_r>
 800a50c:	9b02      	ldr	r3, [sp, #8]
 800a50e:	2200      	movs	r2, #0
 800a510:	701a      	strb	r2, [r3, #0]
 800a512:	b01c      	add	sp, #112	; 0x70
 800a514:	f85d eb04 	ldr.w	lr, [sp], #4
 800a518:	b003      	add	sp, #12
 800a51a:	4770      	bx	lr
 800a51c:	20000010 	.word	0x20000010
 800a520:	ffff0208 	.word	0xffff0208

0800a524 <__ssputs_r>:
 800a524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a528:	688e      	ldr	r6, [r1, #8]
 800a52a:	429e      	cmp	r6, r3
 800a52c:	4682      	mov	sl, r0
 800a52e:	460c      	mov	r4, r1
 800a530:	4690      	mov	r8, r2
 800a532:	461f      	mov	r7, r3
 800a534:	d838      	bhi.n	800a5a8 <__ssputs_r+0x84>
 800a536:	898a      	ldrh	r2, [r1, #12]
 800a538:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a53c:	d032      	beq.n	800a5a4 <__ssputs_r+0x80>
 800a53e:	6825      	ldr	r5, [r4, #0]
 800a540:	6909      	ldr	r1, [r1, #16]
 800a542:	eba5 0901 	sub.w	r9, r5, r1
 800a546:	6965      	ldr	r5, [r4, #20]
 800a548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a54c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a550:	3301      	adds	r3, #1
 800a552:	444b      	add	r3, r9
 800a554:	106d      	asrs	r5, r5, #1
 800a556:	429d      	cmp	r5, r3
 800a558:	bf38      	it	cc
 800a55a:	461d      	movcc	r5, r3
 800a55c:	0553      	lsls	r3, r2, #21
 800a55e:	d531      	bpl.n	800a5c4 <__ssputs_r+0xa0>
 800a560:	4629      	mov	r1, r5
 800a562:	f000 fb55 	bl	800ac10 <_malloc_r>
 800a566:	4606      	mov	r6, r0
 800a568:	b950      	cbnz	r0, 800a580 <__ssputs_r+0x5c>
 800a56a:	230c      	movs	r3, #12
 800a56c:	f8ca 3000 	str.w	r3, [sl]
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a576:	81a3      	strh	r3, [r4, #12]
 800a578:	f04f 30ff 	mov.w	r0, #4294967295
 800a57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a580:	6921      	ldr	r1, [r4, #16]
 800a582:	464a      	mov	r2, r9
 800a584:	f7ff ff98 	bl	800a4b8 <memcpy>
 800a588:	89a3      	ldrh	r3, [r4, #12]
 800a58a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a58e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a592:	81a3      	strh	r3, [r4, #12]
 800a594:	6126      	str	r6, [r4, #16]
 800a596:	6165      	str	r5, [r4, #20]
 800a598:	444e      	add	r6, r9
 800a59a:	eba5 0509 	sub.w	r5, r5, r9
 800a59e:	6026      	str	r6, [r4, #0]
 800a5a0:	60a5      	str	r5, [r4, #8]
 800a5a2:	463e      	mov	r6, r7
 800a5a4:	42be      	cmp	r6, r7
 800a5a6:	d900      	bls.n	800a5aa <__ssputs_r+0x86>
 800a5a8:	463e      	mov	r6, r7
 800a5aa:	6820      	ldr	r0, [r4, #0]
 800a5ac:	4632      	mov	r2, r6
 800a5ae:	4641      	mov	r1, r8
 800a5b0:	f000 faa8 	bl	800ab04 <memmove>
 800a5b4:	68a3      	ldr	r3, [r4, #8]
 800a5b6:	1b9b      	subs	r3, r3, r6
 800a5b8:	60a3      	str	r3, [r4, #8]
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	4433      	add	r3, r6
 800a5be:	6023      	str	r3, [r4, #0]
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	e7db      	b.n	800a57c <__ssputs_r+0x58>
 800a5c4:	462a      	mov	r2, r5
 800a5c6:	f000 fb97 	bl	800acf8 <_realloc_r>
 800a5ca:	4606      	mov	r6, r0
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d1e1      	bne.n	800a594 <__ssputs_r+0x70>
 800a5d0:	6921      	ldr	r1, [r4, #16]
 800a5d2:	4650      	mov	r0, sl
 800a5d4:	f000 fab0 	bl	800ab38 <_free_r>
 800a5d8:	e7c7      	b.n	800a56a <__ssputs_r+0x46>
	...

0800a5dc <_svfiprintf_r>:
 800a5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e0:	4698      	mov	r8, r3
 800a5e2:	898b      	ldrh	r3, [r1, #12]
 800a5e4:	061b      	lsls	r3, r3, #24
 800a5e6:	b09d      	sub	sp, #116	; 0x74
 800a5e8:	4607      	mov	r7, r0
 800a5ea:	460d      	mov	r5, r1
 800a5ec:	4614      	mov	r4, r2
 800a5ee:	d50e      	bpl.n	800a60e <_svfiprintf_r+0x32>
 800a5f0:	690b      	ldr	r3, [r1, #16]
 800a5f2:	b963      	cbnz	r3, 800a60e <_svfiprintf_r+0x32>
 800a5f4:	2140      	movs	r1, #64	; 0x40
 800a5f6:	f000 fb0b 	bl	800ac10 <_malloc_r>
 800a5fa:	6028      	str	r0, [r5, #0]
 800a5fc:	6128      	str	r0, [r5, #16]
 800a5fe:	b920      	cbnz	r0, 800a60a <_svfiprintf_r+0x2e>
 800a600:	230c      	movs	r3, #12
 800a602:	603b      	str	r3, [r7, #0]
 800a604:	f04f 30ff 	mov.w	r0, #4294967295
 800a608:	e0d1      	b.n	800a7ae <_svfiprintf_r+0x1d2>
 800a60a:	2340      	movs	r3, #64	; 0x40
 800a60c:	616b      	str	r3, [r5, #20]
 800a60e:	2300      	movs	r3, #0
 800a610:	9309      	str	r3, [sp, #36]	; 0x24
 800a612:	2320      	movs	r3, #32
 800a614:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a618:	f8cd 800c 	str.w	r8, [sp, #12]
 800a61c:	2330      	movs	r3, #48	; 0x30
 800a61e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a7c8 <_svfiprintf_r+0x1ec>
 800a622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a626:	f04f 0901 	mov.w	r9, #1
 800a62a:	4623      	mov	r3, r4
 800a62c:	469a      	mov	sl, r3
 800a62e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a632:	b10a      	cbz	r2, 800a638 <_svfiprintf_r+0x5c>
 800a634:	2a25      	cmp	r2, #37	; 0x25
 800a636:	d1f9      	bne.n	800a62c <_svfiprintf_r+0x50>
 800a638:	ebba 0b04 	subs.w	fp, sl, r4
 800a63c:	d00b      	beq.n	800a656 <_svfiprintf_r+0x7a>
 800a63e:	465b      	mov	r3, fp
 800a640:	4622      	mov	r2, r4
 800a642:	4629      	mov	r1, r5
 800a644:	4638      	mov	r0, r7
 800a646:	f7ff ff6d 	bl	800a524 <__ssputs_r>
 800a64a:	3001      	adds	r0, #1
 800a64c:	f000 80aa 	beq.w	800a7a4 <_svfiprintf_r+0x1c8>
 800a650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a652:	445a      	add	r2, fp
 800a654:	9209      	str	r2, [sp, #36]	; 0x24
 800a656:	f89a 3000 	ldrb.w	r3, [sl]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f000 80a2 	beq.w	800a7a4 <_svfiprintf_r+0x1c8>
 800a660:	2300      	movs	r3, #0
 800a662:	f04f 32ff 	mov.w	r2, #4294967295
 800a666:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a66a:	f10a 0a01 	add.w	sl, sl, #1
 800a66e:	9304      	str	r3, [sp, #16]
 800a670:	9307      	str	r3, [sp, #28]
 800a672:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a676:	931a      	str	r3, [sp, #104]	; 0x68
 800a678:	4654      	mov	r4, sl
 800a67a:	2205      	movs	r2, #5
 800a67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a680:	4851      	ldr	r0, [pc, #324]	; (800a7c8 <_svfiprintf_r+0x1ec>)
 800a682:	f7f5 fda5 	bl	80001d0 <memchr>
 800a686:	9a04      	ldr	r2, [sp, #16]
 800a688:	b9d8      	cbnz	r0, 800a6c2 <_svfiprintf_r+0xe6>
 800a68a:	06d0      	lsls	r0, r2, #27
 800a68c:	bf44      	itt	mi
 800a68e:	2320      	movmi	r3, #32
 800a690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a694:	0711      	lsls	r1, r2, #28
 800a696:	bf44      	itt	mi
 800a698:	232b      	movmi	r3, #43	; 0x2b
 800a69a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a69e:	f89a 3000 	ldrb.w	r3, [sl]
 800a6a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6a4:	d015      	beq.n	800a6d2 <_svfiprintf_r+0xf6>
 800a6a6:	9a07      	ldr	r2, [sp, #28]
 800a6a8:	4654      	mov	r4, sl
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	f04f 0c0a 	mov.w	ip, #10
 800a6b0:	4621      	mov	r1, r4
 800a6b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6b6:	3b30      	subs	r3, #48	; 0x30
 800a6b8:	2b09      	cmp	r3, #9
 800a6ba:	d94e      	bls.n	800a75a <_svfiprintf_r+0x17e>
 800a6bc:	b1b0      	cbz	r0, 800a6ec <_svfiprintf_r+0x110>
 800a6be:	9207      	str	r2, [sp, #28]
 800a6c0:	e014      	b.n	800a6ec <_svfiprintf_r+0x110>
 800a6c2:	eba0 0308 	sub.w	r3, r0, r8
 800a6c6:	fa09 f303 	lsl.w	r3, r9, r3
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	9304      	str	r3, [sp, #16]
 800a6ce:	46a2      	mov	sl, r4
 800a6d0:	e7d2      	b.n	800a678 <_svfiprintf_r+0x9c>
 800a6d2:	9b03      	ldr	r3, [sp, #12]
 800a6d4:	1d19      	adds	r1, r3, #4
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	9103      	str	r1, [sp, #12]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	bfbb      	ittet	lt
 800a6de:	425b      	neglt	r3, r3
 800a6e0:	f042 0202 	orrlt.w	r2, r2, #2
 800a6e4:	9307      	strge	r3, [sp, #28]
 800a6e6:	9307      	strlt	r3, [sp, #28]
 800a6e8:	bfb8      	it	lt
 800a6ea:	9204      	strlt	r2, [sp, #16]
 800a6ec:	7823      	ldrb	r3, [r4, #0]
 800a6ee:	2b2e      	cmp	r3, #46	; 0x2e
 800a6f0:	d10c      	bne.n	800a70c <_svfiprintf_r+0x130>
 800a6f2:	7863      	ldrb	r3, [r4, #1]
 800a6f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6f6:	d135      	bne.n	800a764 <_svfiprintf_r+0x188>
 800a6f8:	9b03      	ldr	r3, [sp, #12]
 800a6fa:	1d1a      	adds	r2, r3, #4
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	9203      	str	r2, [sp, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	bfb8      	it	lt
 800a704:	f04f 33ff 	movlt.w	r3, #4294967295
 800a708:	3402      	adds	r4, #2
 800a70a:	9305      	str	r3, [sp, #20]
 800a70c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a7d8 <_svfiprintf_r+0x1fc>
 800a710:	7821      	ldrb	r1, [r4, #0]
 800a712:	2203      	movs	r2, #3
 800a714:	4650      	mov	r0, sl
 800a716:	f7f5 fd5b 	bl	80001d0 <memchr>
 800a71a:	b140      	cbz	r0, 800a72e <_svfiprintf_r+0x152>
 800a71c:	2340      	movs	r3, #64	; 0x40
 800a71e:	eba0 000a 	sub.w	r0, r0, sl
 800a722:	fa03 f000 	lsl.w	r0, r3, r0
 800a726:	9b04      	ldr	r3, [sp, #16]
 800a728:	4303      	orrs	r3, r0
 800a72a:	3401      	adds	r4, #1
 800a72c:	9304      	str	r3, [sp, #16]
 800a72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a732:	4826      	ldr	r0, [pc, #152]	; (800a7cc <_svfiprintf_r+0x1f0>)
 800a734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a738:	2206      	movs	r2, #6
 800a73a:	f7f5 fd49 	bl	80001d0 <memchr>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d038      	beq.n	800a7b4 <_svfiprintf_r+0x1d8>
 800a742:	4b23      	ldr	r3, [pc, #140]	; (800a7d0 <_svfiprintf_r+0x1f4>)
 800a744:	bb1b      	cbnz	r3, 800a78e <_svfiprintf_r+0x1b2>
 800a746:	9b03      	ldr	r3, [sp, #12]
 800a748:	3307      	adds	r3, #7
 800a74a:	f023 0307 	bic.w	r3, r3, #7
 800a74e:	3308      	adds	r3, #8
 800a750:	9303      	str	r3, [sp, #12]
 800a752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a754:	4433      	add	r3, r6
 800a756:	9309      	str	r3, [sp, #36]	; 0x24
 800a758:	e767      	b.n	800a62a <_svfiprintf_r+0x4e>
 800a75a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a75e:	460c      	mov	r4, r1
 800a760:	2001      	movs	r0, #1
 800a762:	e7a5      	b.n	800a6b0 <_svfiprintf_r+0xd4>
 800a764:	2300      	movs	r3, #0
 800a766:	3401      	adds	r4, #1
 800a768:	9305      	str	r3, [sp, #20]
 800a76a:	4619      	mov	r1, r3
 800a76c:	f04f 0c0a 	mov.w	ip, #10
 800a770:	4620      	mov	r0, r4
 800a772:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a776:	3a30      	subs	r2, #48	; 0x30
 800a778:	2a09      	cmp	r2, #9
 800a77a:	d903      	bls.n	800a784 <_svfiprintf_r+0x1a8>
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d0c5      	beq.n	800a70c <_svfiprintf_r+0x130>
 800a780:	9105      	str	r1, [sp, #20]
 800a782:	e7c3      	b.n	800a70c <_svfiprintf_r+0x130>
 800a784:	fb0c 2101 	mla	r1, ip, r1, r2
 800a788:	4604      	mov	r4, r0
 800a78a:	2301      	movs	r3, #1
 800a78c:	e7f0      	b.n	800a770 <_svfiprintf_r+0x194>
 800a78e:	ab03      	add	r3, sp, #12
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	462a      	mov	r2, r5
 800a794:	4b0f      	ldr	r3, [pc, #60]	; (800a7d4 <_svfiprintf_r+0x1f8>)
 800a796:	a904      	add	r1, sp, #16
 800a798:	4638      	mov	r0, r7
 800a79a:	f3af 8000 	nop.w
 800a79e:	1c42      	adds	r2, r0, #1
 800a7a0:	4606      	mov	r6, r0
 800a7a2:	d1d6      	bne.n	800a752 <_svfiprintf_r+0x176>
 800a7a4:	89ab      	ldrh	r3, [r5, #12]
 800a7a6:	065b      	lsls	r3, r3, #25
 800a7a8:	f53f af2c 	bmi.w	800a604 <_svfiprintf_r+0x28>
 800a7ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ae:	b01d      	add	sp, #116	; 0x74
 800a7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b4:	ab03      	add	r3, sp, #12
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	462a      	mov	r2, r5
 800a7ba:	4b06      	ldr	r3, [pc, #24]	; (800a7d4 <_svfiprintf_r+0x1f8>)
 800a7bc:	a904      	add	r1, sp, #16
 800a7be:	4638      	mov	r0, r7
 800a7c0:	f000 f87a 	bl	800a8b8 <_printf_i>
 800a7c4:	e7eb      	b.n	800a79e <_svfiprintf_r+0x1c2>
 800a7c6:	bf00      	nop
 800a7c8:	0800c7bc 	.word	0x0800c7bc
 800a7cc:	0800c7c6 	.word	0x0800c7c6
 800a7d0:	00000000 	.word	0x00000000
 800a7d4:	0800a525 	.word	0x0800a525
 800a7d8:	0800c7c2 	.word	0x0800c7c2

0800a7dc <_printf_common>:
 800a7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e0:	4616      	mov	r6, r2
 800a7e2:	4699      	mov	r9, r3
 800a7e4:	688a      	ldr	r2, [r1, #8]
 800a7e6:	690b      	ldr	r3, [r1, #16]
 800a7e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	bfb8      	it	lt
 800a7f0:	4613      	movlt	r3, r2
 800a7f2:	6033      	str	r3, [r6, #0]
 800a7f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7f8:	4607      	mov	r7, r0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	b10a      	cbz	r2, 800a802 <_printf_common+0x26>
 800a7fe:	3301      	adds	r3, #1
 800a800:	6033      	str	r3, [r6, #0]
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	0699      	lsls	r1, r3, #26
 800a806:	bf42      	ittt	mi
 800a808:	6833      	ldrmi	r3, [r6, #0]
 800a80a:	3302      	addmi	r3, #2
 800a80c:	6033      	strmi	r3, [r6, #0]
 800a80e:	6825      	ldr	r5, [r4, #0]
 800a810:	f015 0506 	ands.w	r5, r5, #6
 800a814:	d106      	bne.n	800a824 <_printf_common+0x48>
 800a816:	f104 0a19 	add.w	sl, r4, #25
 800a81a:	68e3      	ldr	r3, [r4, #12]
 800a81c:	6832      	ldr	r2, [r6, #0]
 800a81e:	1a9b      	subs	r3, r3, r2
 800a820:	42ab      	cmp	r3, r5
 800a822:	dc26      	bgt.n	800a872 <_printf_common+0x96>
 800a824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a828:	1e13      	subs	r3, r2, #0
 800a82a:	6822      	ldr	r2, [r4, #0]
 800a82c:	bf18      	it	ne
 800a82e:	2301      	movne	r3, #1
 800a830:	0692      	lsls	r2, r2, #26
 800a832:	d42b      	bmi.n	800a88c <_printf_common+0xb0>
 800a834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a838:	4649      	mov	r1, r9
 800a83a:	4638      	mov	r0, r7
 800a83c:	47c0      	blx	r8
 800a83e:	3001      	adds	r0, #1
 800a840:	d01e      	beq.n	800a880 <_printf_common+0xa4>
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	68e5      	ldr	r5, [r4, #12]
 800a846:	6832      	ldr	r2, [r6, #0]
 800a848:	f003 0306 	and.w	r3, r3, #6
 800a84c:	2b04      	cmp	r3, #4
 800a84e:	bf08      	it	eq
 800a850:	1aad      	subeq	r5, r5, r2
 800a852:	68a3      	ldr	r3, [r4, #8]
 800a854:	6922      	ldr	r2, [r4, #16]
 800a856:	bf0c      	ite	eq
 800a858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a85c:	2500      	movne	r5, #0
 800a85e:	4293      	cmp	r3, r2
 800a860:	bfc4      	itt	gt
 800a862:	1a9b      	subgt	r3, r3, r2
 800a864:	18ed      	addgt	r5, r5, r3
 800a866:	2600      	movs	r6, #0
 800a868:	341a      	adds	r4, #26
 800a86a:	42b5      	cmp	r5, r6
 800a86c:	d11a      	bne.n	800a8a4 <_printf_common+0xc8>
 800a86e:	2000      	movs	r0, #0
 800a870:	e008      	b.n	800a884 <_printf_common+0xa8>
 800a872:	2301      	movs	r3, #1
 800a874:	4652      	mov	r2, sl
 800a876:	4649      	mov	r1, r9
 800a878:	4638      	mov	r0, r7
 800a87a:	47c0      	blx	r8
 800a87c:	3001      	adds	r0, #1
 800a87e:	d103      	bne.n	800a888 <_printf_common+0xac>
 800a880:	f04f 30ff 	mov.w	r0, #4294967295
 800a884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a888:	3501      	adds	r5, #1
 800a88a:	e7c6      	b.n	800a81a <_printf_common+0x3e>
 800a88c:	18e1      	adds	r1, r4, r3
 800a88e:	1c5a      	adds	r2, r3, #1
 800a890:	2030      	movs	r0, #48	; 0x30
 800a892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a896:	4422      	add	r2, r4
 800a898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a89c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8a0:	3302      	adds	r3, #2
 800a8a2:	e7c7      	b.n	800a834 <_printf_common+0x58>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	4622      	mov	r2, r4
 800a8a8:	4649      	mov	r1, r9
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	47c0      	blx	r8
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	d0e6      	beq.n	800a880 <_printf_common+0xa4>
 800a8b2:	3601      	adds	r6, #1
 800a8b4:	e7d9      	b.n	800a86a <_printf_common+0x8e>
	...

0800a8b8 <_printf_i>:
 800a8b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8bc:	7e0f      	ldrb	r7, [r1, #24]
 800a8be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8c0:	2f78      	cmp	r7, #120	; 0x78
 800a8c2:	4691      	mov	r9, r2
 800a8c4:	4680      	mov	r8, r0
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	469a      	mov	sl, r3
 800a8ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8ce:	d807      	bhi.n	800a8e0 <_printf_i+0x28>
 800a8d0:	2f62      	cmp	r7, #98	; 0x62
 800a8d2:	d80a      	bhi.n	800a8ea <_printf_i+0x32>
 800a8d4:	2f00      	cmp	r7, #0
 800a8d6:	f000 80d8 	beq.w	800aa8a <_printf_i+0x1d2>
 800a8da:	2f58      	cmp	r7, #88	; 0x58
 800a8dc:	f000 80a3 	beq.w	800aa26 <_printf_i+0x16e>
 800a8e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8e8:	e03a      	b.n	800a960 <_printf_i+0xa8>
 800a8ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8ee:	2b15      	cmp	r3, #21
 800a8f0:	d8f6      	bhi.n	800a8e0 <_printf_i+0x28>
 800a8f2:	a101      	add	r1, pc, #4	; (adr r1, 800a8f8 <_printf_i+0x40>)
 800a8f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8f8:	0800a951 	.word	0x0800a951
 800a8fc:	0800a965 	.word	0x0800a965
 800a900:	0800a8e1 	.word	0x0800a8e1
 800a904:	0800a8e1 	.word	0x0800a8e1
 800a908:	0800a8e1 	.word	0x0800a8e1
 800a90c:	0800a8e1 	.word	0x0800a8e1
 800a910:	0800a965 	.word	0x0800a965
 800a914:	0800a8e1 	.word	0x0800a8e1
 800a918:	0800a8e1 	.word	0x0800a8e1
 800a91c:	0800a8e1 	.word	0x0800a8e1
 800a920:	0800a8e1 	.word	0x0800a8e1
 800a924:	0800aa71 	.word	0x0800aa71
 800a928:	0800a995 	.word	0x0800a995
 800a92c:	0800aa53 	.word	0x0800aa53
 800a930:	0800a8e1 	.word	0x0800a8e1
 800a934:	0800a8e1 	.word	0x0800a8e1
 800a938:	0800aa93 	.word	0x0800aa93
 800a93c:	0800a8e1 	.word	0x0800a8e1
 800a940:	0800a995 	.word	0x0800a995
 800a944:	0800a8e1 	.word	0x0800a8e1
 800a948:	0800a8e1 	.word	0x0800a8e1
 800a94c:	0800aa5b 	.word	0x0800aa5b
 800a950:	682b      	ldr	r3, [r5, #0]
 800a952:	1d1a      	adds	r2, r3, #4
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	602a      	str	r2, [r5, #0]
 800a958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a95c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a960:	2301      	movs	r3, #1
 800a962:	e0a3      	b.n	800aaac <_printf_i+0x1f4>
 800a964:	6820      	ldr	r0, [r4, #0]
 800a966:	6829      	ldr	r1, [r5, #0]
 800a968:	0606      	lsls	r6, r0, #24
 800a96a:	f101 0304 	add.w	r3, r1, #4
 800a96e:	d50a      	bpl.n	800a986 <_printf_i+0xce>
 800a970:	680e      	ldr	r6, [r1, #0]
 800a972:	602b      	str	r3, [r5, #0]
 800a974:	2e00      	cmp	r6, #0
 800a976:	da03      	bge.n	800a980 <_printf_i+0xc8>
 800a978:	232d      	movs	r3, #45	; 0x2d
 800a97a:	4276      	negs	r6, r6
 800a97c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a980:	485e      	ldr	r0, [pc, #376]	; (800aafc <_printf_i+0x244>)
 800a982:	230a      	movs	r3, #10
 800a984:	e019      	b.n	800a9ba <_printf_i+0x102>
 800a986:	680e      	ldr	r6, [r1, #0]
 800a988:	602b      	str	r3, [r5, #0]
 800a98a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a98e:	bf18      	it	ne
 800a990:	b236      	sxthne	r6, r6
 800a992:	e7ef      	b.n	800a974 <_printf_i+0xbc>
 800a994:	682b      	ldr	r3, [r5, #0]
 800a996:	6820      	ldr	r0, [r4, #0]
 800a998:	1d19      	adds	r1, r3, #4
 800a99a:	6029      	str	r1, [r5, #0]
 800a99c:	0601      	lsls	r1, r0, #24
 800a99e:	d501      	bpl.n	800a9a4 <_printf_i+0xec>
 800a9a0:	681e      	ldr	r6, [r3, #0]
 800a9a2:	e002      	b.n	800a9aa <_printf_i+0xf2>
 800a9a4:	0646      	lsls	r6, r0, #25
 800a9a6:	d5fb      	bpl.n	800a9a0 <_printf_i+0xe8>
 800a9a8:	881e      	ldrh	r6, [r3, #0]
 800a9aa:	4854      	ldr	r0, [pc, #336]	; (800aafc <_printf_i+0x244>)
 800a9ac:	2f6f      	cmp	r7, #111	; 0x6f
 800a9ae:	bf0c      	ite	eq
 800a9b0:	2308      	moveq	r3, #8
 800a9b2:	230a      	movne	r3, #10
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9ba:	6865      	ldr	r5, [r4, #4]
 800a9bc:	60a5      	str	r5, [r4, #8]
 800a9be:	2d00      	cmp	r5, #0
 800a9c0:	bfa2      	ittt	ge
 800a9c2:	6821      	ldrge	r1, [r4, #0]
 800a9c4:	f021 0104 	bicge.w	r1, r1, #4
 800a9c8:	6021      	strge	r1, [r4, #0]
 800a9ca:	b90e      	cbnz	r6, 800a9d0 <_printf_i+0x118>
 800a9cc:	2d00      	cmp	r5, #0
 800a9ce:	d04d      	beq.n	800aa6c <_printf_i+0x1b4>
 800a9d0:	4615      	mov	r5, r2
 800a9d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9d6:	fb03 6711 	mls	r7, r3, r1, r6
 800a9da:	5dc7      	ldrb	r7, [r0, r7]
 800a9dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9e0:	4637      	mov	r7, r6
 800a9e2:	42bb      	cmp	r3, r7
 800a9e4:	460e      	mov	r6, r1
 800a9e6:	d9f4      	bls.n	800a9d2 <_printf_i+0x11a>
 800a9e8:	2b08      	cmp	r3, #8
 800a9ea:	d10b      	bne.n	800aa04 <_printf_i+0x14c>
 800a9ec:	6823      	ldr	r3, [r4, #0]
 800a9ee:	07de      	lsls	r6, r3, #31
 800a9f0:	d508      	bpl.n	800aa04 <_printf_i+0x14c>
 800a9f2:	6923      	ldr	r3, [r4, #16]
 800a9f4:	6861      	ldr	r1, [r4, #4]
 800a9f6:	4299      	cmp	r1, r3
 800a9f8:	bfde      	ittt	le
 800a9fa:	2330      	movle	r3, #48	; 0x30
 800a9fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa00:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa04:	1b52      	subs	r2, r2, r5
 800aa06:	6122      	str	r2, [r4, #16]
 800aa08:	f8cd a000 	str.w	sl, [sp]
 800aa0c:	464b      	mov	r3, r9
 800aa0e:	aa03      	add	r2, sp, #12
 800aa10:	4621      	mov	r1, r4
 800aa12:	4640      	mov	r0, r8
 800aa14:	f7ff fee2 	bl	800a7dc <_printf_common>
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d14c      	bne.n	800aab6 <_printf_i+0x1fe>
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	b004      	add	sp, #16
 800aa22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa26:	4835      	ldr	r0, [pc, #212]	; (800aafc <_printf_i+0x244>)
 800aa28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa2c:	6829      	ldr	r1, [r5, #0]
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa34:	6029      	str	r1, [r5, #0]
 800aa36:	061d      	lsls	r5, r3, #24
 800aa38:	d514      	bpl.n	800aa64 <_printf_i+0x1ac>
 800aa3a:	07df      	lsls	r7, r3, #31
 800aa3c:	bf44      	itt	mi
 800aa3e:	f043 0320 	orrmi.w	r3, r3, #32
 800aa42:	6023      	strmi	r3, [r4, #0]
 800aa44:	b91e      	cbnz	r6, 800aa4e <_printf_i+0x196>
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	f023 0320 	bic.w	r3, r3, #32
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	2310      	movs	r3, #16
 800aa50:	e7b0      	b.n	800a9b4 <_printf_i+0xfc>
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	f043 0320 	orr.w	r3, r3, #32
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	2378      	movs	r3, #120	; 0x78
 800aa5c:	4828      	ldr	r0, [pc, #160]	; (800ab00 <_printf_i+0x248>)
 800aa5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa62:	e7e3      	b.n	800aa2c <_printf_i+0x174>
 800aa64:	0659      	lsls	r1, r3, #25
 800aa66:	bf48      	it	mi
 800aa68:	b2b6      	uxthmi	r6, r6
 800aa6a:	e7e6      	b.n	800aa3a <_printf_i+0x182>
 800aa6c:	4615      	mov	r5, r2
 800aa6e:	e7bb      	b.n	800a9e8 <_printf_i+0x130>
 800aa70:	682b      	ldr	r3, [r5, #0]
 800aa72:	6826      	ldr	r6, [r4, #0]
 800aa74:	6961      	ldr	r1, [r4, #20]
 800aa76:	1d18      	adds	r0, r3, #4
 800aa78:	6028      	str	r0, [r5, #0]
 800aa7a:	0635      	lsls	r5, r6, #24
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	d501      	bpl.n	800aa84 <_printf_i+0x1cc>
 800aa80:	6019      	str	r1, [r3, #0]
 800aa82:	e002      	b.n	800aa8a <_printf_i+0x1d2>
 800aa84:	0670      	lsls	r0, r6, #25
 800aa86:	d5fb      	bpl.n	800aa80 <_printf_i+0x1c8>
 800aa88:	8019      	strh	r1, [r3, #0]
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	6123      	str	r3, [r4, #16]
 800aa8e:	4615      	mov	r5, r2
 800aa90:	e7ba      	b.n	800aa08 <_printf_i+0x150>
 800aa92:	682b      	ldr	r3, [r5, #0]
 800aa94:	1d1a      	adds	r2, r3, #4
 800aa96:	602a      	str	r2, [r5, #0]
 800aa98:	681d      	ldr	r5, [r3, #0]
 800aa9a:	6862      	ldr	r2, [r4, #4]
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	f7f5 fb96 	bl	80001d0 <memchr>
 800aaa4:	b108      	cbz	r0, 800aaaa <_printf_i+0x1f2>
 800aaa6:	1b40      	subs	r0, r0, r5
 800aaa8:	6060      	str	r0, [r4, #4]
 800aaaa:	6863      	ldr	r3, [r4, #4]
 800aaac:	6123      	str	r3, [r4, #16]
 800aaae:	2300      	movs	r3, #0
 800aab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aab4:	e7a8      	b.n	800aa08 <_printf_i+0x150>
 800aab6:	6923      	ldr	r3, [r4, #16]
 800aab8:	462a      	mov	r2, r5
 800aaba:	4649      	mov	r1, r9
 800aabc:	4640      	mov	r0, r8
 800aabe:	47d0      	blx	sl
 800aac0:	3001      	adds	r0, #1
 800aac2:	d0ab      	beq.n	800aa1c <_printf_i+0x164>
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	079b      	lsls	r3, r3, #30
 800aac8:	d413      	bmi.n	800aaf2 <_printf_i+0x23a>
 800aaca:	68e0      	ldr	r0, [r4, #12]
 800aacc:	9b03      	ldr	r3, [sp, #12]
 800aace:	4298      	cmp	r0, r3
 800aad0:	bfb8      	it	lt
 800aad2:	4618      	movlt	r0, r3
 800aad4:	e7a4      	b.n	800aa20 <_printf_i+0x168>
 800aad6:	2301      	movs	r3, #1
 800aad8:	4632      	mov	r2, r6
 800aada:	4649      	mov	r1, r9
 800aadc:	4640      	mov	r0, r8
 800aade:	47d0      	blx	sl
 800aae0:	3001      	adds	r0, #1
 800aae2:	d09b      	beq.n	800aa1c <_printf_i+0x164>
 800aae4:	3501      	adds	r5, #1
 800aae6:	68e3      	ldr	r3, [r4, #12]
 800aae8:	9903      	ldr	r1, [sp, #12]
 800aaea:	1a5b      	subs	r3, r3, r1
 800aaec:	42ab      	cmp	r3, r5
 800aaee:	dcf2      	bgt.n	800aad6 <_printf_i+0x21e>
 800aaf0:	e7eb      	b.n	800aaca <_printf_i+0x212>
 800aaf2:	2500      	movs	r5, #0
 800aaf4:	f104 0619 	add.w	r6, r4, #25
 800aaf8:	e7f5      	b.n	800aae6 <_printf_i+0x22e>
 800aafa:	bf00      	nop
 800aafc:	0800c7cd 	.word	0x0800c7cd
 800ab00:	0800c7de 	.word	0x0800c7de

0800ab04 <memmove>:
 800ab04:	4288      	cmp	r0, r1
 800ab06:	b510      	push	{r4, lr}
 800ab08:	eb01 0402 	add.w	r4, r1, r2
 800ab0c:	d902      	bls.n	800ab14 <memmove+0x10>
 800ab0e:	4284      	cmp	r4, r0
 800ab10:	4623      	mov	r3, r4
 800ab12:	d807      	bhi.n	800ab24 <memmove+0x20>
 800ab14:	1e43      	subs	r3, r0, #1
 800ab16:	42a1      	cmp	r1, r4
 800ab18:	d008      	beq.n	800ab2c <memmove+0x28>
 800ab1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab22:	e7f8      	b.n	800ab16 <memmove+0x12>
 800ab24:	4402      	add	r2, r0
 800ab26:	4601      	mov	r1, r0
 800ab28:	428a      	cmp	r2, r1
 800ab2a:	d100      	bne.n	800ab2e <memmove+0x2a>
 800ab2c:	bd10      	pop	{r4, pc}
 800ab2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab36:	e7f7      	b.n	800ab28 <memmove+0x24>

0800ab38 <_free_r>:
 800ab38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab3a:	2900      	cmp	r1, #0
 800ab3c:	d044      	beq.n	800abc8 <_free_r+0x90>
 800ab3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab42:	9001      	str	r0, [sp, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f1a1 0404 	sub.w	r4, r1, #4
 800ab4a:	bfb8      	it	lt
 800ab4c:	18e4      	addlt	r4, r4, r3
 800ab4e:	f000 f913 	bl	800ad78 <__malloc_lock>
 800ab52:	4a1e      	ldr	r2, [pc, #120]	; (800abcc <_free_r+0x94>)
 800ab54:	9801      	ldr	r0, [sp, #4]
 800ab56:	6813      	ldr	r3, [r2, #0]
 800ab58:	b933      	cbnz	r3, 800ab68 <_free_r+0x30>
 800ab5a:	6063      	str	r3, [r4, #4]
 800ab5c:	6014      	str	r4, [r2, #0]
 800ab5e:	b003      	add	sp, #12
 800ab60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab64:	f000 b90e 	b.w	800ad84 <__malloc_unlock>
 800ab68:	42a3      	cmp	r3, r4
 800ab6a:	d908      	bls.n	800ab7e <_free_r+0x46>
 800ab6c:	6825      	ldr	r5, [r4, #0]
 800ab6e:	1961      	adds	r1, r4, r5
 800ab70:	428b      	cmp	r3, r1
 800ab72:	bf01      	itttt	eq
 800ab74:	6819      	ldreq	r1, [r3, #0]
 800ab76:	685b      	ldreq	r3, [r3, #4]
 800ab78:	1949      	addeq	r1, r1, r5
 800ab7a:	6021      	streq	r1, [r4, #0]
 800ab7c:	e7ed      	b.n	800ab5a <_free_r+0x22>
 800ab7e:	461a      	mov	r2, r3
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	b10b      	cbz	r3, 800ab88 <_free_r+0x50>
 800ab84:	42a3      	cmp	r3, r4
 800ab86:	d9fa      	bls.n	800ab7e <_free_r+0x46>
 800ab88:	6811      	ldr	r1, [r2, #0]
 800ab8a:	1855      	adds	r5, r2, r1
 800ab8c:	42a5      	cmp	r5, r4
 800ab8e:	d10b      	bne.n	800aba8 <_free_r+0x70>
 800ab90:	6824      	ldr	r4, [r4, #0]
 800ab92:	4421      	add	r1, r4
 800ab94:	1854      	adds	r4, r2, r1
 800ab96:	42a3      	cmp	r3, r4
 800ab98:	6011      	str	r1, [r2, #0]
 800ab9a:	d1e0      	bne.n	800ab5e <_free_r+0x26>
 800ab9c:	681c      	ldr	r4, [r3, #0]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	6053      	str	r3, [r2, #4]
 800aba2:	4421      	add	r1, r4
 800aba4:	6011      	str	r1, [r2, #0]
 800aba6:	e7da      	b.n	800ab5e <_free_r+0x26>
 800aba8:	d902      	bls.n	800abb0 <_free_r+0x78>
 800abaa:	230c      	movs	r3, #12
 800abac:	6003      	str	r3, [r0, #0]
 800abae:	e7d6      	b.n	800ab5e <_free_r+0x26>
 800abb0:	6825      	ldr	r5, [r4, #0]
 800abb2:	1961      	adds	r1, r4, r5
 800abb4:	428b      	cmp	r3, r1
 800abb6:	bf04      	itt	eq
 800abb8:	6819      	ldreq	r1, [r3, #0]
 800abba:	685b      	ldreq	r3, [r3, #4]
 800abbc:	6063      	str	r3, [r4, #4]
 800abbe:	bf04      	itt	eq
 800abc0:	1949      	addeq	r1, r1, r5
 800abc2:	6021      	streq	r1, [r4, #0]
 800abc4:	6054      	str	r4, [r2, #4]
 800abc6:	e7ca      	b.n	800ab5e <_free_r+0x26>
 800abc8:	b003      	add	sp, #12
 800abca:	bd30      	pop	{r4, r5, pc}
 800abcc:	20006050 	.word	0x20006050

0800abd0 <sbrk_aligned>:
 800abd0:	b570      	push	{r4, r5, r6, lr}
 800abd2:	4e0e      	ldr	r6, [pc, #56]	; (800ac0c <sbrk_aligned+0x3c>)
 800abd4:	460c      	mov	r4, r1
 800abd6:	6831      	ldr	r1, [r6, #0]
 800abd8:	4605      	mov	r5, r0
 800abda:	b911      	cbnz	r1, 800abe2 <sbrk_aligned+0x12>
 800abdc:	f000 f8bc 	bl	800ad58 <_sbrk_r>
 800abe0:	6030      	str	r0, [r6, #0]
 800abe2:	4621      	mov	r1, r4
 800abe4:	4628      	mov	r0, r5
 800abe6:	f000 f8b7 	bl	800ad58 <_sbrk_r>
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	d00a      	beq.n	800ac04 <sbrk_aligned+0x34>
 800abee:	1cc4      	adds	r4, r0, #3
 800abf0:	f024 0403 	bic.w	r4, r4, #3
 800abf4:	42a0      	cmp	r0, r4
 800abf6:	d007      	beq.n	800ac08 <sbrk_aligned+0x38>
 800abf8:	1a21      	subs	r1, r4, r0
 800abfa:	4628      	mov	r0, r5
 800abfc:	f000 f8ac 	bl	800ad58 <_sbrk_r>
 800ac00:	3001      	adds	r0, #1
 800ac02:	d101      	bne.n	800ac08 <sbrk_aligned+0x38>
 800ac04:	f04f 34ff 	mov.w	r4, #4294967295
 800ac08:	4620      	mov	r0, r4
 800ac0a:	bd70      	pop	{r4, r5, r6, pc}
 800ac0c:	20006054 	.word	0x20006054

0800ac10 <_malloc_r>:
 800ac10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac14:	1ccd      	adds	r5, r1, #3
 800ac16:	f025 0503 	bic.w	r5, r5, #3
 800ac1a:	3508      	adds	r5, #8
 800ac1c:	2d0c      	cmp	r5, #12
 800ac1e:	bf38      	it	cc
 800ac20:	250c      	movcc	r5, #12
 800ac22:	2d00      	cmp	r5, #0
 800ac24:	4607      	mov	r7, r0
 800ac26:	db01      	blt.n	800ac2c <_malloc_r+0x1c>
 800ac28:	42a9      	cmp	r1, r5
 800ac2a:	d905      	bls.n	800ac38 <_malloc_r+0x28>
 800ac2c:	230c      	movs	r3, #12
 800ac2e:	603b      	str	r3, [r7, #0]
 800ac30:	2600      	movs	r6, #0
 800ac32:	4630      	mov	r0, r6
 800ac34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac38:	4e2e      	ldr	r6, [pc, #184]	; (800acf4 <_malloc_r+0xe4>)
 800ac3a:	f000 f89d 	bl	800ad78 <__malloc_lock>
 800ac3e:	6833      	ldr	r3, [r6, #0]
 800ac40:	461c      	mov	r4, r3
 800ac42:	bb34      	cbnz	r4, 800ac92 <_malloc_r+0x82>
 800ac44:	4629      	mov	r1, r5
 800ac46:	4638      	mov	r0, r7
 800ac48:	f7ff ffc2 	bl	800abd0 <sbrk_aligned>
 800ac4c:	1c43      	adds	r3, r0, #1
 800ac4e:	4604      	mov	r4, r0
 800ac50:	d14d      	bne.n	800acee <_malloc_r+0xde>
 800ac52:	6834      	ldr	r4, [r6, #0]
 800ac54:	4626      	mov	r6, r4
 800ac56:	2e00      	cmp	r6, #0
 800ac58:	d140      	bne.n	800acdc <_malloc_r+0xcc>
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	4631      	mov	r1, r6
 800ac5e:	4638      	mov	r0, r7
 800ac60:	eb04 0803 	add.w	r8, r4, r3
 800ac64:	f000 f878 	bl	800ad58 <_sbrk_r>
 800ac68:	4580      	cmp	r8, r0
 800ac6a:	d13a      	bne.n	800ace2 <_malloc_r+0xd2>
 800ac6c:	6821      	ldr	r1, [r4, #0]
 800ac6e:	3503      	adds	r5, #3
 800ac70:	1a6d      	subs	r5, r5, r1
 800ac72:	f025 0503 	bic.w	r5, r5, #3
 800ac76:	3508      	adds	r5, #8
 800ac78:	2d0c      	cmp	r5, #12
 800ac7a:	bf38      	it	cc
 800ac7c:	250c      	movcc	r5, #12
 800ac7e:	4629      	mov	r1, r5
 800ac80:	4638      	mov	r0, r7
 800ac82:	f7ff ffa5 	bl	800abd0 <sbrk_aligned>
 800ac86:	3001      	adds	r0, #1
 800ac88:	d02b      	beq.n	800ace2 <_malloc_r+0xd2>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	442b      	add	r3, r5
 800ac8e:	6023      	str	r3, [r4, #0]
 800ac90:	e00e      	b.n	800acb0 <_malloc_r+0xa0>
 800ac92:	6822      	ldr	r2, [r4, #0]
 800ac94:	1b52      	subs	r2, r2, r5
 800ac96:	d41e      	bmi.n	800acd6 <_malloc_r+0xc6>
 800ac98:	2a0b      	cmp	r2, #11
 800ac9a:	d916      	bls.n	800acca <_malloc_r+0xba>
 800ac9c:	1961      	adds	r1, r4, r5
 800ac9e:	42a3      	cmp	r3, r4
 800aca0:	6025      	str	r5, [r4, #0]
 800aca2:	bf18      	it	ne
 800aca4:	6059      	strne	r1, [r3, #4]
 800aca6:	6863      	ldr	r3, [r4, #4]
 800aca8:	bf08      	it	eq
 800acaa:	6031      	streq	r1, [r6, #0]
 800acac:	5162      	str	r2, [r4, r5]
 800acae:	604b      	str	r3, [r1, #4]
 800acb0:	4638      	mov	r0, r7
 800acb2:	f104 060b 	add.w	r6, r4, #11
 800acb6:	f000 f865 	bl	800ad84 <__malloc_unlock>
 800acba:	f026 0607 	bic.w	r6, r6, #7
 800acbe:	1d23      	adds	r3, r4, #4
 800acc0:	1af2      	subs	r2, r6, r3
 800acc2:	d0b6      	beq.n	800ac32 <_malloc_r+0x22>
 800acc4:	1b9b      	subs	r3, r3, r6
 800acc6:	50a3      	str	r3, [r4, r2]
 800acc8:	e7b3      	b.n	800ac32 <_malloc_r+0x22>
 800acca:	6862      	ldr	r2, [r4, #4]
 800accc:	42a3      	cmp	r3, r4
 800acce:	bf0c      	ite	eq
 800acd0:	6032      	streq	r2, [r6, #0]
 800acd2:	605a      	strne	r2, [r3, #4]
 800acd4:	e7ec      	b.n	800acb0 <_malloc_r+0xa0>
 800acd6:	4623      	mov	r3, r4
 800acd8:	6864      	ldr	r4, [r4, #4]
 800acda:	e7b2      	b.n	800ac42 <_malloc_r+0x32>
 800acdc:	4634      	mov	r4, r6
 800acde:	6876      	ldr	r6, [r6, #4]
 800ace0:	e7b9      	b.n	800ac56 <_malloc_r+0x46>
 800ace2:	230c      	movs	r3, #12
 800ace4:	603b      	str	r3, [r7, #0]
 800ace6:	4638      	mov	r0, r7
 800ace8:	f000 f84c 	bl	800ad84 <__malloc_unlock>
 800acec:	e7a1      	b.n	800ac32 <_malloc_r+0x22>
 800acee:	6025      	str	r5, [r4, #0]
 800acf0:	e7de      	b.n	800acb0 <_malloc_r+0xa0>
 800acf2:	bf00      	nop
 800acf4:	20006050 	.word	0x20006050

0800acf8 <_realloc_r>:
 800acf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acfc:	4680      	mov	r8, r0
 800acfe:	4614      	mov	r4, r2
 800ad00:	460e      	mov	r6, r1
 800ad02:	b921      	cbnz	r1, 800ad0e <_realloc_r+0x16>
 800ad04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad08:	4611      	mov	r1, r2
 800ad0a:	f7ff bf81 	b.w	800ac10 <_malloc_r>
 800ad0e:	b92a      	cbnz	r2, 800ad1c <_realloc_r+0x24>
 800ad10:	f7ff ff12 	bl	800ab38 <_free_r>
 800ad14:	4625      	mov	r5, r4
 800ad16:	4628      	mov	r0, r5
 800ad18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad1c:	f000 f838 	bl	800ad90 <_malloc_usable_size_r>
 800ad20:	4284      	cmp	r4, r0
 800ad22:	4607      	mov	r7, r0
 800ad24:	d802      	bhi.n	800ad2c <_realloc_r+0x34>
 800ad26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad2a:	d812      	bhi.n	800ad52 <_realloc_r+0x5a>
 800ad2c:	4621      	mov	r1, r4
 800ad2e:	4640      	mov	r0, r8
 800ad30:	f7ff ff6e 	bl	800ac10 <_malloc_r>
 800ad34:	4605      	mov	r5, r0
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d0ed      	beq.n	800ad16 <_realloc_r+0x1e>
 800ad3a:	42bc      	cmp	r4, r7
 800ad3c:	4622      	mov	r2, r4
 800ad3e:	4631      	mov	r1, r6
 800ad40:	bf28      	it	cs
 800ad42:	463a      	movcs	r2, r7
 800ad44:	f7ff fbb8 	bl	800a4b8 <memcpy>
 800ad48:	4631      	mov	r1, r6
 800ad4a:	4640      	mov	r0, r8
 800ad4c:	f7ff fef4 	bl	800ab38 <_free_r>
 800ad50:	e7e1      	b.n	800ad16 <_realloc_r+0x1e>
 800ad52:	4635      	mov	r5, r6
 800ad54:	e7df      	b.n	800ad16 <_realloc_r+0x1e>
	...

0800ad58 <_sbrk_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4d06      	ldr	r5, [pc, #24]	; (800ad74 <_sbrk_r+0x1c>)
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	4604      	mov	r4, r0
 800ad60:	4608      	mov	r0, r1
 800ad62:	602b      	str	r3, [r5, #0]
 800ad64:	f7f7 fb84 	bl	8002470 <_sbrk>
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	d102      	bne.n	800ad72 <_sbrk_r+0x1a>
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	b103      	cbz	r3, 800ad72 <_sbrk_r+0x1a>
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	20006058 	.word	0x20006058

0800ad78 <__malloc_lock>:
 800ad78:	4801      	ldr	r0, [pc, #4]	; (800ad80 <__malloc_lock+0x8>)
 800ad7a:	f000 b811 	b.w	800ada0 <__retarget_lock_acquire_recursive>
 800ad7e:	bf00      	nop
 800ad80:	2000605c 	.word	0x2000605c

0800ad84 <__malloc_unlock>:
 800ad84:	4801      	ldr	r0, [pc, #4]	; (800ad8c <__malloc_unlock+0x8>)
 800ad86:	f000 b80c 	b.w	800ada2 <__retarget_lock_release_recursive>
 800ad8a:	bf00      	nop
 800ad8c:	2000605c 	.word	0x2000605c

0800ad90 <_malloc_usable_size_r>:
 800ad90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad94:	1f18      	subs	r0, r3, #4
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	bfbc      	itt	lt
 800ad9a:	580b      	ldrlt	r3, [r1, r0]
 800ad9c:	18c0      	addlt	r0, r0, r3
 800ad9e:	4770      	bx	lr

0800ada0 <__retarget_lock_acquire_recursive>:
 800ada0:	4770      	bx	lr

0800ada2 <__retarget_lock_release_recursive>:
 800ada2:	4770      	bx	lr

0800ada4 <pow>:
 800ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada6:	ed2d 8b02 	vpush	{d8}
 800adaa:	eeb0 8a40 	vmov.f32	s16, s0
 800adae:	eef0 8a60 	vmov.f32	s17, s1
 800adb2:	ec55 4b11 	vmov	r4, r5, d1
 800adb6:	f000 f867 	bl	800ae88 <__ieee754_pow>
 800adba:	4622      	mov	r2, r4
 800adbc:	462b      	mov	r3, r5
 800adbe:	4620      	mov	r0, r4
 800adc0:	4629      	mov	r1, r5
 800adc2:	ec57 6b10 	vmov	r6, r7, d0
 800adc6:	f7f5 fea9 	bl	8000b1c <__aeabi_dcmpun>
 800adca:	2800      	cmp	r0, #0
 800adcc:	d13b      	bne.n	800ae46 <pow+0xa2>
 800adce:	ec51 0b18 	vmov	r0, r1, d8
 800add2:	2200      	movs	r2, #0
 800add4:	2300      	movs	r3, #0
 800add6:	f7f5 fe6f 	bl	8000ab8 <__aeabi_dcmpeq>
 800adda:	b1b8      	cbz	r0, 800ae0c <pow+0x68>
 800addc:	2200      	movs	r2, #0
 800adde:	2300      	movs	r3, #0
 800ade0:	4620      	mov	r0, r4
 800ade2:	4629      	mov	r1, r5
 800ade4:	f7f5 fe68 	bl	8000ab8 <__aeabi_dcmpeq>
 800ade8:	2800      	cmp	r0, #0
 800adea:	d146      	bne.n	800ae7a <pow+0xd6>
 800adec:	ec45 4b10 	vmov	d0, r4, r5
 800adf0:	f000 fe63 	bl	800baba <finite>
 800adf4:	b338      	cbz	r0, 800ae46 <pow+0xa2>
 800adf6:	2200      	movs	r2, #0
 800adf8:	2300      	movs	r3, #0
 800adfa:	4620      	mov	r0, r4
 800adfc:	4629      	mov	r1, r5
 800adfe:	f7f5 fe65 	bl	8000acc <__aeabi_dcmplt>
 800ae02:	b300      	cbz	r0, 800ae46 <pow+0xa2>
 800ae04:	f7ff fb2e 	bl	800a464 <__errno>
 800ae08:	2322      	movs	r3, #34	; 0x22
 800ae0a:	e01b      	b.n	800ae44 <pow+0xa0>
 800ae0c:	ec47 6b10 	vmov	d0, r6, r7
 800ae10:	f000 fe53 	bl	800baba <finite>
 800ae14:	b9e0      	cbnz	r0, 800ae50 <pow+0xac>
 800ae16:	eeb0 0a48 	vmov.f32	s0, s16
 800ae1a:	eef0 0a68 	vmov.f32	s1, s17
 800ae1e:	f000 fe4c 	bl	800baba <finite>
 800ae22:	b1a8      	cbz	r0, 800ae50 <pow+0xac>
 800ae24:	ec45 4b10 	vmov	d0, r4, r5
 800ae28:	f000 fe47 	bl	800baba <finite>
 800ae2c:	b180      	cbz	r0, 800ae50 <pow+0xac>
 800ae2e:	4632      	mov	r2, r6
 800ae30:	463b      	mov	r3, r7
 800ae32:	4630      	mov	r0, r6
 800ae34:	4639      	mov	r1, r7
 800ae36:	f7f5 fe71 	bl	8000b1c <__aeabi_dcmpun>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d0e2      	beq.n	800ae04 <pow+0x60>
 800ae3e:	f7ff fb11 	bl	800a464 <__errno>
 800ae42:	2321      	movs	r3, #33	; 0x21
 800ae44:	6003      	str	r3, [r0, #0]
 800ae46:	ecbd 8b02 	vpop	{d8}
 800ae4a:	ec47 6b10 	vmov	d0, r6, r7
 800ae4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae50:	2200      	movs	r2, #0
 800ae52:	2300      	movs	r3, #0
 800ae54:	4630      	mov	r0, r6
 800ae56:	4639      	mov	r1, r7
 800ae58:	f7f5 fe2e 	bl	8000ab8 <__aeabi_dcmpeq>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d0f2      	beq.n	800ae46 <pow+0xa2>
 800ae60:	eeb0 0a48 	vmov.f32	s0, s16
 800ae64:	eef0 0a68 	vmov.f32	s1, s17
 800ae68:	f000 fe27 	bl	800baba <finite>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d0ea      	beq.n	800ae46 <pow+0xa2>
 800ae70:	ec45 4b10 	vmov	d0, r4, r5
 800ae74:	f000 fe21 	bl	800baba <finite>
 800ae78:	e7c3      	b.n	800ae02 <pow+0x5e>
 800ae7a:	4f01      	ldr	r7, [pc, #4]	; (800ae80 <pow+0xdc>)
 800ae7c:	2600      	movs	r6, #0
 800ae7e:	e7e2      	b.n	800ae46 <pow+0xa2>
 800ae80:	3ff00000 	.word	0x3ff00000
 800ae84:	00000000 	.word	0x00000000

0800ae88 <__ieee754_pow>:
 800ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	ed2d 8b06 	vpush	{d8-d10}
 800ae90:	b089      	sub	sp, #36	; 0x24
 800ae92:	ed8d 1b00 	vstr	d1, [sp]
 800ae96:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ae9a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ae9e:	ea58 0102 	orrs.w	r1, r8, r2
 800aea2:	ec57 6b10 	vmov	r6, r7, d0
 800aea6:	d115      	bne.n	800aed4 <__ieee754_pow+0x4c>
 800aea8:	19b3      	adds	r3, r6, r6
 800aeaa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800aeae:	4152      	adcs	r2, r2
 800aeb0:	4299      	cmp	r1, r3
 800aeb2:	4b89      	ldr	r3, [pc, #548]	; (800b0d8 <__ieee754_pow+0x250>)
 800aeb4:	4193      	sbcs	r3, r2
 800aeb6:	f080 84d2 	bcs.w	800b85e <__ieee754_pow+0x9d6>
 800aeba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aebe:	4630      	mov	r0, r6
 800aec0:	4639      	mov	r1, r7
 800aec2:	f7f5 f9db 	bl	800027c <__adddf3>
 800aec6:	ec41 0b10 	vmov	d0, r0, r1
 800aeca:	b009      	add	sp, #36	; 0x24
 800aecc:	ecbd 8b06 	vpop	{d8-d10}
 800aed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed4:	4b81      	ldr	r3, [pc, #516]	; (800b0dc <__ieee754_pow+0x254>)
 800aed6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800aeda:	429c      	cmp	r4, r3
 800aedc:	ee10 aa10 	vmov	sl, s0
 800aee0:	463d      	mov	r5, r7
 800aee2:	dc06      	bgt.n	800aef2 <__ieee754_pow+0x6a>
 800aee4:	d101      	bne.n	800aeea <__ieee754_pow+0x62>
 800aee6:	2e00      	cmp	r6, #0
 800aee8:	d1e7      	bne.n	800aeba <__ieee754_pow+0x32>
 800aeea:	4598      	cmp	r8, r3
 800aeec:	dc01      	bgt.n	800aef2 <__ieee754_pow+0x6a>
 800aeee:	d10f      	bne.n	800af10 <__ieee754_pow+0x88>
 800aef0:	b172      	cbz	r2, 800af10 <__ieee754_pow+0x88>
 800aef2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800aef6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800aefa:	ea55 050a 	orrs.w	r5, r5, sl
 800aefe:	d1dc      	bne.n	800aeba <__ieee754_pow+0x32>
 800af00:	e9dd 3200 	ldrd	r3, r2, [sp]
 800af04:	18db      	adds	r3, r3, r3
 800af06:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800af0a:	4152      	adcs	r2, r2
 800af0c:	429d      	cmp	r5, r3
 800af0e:	e7d0      	b.n	800aeb2 <__ieee754_pow+0x2a>
 800af10:	2d00      	cmp	r5, #0
 800af12:	da3b      	bge.n	800af8c <__ieee754_pow+0x104>
 800af14:	4b72      	ldr	r3, [pc, #456]	; (800b0e0 <__ieee754_pow+0x258>)
 800af16:	4598      	cmp	r8, r3
 800af18:	dc51      	bgt.n	800afbe <__ieee754_pow+0x136>
 800af1a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800af1e:	4598      	cmp	r8, r3
 800af20:	f340 84ac 	ble.w	800b87c <__ieee754_pow+0x9f4>
 800af24:	ea4f 5328 	mov.w	r3, r8, asr #20
 800af28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800af2c:	2b14      	cmp	r3, #20
 800af2e:	dd0f      	ble.n	800af50 <__ieee754_pow+0xc8>
 800af30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800af34:	fa22 f103 	lsr.w	r1, r2, r3
 800af38:	fa01 f303 	lsl.w	r3, r1, r3
 800af3c:	4293      	cmp	r3, r2
 800af3e:	f040 849d 	bne.w	800b87c <__ieee754_pow+0x9f4>
 800af42:	f001 0101 	and.w	r1, r1, #1
 800af46:	f1c1 0302 	rsb	r3, r1, #2
 800af4a:	9304      	str	r3, [sp, #16]
 800af4c:	b182      	cbz	r2, 800af70 <__ieee754_pow+0xe8>
 800af4e:	e05f      	b.n	800b010 <__ieee754_pow+0x188>
 800af50:	2a00      	cmp	r2, #0
 800af52:	d15b      	bne.n	800b00c <__ieee754_pow+0x184>
 800af54:	f1c3 0314 	rsb	r3, r3, #20
 800af58:	fa48 f103 	asr.w	r1, r8, r3
 800af5c:	fa01 f303 	lsl.w	r3, r1, r3
 800af60:	4543      	cmp	r3, r8
 800af62:	f040 8488 	bne.w	800b876 <__ieee754_pow+0x9ee>
 800af66:	f001 0101 	and.w	r1, r1, #1
 800af6a:	f1c1 0302 	rsb	r3, r1, #2
 800af6e:	9304      	str	r3, [sp, #16]
 800af70:	4b5c      	ldr	r3, [pc, #368]	; (800b0e4 <__ieee754_pow+0x25c>)
 800af72:	4598      	cmp	r8, r3
 800af74:	d132      	bne.n	800afdc <__ieee754_pow+0x154>
 800af76:	f1b9 0f00 	cmp.w	r9, #0
 800af7a:	f280 8478 	bge.w	800b86e <__ieee754_pow+0x9e6>
 800af7e:	4959      	ldr	r1, [pc, #356]	; (800b0e4 <__ieee754_pow+0x25c>)
 800af80:	4632      	mov	r2, r6
 800af82:	463b      	mov	r3, r7
 800af84:	2000      	movs	r0, #0
 800af86:	f7f5 fc59 	bl	800083c <__aeabi_ddiv>
 800af8a:	e79c      	b.n	800aec6 <__ieee754_pow+0x3e>
 800af8c:	2300      	movs	r3, #0
 800af8e:	9304      	str	r3, [sp, #16]
 800af90:	2a00      	cmp	r2, #0
 800af92:	d13d      	bne.n	800b010 <__ieee754_pow+0x188>
 800af94:	4b51      	ldr	r3, [pc, #324]	; (800b0dc <__ieee754_pow+0x254>)
 800af96:	4598      	cmp	r8, r3
 800af98:	d1ea      	bne.n	800af70 <__ieee754_pow+0xe8>
 800af9a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800af9e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800afa2:	ea53 030a 	orrs.w	r3, r3, sl
 800afa6:	f000 845a 	beq.w	800b85e <__ieee754_pow+0x9d6>
 800afaa:	4b4f      	ldr	r3, [pc, #316]	; (800b0e8 <__ieee754_pow+0x260>)
 800afac:	429c      	cmp	r4, r3
 800afae:	dd08      	ble.n	800afc2 <__ieee754_pow+0x13a>
 800afb0:	f1b9 0f00 	cmp.w	r9, #0
 800afb4:	f2c0 8457 	blt.w	800b866 <__ieee754_pow+0x9de>
 800afb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afbc:	e783      	b.n	800aec6 <__ieee754_pow+0x3e>
 800afbe:	2302      	movs	r3, #2
 800afc0:	e7e5      	b.n	800af8e <__ieee754_pow+0x106>
 800afc2:	f1b9 0f00 	cmp.w	r9, #0
 800afc6:	f04f 0000 	mov.w	r0, #0
 800afca:	f04f 0100 	mov.w	r1, #0
 800afce:	f6bf af7a 	bge.w	800aec6 <__ieee754_pow+0x3e>
 800afd2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800afd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800afda:	e774      	b.n	800aec6 <__ieee754_pow+0x3e>
 800afdc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800afe0:	d106      	bne.n	800aff0 <__ieee754_pow+0x168>
 800afe2:	4632      	mov	r2, r6
 800afe4:	463b      	mov	r3, r7
 800afe6:	4630      	mov	r0, r6
 800afe8:	4639      	mov	r1, r7
 800afea:	f7f5 fafd 	bl	80005e8 <__aeabi_dmul>
 800afee:	e76a      	b.n	800aec6 <__ieee754_pow+0x3e>
 800aff0:	4b3e      	ldr	r3, [pc, #248]	; (800b0ec <__ieee754_pow+0x264>)
 800aff2:	4599      	cmp	r9, r3
 800aff4:	d10c      	bne.n	800b010 <__ieee754_pow+0x188>
 800aff6:	2d00      	cmp	r5, #0
 800aff8:	db0a      	blt.n	800b010 <__ieee754_pow+0x188>
 800affa:	ec47 6b10 	vmov	d0, r6, r7
 800affe:	b009      	add	sp, #36	; 0x24
 800b000:	ecbd 8b06 	vpop	{d8-d10}
 800b004:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b008:	f000 bc6c 	b.w	800b8e4 <__ieee754_sqrt>
 800b00c:	2300      	movs	r3, #0
 800b00e:	9304      	str	r3, [sp, #16]
 800b010:	ec47 6b10 	vmov	d0, r6, r7
 800b014:	f000 fd48 	bl	800baa8 <fabs>
 800b018:	ec51 0b10 	vmov	r0, r1, d0
 800b01c:	f1ba 0f00 	cmp.w	sl, #0
 800b020:	d129      	bne.n	800b076 <__ieee754_pow+0x1ee>
 800b022:	b124      	cbz	r4, 800b02e <__ieee754_pow+0x1a6>
 800b024:	4b2f      	ldr	r3, [pc, #188]	; (800b0e4 <__ieee754_pow+0x25c>)
 800b026:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d123      	bne.n	800b076 <__ieee754_pow+0x1ee>
 800b02e:	f1b9 0f00 	cmp.w	r9, #0
 800b032:	da05      	bge.n	800b040 <__ieee754_pow+0x1b8>
 800b034:	4602      	mov	r2, r0
 800b036:	460b      	mov	r3, r1
 800b038:	2000      	movs	r0, #0
 800b03a:	492a      	ldr	r1, [pc, #168]	; (800b0e4 <__ieee754_pow+0x25c>)
 800b03c:	f7f5 fbfe 	bl	800083c <__aeabi_ddiv>
 800b040:	2d00      	cmp	r5, #0
 800b042:	f6bf af40 	bge.w	800aec6 <__ieee754_pow+0x3e>
 800b046:	9b04      	ldr	r3, [sp, #16]
 800b048:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b04c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b050:	4323      	orrs	r3, r4
 800b052:	d108      	bne.n	800b066 <__ieee754_pow+0x1de>
 800b054:	4602      	mov	r2, r0
 800b056:	460b      	mov	r3, r1
 800b058:	4610      	mov	r0, r2
 800b05a:	4619      	mov	r1, r3
 800b05c:	f7f5 f90c 	bl	8000278 <__aeabi_dsub>
 800b060:	4602      	mov	r2, r0
 800b062:	460b      	mov	r3, r1
 800b064:	e78f      	b.n	800af86 <__ieee754_pow+0xfe>
 800b066:	9b04      	ldr	r3, [sp, #16]
 800b068:	2b01      	cmp	r3, #1
 800b06a:	f47f af2c 	bne.w	800aec6 <__ieee754_pow+0x3e>
 800b06e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b072:	4619      	mov	r1, r3
 800b074:	e727      	b.n	800aec6 <__ieee754_pow+0x3e>
 800b076:	0feb      	lsrs	r3, r5, #31
 800b078:	3b01      	subs	r3, #1
 800b07a:	9306      	str	r3, [sp, #24]
 800b07c:	9a06      	ldr	r2, [sp, #24]
 800b07e:	9b04      	ldr	r3, [sp, #16]
 800b080:	4313      	orrs	r3, r2
 800b082:	d102      	bne.n	800b08a <__ieee754_pow+0x202>
 800b084:	4632      	mov	r2, r6
 800b086:	463b      	mov	r3, r7
 800b088:	e7e6      	b.n	800b058 <__ieee754_pow+0x1d0>
 800b08a:	4b19      	ldr	r3, [pc, #100]	; (800b0f0 <__ieee754_pow+0x268>)
 800b08c:	4598      	cmp	r8, r3
 800b08e:	f340 80fb 	ble.w	800b288 <__ieee754_pow+0x400>
 800b092:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b096:	4598      	cmp	r8, r3
 800b098:	4b13      	ldr	r3, [pc, #76]	; (800b0e8 <__ieee754_pow+0x260>)
 800b09a:	dd0c      	ble.n	800b0b6 <__ieee754_pow+0x22e>
 800b09c:	429c      	cmp	r4, r3
 800b09e:	dc0f      	bgt.n	800b0c0 <__ieee754_pow+0x238>
 800b0a0:	f1b9 0f00 	cmp.w	r9, #0
 800b0a4:	da0f      	bge.n	800b0c6 <__ieee754_pow+0x23e>
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	b009      	add	sp, #36	; 0x24
 800b0aa:	ecbd 8b06 	vpop	{d8-d10}
 800b0ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b2:	f000 bcf0 	b.w	800ba96 <__math_oflow>
 800b0b6:	429c      	cmp	r4, r3
 800b0b8:	dbf2      	blt.n	800b0a0 <__ieee754_pow+0x218>
 800b0ba:	4b0a      	ldr	r3, [pc, #40]	; (800b0e4 <__ieee754_pow+0x25c>)
 800b0bc:	429c      	cmp	r4, r3
 800b0be:	dd19      	ble.n	800b0f4 <__ieee754_pow+0x26c>
 800b0c0:	f1b9 0f00 	cmp.w	r9, #0
 800b0c4:	dcef      	bgt.n	800b0a6 <__ieee754_pow+0x21e>
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	b009      	add	sp, #36	; 0x24
 800b0ca:	ecbd 8b06 	vpop	{d8-d10}
 800b0ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d2:	f000 bcd7 	b.w	800ba84 <__math_uflow>
 800b0d6:	bf00      	nop
 800b0d8:	fff00000 	.word	0xfff00000
 800b0dc:	7ff00000 	.word	0x7ff00000
 800b0e0:	433fffff 	.word	0x433fffff
 800b0e4:	3ff00000 	.word	0x3ff00000
 800b0e8:	3fefffff 	.word	0x3fefffff
 800b0ec:	3fe00000 	.word	0x3fe00000
 800b0f0:	41e00000 	.word	0x41e00000
 800b0f4:	4b60      	ldr	r3, [pc, #384]	; (800b278 <__ieee754_pow+0x3f0>)
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f7f5 f8be 	bl	8000278 <__aeabi_dsub>
 800b0fc:	a354      	add	r3, pc, #336	; (adr r3, 800b250 <__ieee754_pow+0x3c8>)
 800b0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b102:	4604      	mov	r4, r0
 800b104:	460d      	mov	r5, r1
 800b106:	f7f5 fa6f 	bl	80005e8 <__aeabi_dmul>
 800b10a:	a353      	add	r3, pc, #332	; (adr r3, 800b258 <__ieee754_pow+0x3d0>)
 800b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b110:	4606      	mov	r6, r0
 800b112:	460f      	mov	r7, r1
 800b114:	4620      	mov	r0, r4
 800b116:	4629      	mov	r1, r5
 800b118:	f7f5 fa66 	bl	80005e8 <__aeabi_dmul>
 800b11c:	4b57      	ldr	r3, [pc, #348]	; (800b27c <__ieee754_pow+0x3f4>)
 800b11e:	4682      	mov	sl, r0
 800b120:	468b      	mov	fp, r1
 800b122:	2200      	movs	r2, #0
 800b124:	4620      	mov	r0, r4
 800b126:	4629      	mov	r1, r5
 800b128:	f7f5 fa5e 	bl	80005e8 <__aeabi_dmul>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	a14b      	add	r1, pc, #300	; (adr r1, 800b260 <__ieee754_pow+0x3d8>)
 800b132:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b136:	f7f5 f89f 	bl	8000278 <__aeabi_dsub>
 800b13a:	4622      	mov	r2, r4
 800b13c:	462b      	mov	r3, r5
 800b13e:	f7f5 fa53 	bl	80005e8 <__aeabi_dmul>
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
 800b146:	2000      	movs	r0, #0
 800b148:	494d      	ldr	r1, [pc, #308]	; (800b280 <__ieee754_pow+0x3f8>)
 800b14a:	f7f5 f895 	bl	8000278 <__aeabi_dsub>
 800b14e:	4622      	mov	r2, r4
 800b150:	4680      	mov	r8, r0
 800b152:	4689      	mov	r9, r1
 800b154:	462b      	mov	r3, r5
 800b156:	4620      	mov	r0, r4
 800b158:	4629      	mov	r1, r5
 800b15a:	f7f5 fa45 	bl	80005e8 <__aeabi_dmul>
 800b15e:	4602      	mov	r2, r0
 800b160:	460b      	mov	r3, r1
 800b162:	4640      	mov	r0, r8
 800b164:	4649      	mov	r1, r9
 800b166:	f7f5 fa3f 	bl	80005e8 <__aeabi_dmul>
 800b16a:	a33f      	add	r3, pc, #252	; (adr r3, 800b268 <__ieee754_pow+0x3e0>)
 800b16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b170:	f7f5 fa3a 	bl	80005e8 <__aeabi_dmul>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	4650      	mov	r0, sl
 800b17a:	4659      	mov	r1, fp
 800b17c:	f7f5 f87c 	bl	8000278 <__aeabi_dsub>
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	4680      	mov	r8, r0
 800b186:	4689      	mov	r9, r1
 800b188:	4630      	mov	r0, r6
 800b18a:	4639      	mov	r1, r7
 800b18c:	f7f5 f876 	bl	800027c <__adddf3>
 800b190:	2000      	movs	r0, #0
 800b192:	4632      	mov	r2, r6
 800b194:	463b      	mov	r3, r7
 800b196:	4604      	mov	r4, r0
 800b198:	460d      	mov	r5, r1
 800b19a:	f7f5 f86d 	bl	8000278 <__aeabi_dsub>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	f7f5 f867 	bl	8000278 <__aeabi_dsub>
 800b1aa:	9b04      	ldr	r3, [sp, #16]
 800b1ac:	9a06      	ldr	r2, [sp, #24]
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	4682      	mov	sl, r0
 800b1b4:	468b      	mov	fp, r1
 800b1b6:	f040 81e7 	bne.w	800b588 <__ieee754_pow+0x700>
 800b1ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b270 <__ieee754_pow+0x3e8>
 800b1be:	eeb0 8a47 	vmov.f32	s16, s14
 800b1c2:	eef0 8a67 	vmov.f32	s17, s15
 800b1c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b1ca:	2600      	movs	r6, #0
 800b1cc:	4632      	mov	r2, r6
 800b1ce:	463b      	mov	r3, r7
 800b1d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1d4:	f7f5 f850 	bl	8000278 <__aeabi_dsub>
 800b1d8:	4622      	mov	r2, r4
 800b1da:	462b      	mov	r3, r5
 800b1dc:	f7f5 fa04 	bl	80005e8 <__aeabi_dmul>
 800b1e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1e4:	4680      	mov	r8, r0
 800b1e6:	4689      	mov	r9, r1
 800b1e8:	4650      	mov	r0, sl
 800b1ea:	4659      	mov	r1, fp
 800b1ec:	f7f5 f9fc 	bl	80005e8 <__aeabi_dmul>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	4640      	mov	r0, r8
 800b1f6:	4649      	mov	r1, r9
 800b1f8:	f7f5 f840 	bl	800027c <__adddf3>
 800b1fc:	4632      	mov	r2, r6
 800b1fe:	463b      	mov	r3, r7
 800b200:	4680      	mov	r8, r0
 800b202:	4689      	mov	r9, r1
 800b204:	4620      	mov	r0, r4
 800b206:	4629      	mov	r1, r5
 800b208:	f7f5 f9ee 	bl	80005e8 <__aeabi_dmul>
 800b20c:	460b      	mov	r3, r1
 800b20e:	4604      	mov	r4, r0
 800b210:	460d      	mov	r5, r1
 800b212:	4602      	mov	r2, r0
 800b214:	4649      	mov	r1, r9
 800b216:	4640      	mov	r0, r8
 800b218:	f7f5 f830 	bl	800027c <__adddf3>
 800b21c:	4b19      	ldr	r3, [pc, #100]	; (800b284 <__ieee754_pow+0x3fc>)
 800b21e:	4299      	cmp	r1, r3
 800b220:	ec45 4b19 	vmov	d9, r4, r5
 800b224:	4606      	mov	r6, r0
 800b226:	460f      	mov	r7, r1
 800b228:	468b      	mov	fp, r1
 800b22a:	f340 82f1 	ble.w	800b810 <__ieee754_pow+0x988>
 800b22e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b232:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b236:	4303      	orrs	r3, r0
 800b238:	f000 81e4 	beq.w	800b604 <__ieee754_pow+0x77c>
 800b23c:	ec51 0b18 	vmov	r0, r1, d8
 800b240:	2200      	movs	r2, #0
 800b242:	2300      	movs	r3, #0
 800b244:	f7f5 fc42 	bl	8000acc <__aeabi_dcmplt>
 800b248:	3800      	subs	r0, #0
 800b24a:	bf18      	it	ne
 800b24c:	2001      	movne	r0, #1
 800b24e:	e72b      	b.n	800b0a8 <__ieee754_pow+0x220>
 800b250:	60000000 	.word	0x60000000
 800b254:	3ff71547 	.word	0x3ff71547
 800b258:	f85ddf44 	.word	0xf85ddf44
 800b25c:	3e54ae0b 	.word	0x3e54ae0b
 800b260:	55555555 	.word	0x55555555
 800b264:	3fd55555 	.word	0x3fd55555
 800b268:	652b82fe 	.word	0x652b82fe
 800b26c:	3ff71547 	.word	0x3ff71547
 800b270:	00000000 	.word	0x00000000
 800b274:	bff00000 	.word	0xbff00000
 800b278:	3ff00000 	.word	0x3ff00000
 800b27c:	3fd00000 	.word	0x3fd00000
 800b280:	3fe00000 	.word	0x3fe00000
 800b284:	408fffff 	.word	0x408fffff
 800b288:	4bd5      	ldr	r3, [pc, #852]	; (800b5e0 <__ieee754_pow+0x758>)
 800b28a:	402b      	ands	r3, r5
 800b28c:	2200      	movs	r2, #0
 800b28e:	b92b      	cbnz	r3, 800b29c <__ieee754_pow+0x414>
 800b290:	4bd4      	ldr	r3, [pc, #848]	; (800b5e4 <__ieee754_pow+0x75c>)
 800b292:	f7f5 f9a9 	bl	80005e8 <__aeabi_dmul>
 800b296:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b29a:	460c      	mov	r4, r1
 800b29c:	1523      	asrs	r3, r4, #20
 800b29e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b2a2:	4413      	add	r3, r2
 800b2a4:	9305      	str	r3, [sp, #20]
 800b2a6:	4bd0      	ldr	r3, [pc, #832]	; (800b5e8 <__ieee754_pow+0x760>)
 800b2a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b2ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b2b0:	429c      	cmp	r4, r3
 800b2b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b2b6:	dd08      	ble.n	800b2ca <__ieee754_pow+0x442>
 800b2b8:	4bcc      	ldr	r3, [pc, #816]	; (800b5ec <__ieee754_pow+0x764>)
 800b2ba:	429c      	cmp	r4, r3
 800b2bc:	f340 8162 	ble.w	800b584 <__ieee754_pow+0x6fc>
 800b2c0:	9b05      	ldr	r3, [sp, #20]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	9305      	str	r3, [sp, #20]
 800b2c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b2ca:	2400      	movs	r4, #0
 800b2cc:	00e3      	lsls	r3, r4, #3
 800b2ce:	9307      	str	r3, [sp, #28]
 800b2d0:	4bc7      	ldr	r3, [pc, #796]	; (800b5f0 <__ieee754_pow+0x768>)
 800b2d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2d6:	ed93 7b00 	vldr	d7, [r3]
 800b2da:	4629      	mov	r1, r5
 800b2dc:	ec53 2b17 	vmov	r2, r3, d7
 800b2e0:	eeb0 9a47 	vmov.f32	s18, s14
 800b2e4:	eef0 9a67 	vmov.f32	s19, s15
 800b2e8:	4682      	mov	sl, r0
 800b2ea:	f7f4 ffc5 	bl	8000278 <__aeabi_dsub>
 800b2ee:	4652      	mov	r2, sl
 800b2f0:	4606      	mov	r6, r0
 800b2f2:	460f      	mov	r7, r1
 800b2f4:	462b      	mov	r3, r5
 800b2f6:	ec51 0b19 	vmov	r0, r1, d9
 800b2fa:	f7f4 ffbf 	bl	800027c <__adddf3>
 800b2fe:	4602      	mov	r2, r0
 800b300:	460b      	mov	r3, r1
 800b302:	2000      	movs	r0, #0
 800b304:	49bb      	ldr	r1, [pc, #748]	; (800b5f4 <__ieee754_pow+0x76c>)
 800b306:	f7f5 fa99 	bl	800083c <__aeabi_ddiv>
 800b30a:	ec41 0b1a 	vmov	d10, r0, r1
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	4630      	mov	r0, r6
 800b314:	4639      	mov	r1, r7
 800b316:	f7f5 f967 	bl	80005e8 <__aeabi_dmul>
 800b31a:	2300      	movs	r3, #0
 800b31c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b320:	9302      	str	r3, [sp, #8]
 800b322:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b326:	46ab      	mov	fp, r5
 800b328:	106d      	asrs	r5, r5, #1
 800b32a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b32e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b332:	ec41 0b18 	vmov	d8, r0, r1
 800b336:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b33a:	2200      	movs	r2, #0
 800b33c:	4640      	mov	r0, r8
 800b33e:	4649      	mov	r1, r9
 800b340:	4614      	mov	r4, r2
 800b342:	461d      	mov	r5, r3
 800b344:	f7f5 f950 	bl	80005e8 <__aeabi_dmul>
 800b348:	4602      	mov	r2, r0
 800b34a:	460b      	mov	r3, r1
 800b34c:	4630      	mov	r0, r6
 800b34e:	4639      	mov	r1, r7
 800b350:	f7f4 ff92 	bl	8000278 <__aeabi_dsub>
 800b354:	ec53 2b19 	vmov	r2, r3, d9
 800b358:	4606      	mov	r6, r0
 800b35a:	460f      	mov	r7, r1
 800b35c:	4620      	mov	r0, r4
 800b35e:	4629      	mov	r1, r5
 800b360:	f7f4 ff8a 	bl	8000278 <__aeabi_dsub>
 800b364:	4602      	mov	r2, r0
 800b366:	460b      	mov	r3, r1
 800b368:	4650      	mov	r0, sl
 800b36a:	4659      	mov	r1, fp
 800b36c:	f7f4 ff84 	bl	8000278 <__aeabi_dsub>
 800b370:	4642      	mov	r2, r8
 800b372:	464b      	mov	r3, r9
 800b374:	f7f5 f938 	bl	80005e8 <__aeabi_dmul>
 800b378:	4602      	mov	r2, r0
 800b37a:	460b      	mov	r3, r1
 800b37c:	4630      	mov	r0, r6
 800b37e:	4639      	mov	r1, r7
 800b380:	f7f4 ff7a 	bl	8000278 <__aeabi_dsub>
 800b384:	ec53 2b1a 	vmov	r2, r3, d10
 800b388:	f7f5 f92e 	bl	80005e8 <__aeabi_dmul>
 800b38c:	ec53 2b18 	vmov	r2, r3, d8
 800b390:	ec41 0b19 	vmov	d9, r0, r1
 800b394:	ec51 0b18 	vmov	r0, r1, d8
 800b398:	f7f5 f926 	bl	80005e8 <__aeabi_dmul>
 800b39c:	a37c      	add	r3, pc, #496	; (adr r3, 800b590 <__ieee754_pow+0x708>)
 800b39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	460d      	mov	r5, r1
 800b3a6:	f7f5 f91f 	bl	80005e8 <__aeabi_dmul>
 800b3aa:	a37b      	add	r3, pc, #492	; (adr r3, 800b598 <__ieee754_pow+0x710>)
 800b3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b0:	f7f4 ff64 	bl	800027c <__adddf3>
 800b3b4:	4622      	mov	r2, r4
 800b3b6:	462b      	mov	r3, r5
 800b3b8:	f7f5 f916 	bl	80005e8 <__aeabi_dmul>
 800b3bc:	a378      	add	r3, pc, #480	; (adr r3, 800b5a0 <__ieee754_pow+0x718>)
 800b3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c2:	f7f4 ff5b 	bl	800027c <__adddf3>
 800b3c6:	4622      	mov	r2, r4
 800b3c8:	462b      	mov	r3, r5
 800b3ca:	f7f5 f90d 	bl	80005e8 <__aeabi_dmul>
 800b3ce:	a376      	add	r3, pc, #472	; (adr r3, 800b5a8 <__ieee754_pow+0x720>)
 800b3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d4:	f7f4 ff52 	bl	800027c <__adddf3>
 800b3d8:	4622      	mov	r2, r4
 800b3da:	462b      	mov	r3, r5
 800b3dc:	f7f5 f904 	bl	80005e8 <__aeabi_dmul>
 800b3e0:	a373      	add	r3, pc, #460	; (adr r3, 800b5b0 <__ieee754_pow+0x728>)
 800b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e6:	f7f4 ff49 	bl	800027c <__adddf3>
 800b3ea:	4622      	mov	r2, r4
 800b3ec:	462b      	mov	r3, r5
 800b3ee:	f7f5 f8fb 	bl	80005e8 <__aeabi_dmul>
 800b3f2:	a371      	add	r3, pc, #452	; (adr r3, 800b5b8 <__ieee754_pow+0x730>)
 800b3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f8:	f7f4 ff40 	bl	800027c <__adddf3>
 800b3fc:	4622      	mov	r2, r4
 800b3fe:	4606      	mov	r6, r0
 800b400:	460f      	mov	r7, r1
 800b402:	462b      	mov	r3, r5
 800b404:	4620      	mov	r0, r4
 800b406:	4629      	mov	r1, r5
 800b408:	f7f5 f8ee 	bl	80005e8 <__aeabi_dmul>
 800b40c:	4602      	mov	r2, r0
 800b40e:	460b      	mov	r3, r1
 800b410:	4630      	mov	r0, r6
 800b412:	4639      	mov	r1, r7
 800b414:	f7f5 f8e8 	bl	80005e8 <__aeabi_dmul>
 800b418:	4642      	mov	r2, r8
 800b41a:	4604      	mov	r4, r0
 800b41c:	460d      	mov	r5, r1
 800b41e:	464b      	mov	r3, r9
 800b420:	ec51 0b18 	vmov	r0, r1, d8
 800b424:	f7f4 ff2a 	bl	800027c <__adddf3>
 800b428:	ec53 2b19 	vmov	r2, r3, d9
 800b42c:	f7f5 f8dc 	bl	80005e8 <__aeabi_dmul>
 800b430:	4622      	mov	r2, r4
 800b432:	462b      	mov	r3, r5
 800b434:	f7f4 ff22 	bl	800027c <__adddf3>
 800b438:	4642      	mov	r2, r8
 800b43a:	4682      	mov	sl, r0
 800b43c:	468b      	mov	fp, r1
 800b43e:	464b      	mov	r3, r9
 800b440:	4640      	mov	r0, r8
 800b442:	4649      	mov	r1, r9
 800b444:	f7f5 f8d0 	bl	80005e8 <__aeabi_dmul>
 800b448:	4b6b      	ldr	r3, [pc, #428]	; (800b5f8 <__ieee754_pow+0x770>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	4606      	mov	r6, r0
 800b44e:	460f      	mov	r7, r1
 800b450:	f7f4 ff14 	bl	800027c <__adddf3>
 800b454:	4652      	mov	r2, sl
 800b456:	465b      	mov	r3, fp
 800b458:	f7f4 ff10 	bl	800027c <__adddf3>
 800b45c:	2000      	movs	r0, #0
 800b45e:	4604      	mov	r4, r0
 800b460:	460d      	mov	r5, r1
 800b462:	4602      	mov	r2, r0
 800b464:	460b      	mov	r3, r1
 800b466:	4640      	mov	r0, r8
 800b468:	4649      	mov	r1, r9
 800b46a:	f7f5 f8bd 	bl	80005e8 <__aeabi_dmul>
 800b46e:	4b62      	ldr	r3, [pc, #392]	; (800b5f8 <__ieee754_pow+0x770>)
 800b470:	4680      	mov	r8, r0
 800b472:	4689      	mov	r9, r1
 800b474:	2200      	movs	r2, #0
 800b476:	4620      	mov	r0, r4
 800b478:	4629      	mov	r1, r5
 800b47a:	f7f4 fefd 	bl	8000278 <__aeabi_dsub>
 800b47e:	4632      	mov	r2, r6
 800b480:	463b      	mov	r3, r7
 800b482:	f7f4 fef9 	bl	8000278 <__aeabi_dsub>
 800b486:	4602      	mov	r2, r0
 800b488:	460b      	mov	r3, r1
 800b48a:	4650      	mov	r0, sl
 800b48c:	4659      	mov	r1, fp
 800b48e:	f7f4 fef3 	bl	8000278 <__aeabi_dsub>
 800b492:	ec53 2b18 	vmov	r2, r3, d8
 800b496:	f7f5 f8a7 	bl	80005e8 <__aeabi_dmul>
 800b49a:	4622      	mov	r2, r4
 800b49c:	4606      	mov	r6, r0
 800b49e:	460f      	mov	r7, r1
 800b4a0:	462b      	mov	r3, r5
 800b4a2:	ec51 0b19 	vmov	r0, r1, d9
 800b4a6:	f7f5 f89f 	bl	80005e8 <__aeabi_dmul>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	4639      	mov	r1, r7
 800b4b2:	f7f4 fee3 	bl	800027c <__adddf3>
 800b4b6:	4606      	mov	r6, r0
 800b4b8:	460f      	mov	r7, r1
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	4640      	mov	r0, r8
 800b4c0:	4649      	mov	r1, r9
 800b4c2:	f7f4 fedb 	bl	800027c <__adddf3>
 800b4c6:	a33e      	add	r3, pc, #248	; (adr r3, 800b5c0 <__ieee754_pow+0x738>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	460d      	mov	r5, r1
 800b4d2:	f7f5 f889 	bl	80005e8 <__aeabi_dmul>
 800b4d6:	4642      	mov	r2, r8
 800b4d8:	ec41 0b18 	vmov	d8, r0, r1
 800b4dc:	464b      	mov	r3, r9
 800b4de:	4620      	mov	r0, r4
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	f7f4 fec9 	bl	8000278 <__aeabi_dsub>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	4639      	mov	r1, r7
 800b4ee:	f7f4 fec3 	bl	8000278 <__aeabi_dsub>
 800b4f2:	a335      	add	r3, pc, #212	; (adr r3, 800b5c8 <__ieee754_pow+0x740>)
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	f7f5 f876 	bl	80005e8 <__aeabi_dmul>
 800b4fc:	a334      	add	r3, pc, #208	; (adr r3, 800b5d0 <__ieee754_pow+0x748>)
 800b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b502:	4606      	mov	r6, r0
 800b504:	460f      	mov	r7, r1
 800b506:	4620      	mov	r0, r4
 800b508:	4629      	mov	r1, r5
 800b50a:	f7f5 f86d 	bl	80005e8 <__aeabi_dmul>
 800b50e:	4602      	mov	r2, r0
 800b510:	460b      	mov	r3, r1
 800b512:	4630      	mov	r0, r6
 800b514:	4639      	mov	r1, r7
 800b516:	f7f4 feb1 	bl	800027c <__adddf3>
 800b51a:	9a07      	ldr	r2, [sp, #28]
 800b51c:	4b37      	ldr	r3, [pc, #220]	; (800b5fc <__ieee754_pow+0x774>)
 800b51e:	4413      	add	r3, r2
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f7f4 feaa 	bl	800027c <__adddf3>
 800b528:	4682      	mov	sl, r0
 800b52a:	9805      	ldr	r0, [sp, #20]
 800b52c:	468b      	mov	fp, r1
 800b52e:	f7f4 fff1 	bl	8000514 <__aeabi_i2d>
 800b532:	9a07      	ldr	r2, [sp, #28]
 800b534:	4b32      	ldr	r3, [pc, #200]	; (800b600 <__ieee754_pow+0x778>)
 800b536:	4413      	add	r3, r2
 800b538:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b53c:	4606      	mov	r6, r0
 800b53e:	460f      	mov	r7, r1
 800b540:	4652      	mov	r2, sl
 800b542:	465b      	mov	r3, fp
 800b544:	ec51 0b18 	vmov	r0, r1, d8
 800b548:	f7f4 fe98 	bl	800027c <__adddf3>
 800b54c:	4642      	mov	r2, r8
 800b54e:	464b      	mov	r3, r9
 800b550:	f7f4 fe94 	bl	800027c <__adddf3>
 800b554:	4632      	mov	r2, r6
 800b556:	463b      	mov	r3, r7
 800b558:	f7f4 fe90 	bl	800027c <__adddf3>
 800b55c:	2000      	movs	r0, #0
 800b55e:	4632      	mov	r2, r6
 800b560:	463b      	mov	r3, r7
 800b562:	4604      	mov	r4, r0
 800b564:	460d      	mov	r5, r1
 800b566:	f7f4 fe87 	bl	8000278 <__aeabi_dsub>
 800b56a:	4642      	mov	r2, r8
 800b56c:	464b      	mov	r3, r9
 800b56e:	f7f4 fe83 	bl	8000278 <__aeabi_dsub>
 800b572:	ec53 2b18 	vmov	r2, r3, d8
 800b576:	f7f4 fe7f 	bl	8000278 <__aeabi_dsub>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	4650      	mov	r0, sl
 800b580:	4659      	mov	r1, fp
 800b582:	e610      	b.n	800b1a6 <__ieee754_pow+0x31e>
 800b584:	2401      	movs	r4, #1
 800b586:	e6a1      	b.n	800b2cc <__ieee754_pow+0x444>
 800b588:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b5d8 <__ieee754_pow+0x750>
 800b58c:	e617      	b.n	800b1be <__ieee754_pow+0x336>
 800b58e:	bf00      	nop
 800b590:	4a454eef 	.word	0x4a454eef
 800b594:	3fca7e28 	.word	0x3fca7e28
 800b598:	93c9db65 	.word	0x93c9db65
 800b59c:	3fcd864a 	.word	0x3fcd864a
 800b5a0:	a91d4101 	.word	0xa91d4101
 800b5a4:	3fd17460 	.word	0x3fd17460
 800b5a8:	518f264d 	.word	0x518f264d
 800b5ac:	3fd55555 	.word	0x3fd55555
 800b5b0:	db6fabff 	.word	0xdb6fabff
 800b5b4:	3fdb6db6 	.word	0x3fdb6db6
 800b5b8:	33333303 	.word	0x33333303
 800b5bc:	3fe33333 	.word	0x3fe33333
 800b5c0:	e0000000 	.word	0xe0000000
 800b5c4:	3feec709 	.word	0x3feec709
 800b5c8:	dc3a03fd 	.word	0xdc3a03fd
 800b5cc:	3feec709 	.word	0x3feec709
 800b5d0:	145b01f5 	.word	0x145b01f5
 800b5d4:	be3e2fe0 	.word	0xbe3e2fe0
 800b5d8:	00000000 	.word	0x00000000
 800b5dc:	3ff00000 	.word	0x3ff00000
 800b5e0:	7ff00000 	.word	0x7ff00000
 800b5e4:	43400000 	.word	0x43400000
 800b5e8:	0003988e 	.word	0x0003988e
 800b5ec:	000bb679 	.word	0x000bb679
 800b5f0:	0800c7f0 	.word	0x0800c7f0
 800b5f4:	3ff00000 	.word	0x3ff00000
 800b5f8:	40080000 	.word	0x40080000
 800b5fc:	0800c810 	.word	0x0800c810
 800b600:	0800c800 	.word	0x0800c800
 800b604:	a3b5      	add	r3, pc, #724	; (adr r3, 800b8dc <__ieee754_pow+0xa54>)
 800b606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60a:	4640      	mov	r0, r8
 800b60c:	4649      	mov	r1, r9
 800b60e:	f7f4 fe35 	bl	800027c <__adddf3>
 800b612:	4622      	mov	r2, r4
 800b614:	ec41 0b1a 	vmov	d10, r0, r1
 800b618:	462b      	mov	r3, r5
 800b61a:	4630      	mov	r0, r6
 800b61c:	4639      	mov	r1, r7
 800b61e:	f7f4 fe2b 	bl	8000278 <__aeabi_dsub>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	ec51 0b1a 	vmov	r0, r1, d10
 800b62a:	f7f5 fa6d 	bl	8000b08 <__aeabi_dcmpgt>
 800b62e:	2800      	cmp	r0, #0
 800b630:	f47f ae04 	bne.w	800b23c <__ieee754_pow+0x3b4>
 800b634:	4aa4      	ldr	r2, [pc, #656]	; (800b8c8 <__ieee754_pow+0xa40>)
 800b636:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b63a:	4293      	cmp	r3, r2
 800b63c:	f340 8108 	ble.w	800b850 <__ieee754_pow+0x9c8>
 800b640:	151b      	asrs	r3, r3, #20
 800b642:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b646:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b64a:	fa4a f303 	asr.w	r3, sl, r3
 800b64e:	445b      	add	r3, fp
 800b650:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b654:	4e9d      	ldr	r6, [pc, #628]	; (800b8cc <__ieee754_pow+0xa44>)
 800b656:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b65a:	4116      	asrs	r6, r2
 800b65c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b660:	2000      	movs	r0, #0
 800b662:	ea23 0106 	bic.w	r1, r3, r6
 800b666:	f1c2 0214 	rsb	r2, r2, #20
 800b66a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b66e:	fa4a fa02 	asr.w	sl, sl, r2
 800b672:	f1bb 0f00 	cmp.w	fp, #0
 800b676:	4602      	mov	r2, r0
 800b678:	460b      	mov	r3, r1
 800b67a:	4620      	mov	r0, r4
 800b67c:	4629      	mov	r1, r5
 800b67e:	bfb8      	it	lt
 800b680:	f1ca 0a00 	rsblt	sl, sl, #0
 800b684:	f7f4 fdf8 	bl	8000278 <__aeabi_dsub>
 800b688:	ec41 0b19 	vmov	d9, r0, r1
 800b68c:	4642      	mov	r2, r8
 800b68e:	464b      	mov	r3, r9
 800b690:	ec51 0b19 	vmov	r0, r1, d9
 800b694:	f7f4 fdf2 	bl	800027c <__adddf3>
 800b698:	a37b      	add	r3, pc, #492	; (adr r3, 800b888 <__ieee754_pow+0xa00>)
 800b69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69e:	2000      	movs	r0, #0
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	460d      	mov	r5, r1
 800b6a4:	f7f4 ffa0 	bl	80005e8 <__aeabi_dmul>
 800b6a8:	ec53 2b19 	vmov	r2, r3, d9
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	460f      	mov	r7, r1
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	4629      	mov	r1, r5
 800b6b4:	f7f4 fde0 	bl	8000278 <__aeabi_dsub>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4640      	mov	r0, r8
 800b6be:	4649      	mov	r1, r9
 800b6c0:	f7f4 fdda 	bl	8000278 <__aeabi_dsub>
 800b6c4:	a372      	add	r3, pc, #456	; (adr r3, 800b890 <__ieee754_pow+0xa08>)
 800b6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ca:	f7f4 ff8d 	bl	80005e8 <__aeabi_dmul>
 800b6ce:	a372      	add	r3, pc, #456	; (adr r3, 800b898 <__ieee754_pow+0xa10>)
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	4680      	mov	r8, r0
 800b6d6:	4689      	mov	r9, r1
 800b6d8:	4620      	mov	r0, r4
 800b6da:	4629      	mov	r1, r5
 800b6dc:	f7f4 ff84 	bl	80005e8 <__aeabi_dmul>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4640      	mov	r0, r8
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	f7f4 fdc8 	bl	800027c <__adddf3>
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	460d      	mov	r5, r1
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	4639      	mov	r1, r7
 800b6f8:	f7f4 fdc0 	bl	800027c <__adddf3>
 800b6fc:	4632      	mov	r2, r6
 800b6fe:	463b      	mov	r3, r7
 800b700:	4680      	mov	r8, r0
 800b702:	4689      	mov	r9, r1
 800b704:	f7f4 fdb8 	bl	8000278 <__aeabi_dsub>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	4620      	mov	r0, r4
 800b70e:	4629      	mov	r1, r5
 800b710:	f7f4 fdb2 	bl	8000278 <__aeabi_dsub>
 800b714:	4642      	mov	r2, r8
 800b716:	4606      	mov	r6, r0
 800b718:	460f      	mov	r7, r1
 800b71a:	464b      	mov	r3, r9
 800b71c:	4640      	mov	r0, r8
 800b71e:	4649      	mov	r1, r9
 800b720:	f7f4 ff62 	bl	80005e8 <__aeabi_dmul>
 800b724:	a35e      	add	r3, pc, #376	; (adr r3, 800b8a0 <__ieee754_pow+0xa18>)
 800b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72a:	4604      	mov	r4, r0
 800b72c:	460d      	mov	r5, r1
 800b72e:	f7f4 ff5b 	bl	80005e8 <__aeabi_dmul>
 800b732:	a35d      	add	r3, pc, #372	; (adr r3, 800b8a8 <__ieee754_pow+0xa20>)
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	f7f4 fd9e 	bl	8000278 <__aeabi_dsub>
 800b73c:	4622      	mov	r2, r4
 800b73e:	462b      	mov	r3, r5
 800b740:	f7f4 ff52 	bl	80005e8 <__aeabi_dmul>
 800b744:	a35a      	add	r3, pc, #360	; (adr r3, 800b8b0 <__ieee754_pow+0xa28>)
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	f7f4 fd97 	bl	800027c <__adddf3>
 800b74e:	4622      	mov	r2, r4
 800b750:	462b      	mov	r3, r5
 800b752:	f7f4 ff49 	bl	80005e8 <__aeabi_dmul>
 800b756:	a358      	add	r3, pc, #352	; (adr r3, 800b8b8 <__ieee754_pow+0xa30>)
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	f7f4 fd8c 	bl	8000278 <__aeabi_dsub>
 800b760:	4622      	mov	r2, r4
 800b762:	462b      	mov	r3, r5
 800b764:	f7f4 ff40 	bl	80005e8 <__aeabi_dmul>
 800b768:	a355      	add	r3, pc, #340	; (adr r3, 800b8c0 <__ieee754_pow+0xa38>)
 800b76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76e:	f7f4 fd85 	bl	800027c <__adddf3>
 800b772:	4622      	mov	r2, r4
 800b774:	462b      	mov	r3, r5
 800b776:	f7f4 ff37 	bl	80005e8 <__aeabi_dmul>
 800b77a:	4602      	mov	r2, r0
 800b77c:	460b      	mov	r3, r1
 800b77e:	4640      	mov	r0, r8
 800b780:	4649      	mov	r1, r9
 800b782:	f7f4 fd79 	bl	8000278 <__aeabi_dsub>
 800b786:	4604      	mov	r4, r0
 800b788:	460d      	mov	r5, r1
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4640      	mov	r0, r8
 800b790:	4649      	mov	r1, r9
 800b792:	f7f4 ff29 	bl	80005e8 <__aeabi_dmul>
 800b796:	2200      	movs	r2, #0
 800b798:	ec41 0b19 	vmov	d9, r0, r1
 800b79c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	f7f4 fd68 	bl	8000278 <__aeabi_dsub>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	ec51 0b19 	vmov	r0, r1, d9
 800b7b0:	f7f5 f844 	bl	800083c <__aeabi_ddiv>
 800b7b4:	4632      	mov	r2, r6
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	460d      	mov	r5, r1
 800b7ba:	463b      	mov	r3, r7
 800b7bc:	4640      	mov	r0, r8
 800b7be:	4649      	mov	r1, r9
 800b7c0:	f7f4 ff12 	bl	80005e8 <__aeabi_dmul>
 800b7c4:	4632      	mov	r2, r6
 800b7c6:	463b      	mov	r3, r7
 800b7c8:	f7f4 fd58 	bl	800027c <__adddf3>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	f7f4 fd50 	bl	8000278 <__aeabi_dsub>
 800b7d8:	4642      	mov	r2, r8
 800b7da:	464b      	mov	r3, r9
 800b7dc:	f7f4 fd4c 	bl	8000278 <__aeabi_dsub>
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	493a      	ldr	r1, [pc, #232]	; (800b8d0 <__ieee754_pow+0xa48>)
 800b7e6:	2000      	movs	r0, #0
 800b7e8:	f7f4 fd46 	bl	8000278 <__aeabi_dsub>
 800b7ec:	ec41 0b10 	vmov	d0, r0, r1
 800b7f0:	ee10 3a90 	vmov	r3, s1
 800b7f4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b7f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7fc:	da2b      	bge.n	800b856 <__ieee754_pow+0x9ce>
 800b7fe:	4650      	mov	r0, sl
 800b800:	f000 f966 	bl	800bad0 <scalbn>
 800b804:	ec51 0b10 	vmov	r0, r1, d0
 800b808:	ec53 2b18 	vmov	r2, r3, d8
 800b80c:	f7ff bbed 	b.w	800afea <__ieee754_pow+0x162>
 800b810:	4b30      	ldr	r3, [pc, #192]	; (800b8d4 <__ieee754_pow+0xa4c>)
 800b812:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b816:	429e      	cmp	r6, r3
 800b818:	f77f af0c 	ble.w	800b634 <__ieee754_pow+0x7ac>
 800b81c:	4b2e      	ldr	r3, [pc, #184]	; (800b8d8 <__ieee754_pow+0xa50>)
 800b81e:	440b      	add	r3, r1
 800b820:	4303      	orrs	r3, r0
 800b822:	d009      	beq.n	800b838 <__ieee754_pow+0x9b0>
 800b824:	ec51 0b18 	vmov	r0, r1, d8
 800b828:	2200      	movs	r2, #0
 800b82a:	2300      	movs	r3, #0
 800b82c:	f7f5 f94e 	bl	8000acc <__aeabi_dcmplt>
 800b830:	3800      	subs	r0, #0
 800b832:	bf18      	it	ne
 800b834:	2001      	movne	r0, #1
 800b836:	e447      	b.n	800b0c8 <__ieee754_pow+0x240>
 800b838:	4622      	mov	r2, r4
 800b83a:	462b      	mov	r3, r5
 800b83c:	f7f4 fd1c 	bl	8000278 <__aeabi_dsub>
 800b840:	4642      	mov	r2, r8
 800b842:	464b      	mov	r3, r9
 800b844:	f7f5 f956 	bl	8000af4 <__aeabi_dcmpge>
 800b848:	2800      	cmp	r0, #0
 800b84a:	f43f aef3 	beq.w	800b634 <__ieee754_pow+0x7ac>
 800b84e:	e7e9      	b.n	800b824 <__ieee754_pow+0x99c>
 800b850:	f04f 0a00 	mov.w	sl, #0
 800b854:	e71a      	b.n	800b68c <__ieee754_pow+0x804>
 800b856:	ec51 0b10 	vmov	r0, r1, d0
 800b85a:	4619      	mov	r1, r3
 800b85c:	e7d4      	b.n	800b808 <__ieee754_pow+0x980>
 800b85e:	491c      	ldr	r1, [pc, #112]	; (800b8d0 <__ieee754_pow+0xa48>)
 800b860:	2000      	movs	r0, #0
 800b862:	f7ff bb30 	b.w	800aec6 <__ieee754_pow+0x3e>
 800b866:	2000      	movs	r0, #0
 800b868:	2100      	movs	r1, #0
 800b86a:	f7ff bb2c 	b.w	800aec6 <__ieee754_pow+0x3e>
 800b86e:	4630      	mov	r0, r6
 800b870:	4639      	mov	r1, r7
 800b872:	f7ff bb28 	b.w	800aec6 <__ieee754_pow+0x3e>
 800b876:	9204      	str	r2, [sp, #16]
 800b878:	f7ff bb7a 	b.w	800af70 <__ieee754_pow+0xe8>
 800b87c:	2300      	movs	r3, #0
 800b87e:	f7ff bb64 	b.w	800af4a <__ieee754_pow+0xc2>
 800b882:	bf00      	nop
 800b884:	f3af 8000 	nop.w
 800b888:	00000000 	.word	0x00000000
 800b88c:	3fe62e43 	.word	0x3fe62e43
 800b890:	fefa39ef 	.word	0xfefa39ef
 800b894:	3fe62e42 	.word	0x3fe62e42
 800b898:	0ca86c39 	.word	0x0ca86c39
 800b89c:	be205c61 	.word	0xbe205c61
 800b8a0:	72bea4d0 	.word	0x72bea4d0
 800b8a4:	3e663769 	.word	0x3e663769
 800b8a8:	c5d26bf1 	.word	0xc5d26bf1
 800b8ac:	3ebbbd41 	.word	0x3ebbbd41
 800b8b0:	af25de2c 	.word	0xaf25de2c
 800b8b4:	3f11566a 	.word	0x3f11566a
 800b8b8:	16bebd93 	.word	0x16bebd93
 800b8bc:	3f66c16c 	.word	0x3f66c16c
 800b8c0:	5555553e 	.word	0x5555553e
 800b8c4:	3fc55555 	.word	0x3fc55555
 800b8c8:	3fe00000 	.word	0x3fe00000
 800b8cc:	000fffff 	.word	0x000fffff
 800b8d0:	3ff00000 	.word	0x3ff00000
 800b8d4:	4090cbff 	.word	0x4090cbff
 800b8d8:	3f6f3400 	.word	0x3f6f3400
 800b8dc:	652b82fe 	.word	0x652b82fe
 800b8e0:	3c971547 	.word	0x3c971547

0800b8e4 <__ieee754_sqrt>:
 800b8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e8:	ec55 4b10 	vmov	r4, r5, d0
 800b8ec:	4e55      	ldr	r6, [pc, #340]	; (800ba44 <__ieee754_sqrt+0x160>)
 800b8ee:	43ae      	bics	r6, r5
 800b8f0:	ee10 0a10 	vmov	r0, s0
 800b8f4:	ee10 3a10 	vmov	r3, s0
 800b8f8:	462a      	mov	r2, r5
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	d110      	bne.n	800b920 <__ieee754_sqrt+0x3c>
 800b8fe:	ee10 2a10 	vmov	r2, s0
 800b902:	462b      	mov	r3, r5
 800b904:	f7f4 fe70 	bl	80005e8 <__aeabi_dmul>
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	4620      	mov	r0, r4
 800b90e:	4629      	mov	r1, r5
 800b910:	f7f4 fcb4 	bl	800027c <__adddf3>
 800b914:	4604      	mov	r4, r0
 800b916:	460d      	mov	r5, r1
 800b918:	ec45 4b10 	vmov	d0, r4, r5
 800b91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b920:	2d00      	cmp	r5, #0
 800b922:	dc10      	bgt.n	800b946 <__ieee754_sqrt+0x62>
 800b924:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b928:	4330      	orrs	r0, r6
 800b92a:	d0f5      	beq.n	800b918 <__ieee754_sqrt+0x34>
 800b92c:	b15d      	cbz	r5, 800b946 <__ieee754_sqrt+0x62>
 800b92e:	ee10 2a10 	vmov	r2, s0
 800b932:	462b      	mov	r3, r5
 800b934:	ee10 0a10 	vmov	r0, s0
 800b938:	f7f4 fc9e 	bl	8000278 <__aeabi_dsub>
 800b93c:	4602      	mov	r2, r0
 800b93e:	460b      	mov	r3, r1
 800b940:	f7f4 ff7c 	bl	800083c <__aeabi_ddiv>
 800b944:	e7e6      	b.n	800b914 <__ieee754_sqrt+0x30>
 800b946:	1512      	asrs	r2, r2, #20
 800b948:	d074      	beq.n	800ba34 <__ieee754_sqrt+0x150>
 800b94a:	07d4      	lsls	r4, r2, #31
 800b94c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b950:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b954:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b958:	bf5e      	ittt	pl
 800b95a:	0fda      	lsrpl	r2, r3, #31
 800b95c:	005b      	lslpl	r3, r3, #1
 800b95e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b962:	2400      	movs	r4, #0
 800b964:	0fda      	lsrs	r2, r3, #31
 800b966:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b96a:	107f      	asrs	r7, r7, #1
 800b96c:	005b      	lsls	r3, r3, #1
 800b96e:	2516      	movs	r5, #22
 800b970:	4620      	mov	r0, r4
 800b972:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b976:	1886      	adds	r6, r0, r2
 800b978:	428e      	cmp	r6, r1
 800b97a:	bfde      	ittt	le
 800b97c:	1b89      	suble	r1, r1, r6
 800b97e:	18b0      	addle	r0, r6, r2
 800b980:	18a4      	addle	r4, r4, r2
 800b982:	0049      	lsls	r1, r1, #1
 800b984:	3d01      	subs	r5, #1
 800b986:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b98a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b98e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b992:	d1f0      	bne.n	800b976 <__ieee754_sqrt+0x92>
 800b994:	462a      	mov	r2, r5
 800b996:	f04f 0e20 	mov.w	lr, #32
 800b99a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b99e:	4281      	cmp	r1, r0
 800b9a0:	eb06 0c05 	add.w	ip, r6, r5
 800b9a4:	dc02      	bgt.n	800b9ac <__ieee754_sqrt+0xc8>
 800b9a6:	d113      	bne.n	800b9d0 <__ieee754_sqrt+0xec>
 800b9a8:	459c      	cmp	ip, r3
 800b9aa:	d811      	bhi.n	800b9d0 <__ieee754_sqrt+0xec>
 800b9ac:	f1bc 0f00 	cmp.w	ip, #0
 800b9b0:	eb0c 0506 	add.w	r5, ip, r6
 800b9b4:	da43      	bge.n	800ba3e <__ieee754_sqrt+0x15a>
 800b9b6:	2d00      	cmp	r5, #0
 800b9b8:	db41      	blt.n	800ba3e <__ieee754_sqrt+0x15a>
 800b9ba:	f100 0801 	add.w	r8, r0, #1
 800b9be:	1a09      	subs	r1, r1, r0
 800b9c0:	459c      	cmp	ip, r3
 800b9c2:	bf88      	it	hi
 800b9c4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b9c8:	eba3 030c 	sub.w	r3, r3, ip
 800b9cc:	4432      	add	r2, r6
 800b9ce:	4640      	mov	r0, r8
 800b9d0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b9d4:	f1be 0e01 	subs.w	lr, lr, #1
 800b9d8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b9dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b9e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b9e4:	d1db      	bne.n	800b99e <__ieee754_sqrt+0xba>
 800b9e6:	430b      	orrs	r3, r1
 800b9e8:	d006      	beq.n	800b9f8 <__ieee754_sqrt+0x114>
 800b9ea:	1c50      	adds	r0, r2, #1
 800b9ec:	bf13      	iteet	ne
 800b9ee:	3201      	addne	r2, #1
 800b9f0:	3401      	addeq	r4, #1
 800b9f2:	4672      	moveq	r2, lr
 800b9f4:	f022 0201 	bicne.w	r2, r2, #1
 800b9f8:	1063      	asrs	r3, r4, #1
 800b9fa:	0852      	lsrs	r2, r2, #1
 800b9fc:	07e1      	lsls	r1, r4, #31
 800b9fe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ba02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ba06:	bf48      	it	mi
 800ba08:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ba0c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ba10:	4614      	mov	r4, r2
 800ba12:	e781      	b.n	800b918 <__ieee754_sqrt+0x34>
 800ba14:	0ad9      	lsrs	r1, r3, #11
 800ba16:	3815      	subs	r0, #21
 800ba18:	055b      	lsls	r3, r3, #21
 800ba1a:	2900      	cmp	r1, #0
 800ba1c:	d0fa      	beq.n	800ba14 <__ieee754_sqrt+0x130>
 800ba1e:	02cd      	lsls	r5, r1, #11
 800ba20:	d50a      	bpl.n	800ba38 <__ieee754_sqrt+0x154>
 800ba22:	f1c2 0420 	rsb	r4, r2, #32
 800ba26:	fa23 f404 	lsr.w	r4, r3, r4
 800ba2a:	1e55      	subs	r5, r2, #1
 800ba2c:	4093      	lsls	r3, r2
 800ba2e:	4321      	orrs	r1, r4
 800ba30:	1b42      	subs	r2, r0, r5
 800ba32:	e78a      	b.n	800b94a <__ieee754_sqrt+0x66>
 800ba34:	4610      	mov	r0, r2
 800ba36:	e7f0      	b.n	800ba1a <__ieee754_sqrt+0x136>
 800ba38:	0049      	lsls	r1, r1, #1
 800ba3a:	3201      	adds	r2, #1
 800ba3c:	e7ef      	b.n	800ba1e <__ieee754_sqrt+0x13a>
 800ba3e:	4680      	mov	r8, r0
 800ba40:	e7bd      	b.n	800b9be <__ieee754_sqrt+0xda>
 800ba42:	bf00      	nop
 800ba44:	7ff00000 	.word	0x7ff00000

0800ba48 <with_errno>:
 800ba48:	b570      	push	{r4, r5, r6, lr}
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	460d      	mov	r5, r1
 800ba4e:	4616      	mov	r6, r2
 800ba50:	f7fe fd08 	bl	800a464 <__errno>
 800ba54:	4629      	mov	r1, r5
 800ba56:	6006      	str	r6, [r0, #0]
 800ba58:	4620      	mov	r0, r4
 800ba5a:	bd70      	pop	{r4, r5, r6, pc}

0800ba5c <xflow>:
 800ba5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba5e:	4614      	mov	r4, r2
 800ba60:	461d      	mov	r5, r3
 800ba62:	b108      	cbz	r0, 800ba68 <xflow+0xc>
 800ba64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba68:	e9cd 2300 	strd	r2, r3, [sp]
 800ba6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba70:	4620      	mov	r0, r4
 800ba72:	4629      	mov	r1, r5
 800ba74:	f7f4 fdb8 	bl	80005e8 <__aeabi_dmul>
 800ba78:	2222      	movs	r2, #34	; 0x22
 800ba7a:	b003      	add	sp, #12
 800ba7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba80:	f7ff bfe2 	b.w	800ba48 <with_errno>

0800ba84 <__math_uflow>:
 800ba84:	b508      	push	{r3, lr}
 800ba86:	2200      	movs	r2, #0
 800ba88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba8c:	f7ff ffe6 	bl	800ba5c <xflow>
 800ba90:	ec41 0b10 	vmov	d0, r0, r1
 800ba94:	bd08      	pop	{r3, pc}

0800ba96 <__math_oflow>:
 800ba96:	b508      	push	{r3, lr}
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ba9e:	f7ff ffdd 	bl	800ba5c <xflow>
 800baa2:	ec41 0b10 	vmov	d0, r0, r1
 800baa6:	bd08      	pop	{r3, pc}

0800baa8 <fabs>:
 800baa8:	ec51 0b10 	vmov	r0, r1, d0
 800baac:	ee10 2a10 	vmov	r2, s0
 800bab0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bab4:	ec43 2b10 	vmov	d0, r2, r3
 800bab8:	4770      	bx	lr

0800baba <finite>:
 800baba:	b082      	sub	sp, #8
 800babc:	ed8d 0b00 	vstr	d0, [sp]
 800bac0:	9801      	ldr	r0, [sp, #4]
 800bac2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bac6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800baca:	0fc0      	lsrs	r0, r0, #31
 800bacc:	b002      	add	sp, #8
 800bace:	4770      	bx	lr

0800bad0 <scalbn>:
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	ec55 4b10 	vmov	r4, r5, d0
 800bad6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bada:	4606      	mov	r6, r0
 800badc:	462b      	mov	r3, r5
 800bade:	b99a      	cbnz	r2, 800bb08 <scalbn+0x38>
 800bae0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bae4:	4323      	orrs	r3, r4
 800bae6:	d036      	beq.n	800bb56 <scalbn+0x86>
 800bae8:	4b39      	ldr	r3, [pc, #228]	; (800bbd0 <scalbn+0x100>)
 800baea:	4629      	mov	r1, r5
 800baec:	ee10 0a10 	vmov	r0, s0
 800baf0:	2200      	movs	r2, #0
 800baf2:	f7f4 fd79 	bl	80005e8 <__aeabi_dmul>
 800baf6:	4b37      	ldr	r3, [pc, #220]	; (800bbd4 <scalbn+0x104>)
 800baf8:	429e      	cmp	r6, r3
 800bafa:	4604      	mov	r4, r0
 800bafc:	460d      	mov	r5, r1
 800bafe:	da10      	bge.n	800bb22 <scalbn+0x52>
 800bb00:	a32b      	add	r3, pc, #172	; (adr r3, 800bbb0 <scalbn+0xe0>)
 800bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb06:	e03a      	b.n	800bb7e <scalbn+0xae>
 800bb08:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bb0c:	428a      	cmp	r2, r1
 800bb0e:	d10c      	bne.n	800bb2a <scalbn+0x5a>
 800bb10:	ee10 2a10 	vmov	r2, s0
 800bb14:	4620      	mov	r0, r4
 800bb16:	4629      	mov	r1, r5
 800bb18:	f7f4 fbb0 	bl	800027c <__adddf3>
 800bb1c:	4604      	mov	r4, r0
 800bb1e:	460d      	mov	r5, r1
 800bb20:	e019      	b.n	800bb56 <scalbn+0x86>
 800bb22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bb26:	460b      	mov	r3, r1
 800bb28:	3a36      	subs	r2, #54	; 0x36
 800bb2a:	4432      	add	r2, r6
 800bb2c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bb30:	428a      	cmp	r2, r1
 800bb32:	dd08      	ble.n	800bb46 <scalbn+0x76>
 800bb34:	2d00      	cmp	r5, #0
 800bb36:	a120      	add	r1, pc, #128	; (adr r1, 800bbb8 <scalbn+0xe8>)
 800bb38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb3c:	da1c      	bge.n	800bb78 <scalbn+0xa8>
 800bb3e:	a120      	add	r1, pc, #128	; (adr r1, 800bbc0 <scalbn+0xf0>)
 800bb40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb44:	e018      	b.n	800bb78 <scalbn+0xa8>
 800bb46:	2a00      	cmp	r2, #0
 800bb48:	dd08      	ble.n	800bb5c <scalbn+0x8c>
 800bb4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb56:	ec45 4b10 	vmov	d0, r4, r5
 800bb5a:	bd70      	pop	{r4, r5, r6, pc}
 800bb5c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bb60:	da19      	bge.n	800bb96 <scalbn+0xc6>
 800bb62:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bb66:	429e      	cmp	r6, r3
 800bb68:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bb6c:	dd0a      	ble.n	800bb84 <scalbn+0xb4>
 800bb6e:	a112      	add	r1, pc, #72	; (adr r1, 800bbb8 <scalbn+0xe8>)
 800bb70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1e2      	bne.n	800bb3e <scalbn+0x6e>
 800bb78:	a30f      	add	r3, pc, #60	; (adr r3, 800bbb8 <scalbn+0xe8>)
 800bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7e:	f7f4 fd33 	bl	80005e8 <__aeabi_dmul>
 800bb82:	e7cb      	b.n	800bb1c <scalbn+0x4c>
 800bb84:	a10a      	add	r1, pc, #40	; (adr r1, 800bbb0 <scalbn+0xe0>)
 800bb86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d0b8      	beq.n	800bb00 <scalbn+0x30>
 800bb8e:	a10e      	add	r1, pc, #56	; (adr r1, 800bbc8 <scalbn+0xf8>)
 800bb90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb94:	e7b4      	b.n	800bb00 <scalbn+0x30>
 800bb96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb9a:	3236      	adds	r2, #54	; 0x36
 800bb9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bba0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bba4:	4620      	mov	r0, r4
 800bba6:	4b0c      	ldr	r3, [pc, #48]	; (800bbd8 <scalbn+0x108>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	e7e8      	b.n	800bb7e <scalbn+0xae>
 800bbac:	f3af 8000 	nop.w
 800bbb0:	c2f8f359 	.word	0xc2f8f359
 800bbb4:	01a56e1f 	.word	0x01a56e1f
 800bbb8:	8800759c 	.word	0x8800759c
 800bbbc:	7e37e43c 	.word	0x7e37e43c
 800bbc0:	8800759c 	.word	0x8800759c
 800bbc4:	fe37e43c 	.word	0xfe37e43c
 800bbc8:	c2f8f359 	.word	0xc2f8f359
 800bbcc:	81a56e1f 	.word	0x81a56e1f
 800bbd0:	43500000 	.word	0x43500000
 800bbd4:	ffff3cb0 	.word	0xffff3cb0
 800bbd8:	3c900000 	.word	0x3c900000

0800bbdc <_init>:
 800bbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbde:	bf00      	nop
 800bbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbe2:	bc08      	pop	{r3}
 800bbe4:	469e      	mov	lr, r3
 800bbe6:	4770      	bx	lr

0800bbe8 <_fini>:
 800bbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbea:	bf00      	nop
 800bbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbee:	bc08      	pop	{r3}
 800bbf0:	469e      	mov	lr, r3
 800bbf2:	4770      	bx	lr
